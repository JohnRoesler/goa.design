<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Runtime on goa</title>
    <link>http://goa.design/categories/runtime/</link>
    <description>Recent content in Runtime on goa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Jan 2016 11:01:06 -0500</lastBuildDate>
    <atom:link href="http://goa.design/categories/runtime/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>runtime</title>
      <link>http://goa.design/components/runtime/</link>
      <pubDate>Sat, 30 Jan 2016 11:01:06 -0500</pubDate>
      
      <guid>http://goa.design/components/runtime/</guid>
      <description>&lt;p&gt;
                                The goa runtime is implemented by the goa package. It includes the
                                implementation of the goa action context which provides the means
                                to access the request state and write the response. The package
                                also contains a number of data structures and algorithms
                                that provide supporting functionality to the service. These include
                                logging, error handling, versioning support etc.
                                goa follows the &#34;battery included&#34; model for the supporting
                                functionality letting you customize all aspects if the provided
                                default is not sufficient.
                        &lt;/p&gt;
                        &lt;h3&gt;The goa Action Context&lt;/h3&gt;
                        &lt;p&gt;
                                The action context is a data structure that is provided to all goa
                                controller action implementations as first parameter. It leverages the
                                &lt;a href=&#34;https://blog.golang.org/context&#34;&gt;work done&lt;/a&gt; at Google
                                around passing contexts across interface boundaries and adds to it
                                by providing additional methods tailored to the goa use case.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The context exposes methods to access the request state and write
                                the response in a generic way like many other Go web frameworks. For
                                example path parameters or querystring values can be accessed using
                                the method &lt;code&gt;Get&lt;/code&gt; which returns a string. However goa goes
                                one step further and leverages the code generation provided by `goagen`
                                to define &lt;i&gt;action specific&lt;/i&gt; fields that provide access to the
                                same state using &#34;typed&#34; methods. So for example if a path parameter
                                called &lt;code&gt;ID&lt;/code&gt; is defined in the design as being of type
                                &lt;code&gt;Integer&lt;/code&gt; the corresponding controller action method
                                accepts a context data structure which exposes a field named &lt;code&gt;ID&lt;/code&gt;
                                of type &lt;code&gt;int&lt;/code&gt;. The same goes for the request payload so that
                                accessing the &lt;code&gt;Payload&lt;/code&gt; field of an action context returns
                                a data structure that is specific to that action as described in the
                                design. This alleviates the need for reflection or otherwise &#34;binding&#34;
                                the context to a struct.&lt;br/&gt;
                                &lt;br/&gt;
                                The same goes for writing responses: while the underlying http
                                ResponseWriter is available to write the response, the action context
                                also provides action specific methods for writing the responses
                                described in the design. These generated methods take care of writing
                                the correct status code and content-type header for example. They
                                also make it possible to specificy the response payload using custom
                                data structures generated from the media type described in the design.
                        &lt;/p&gt;
                        &lt;p&gt;
                                As mentioned earlier each controller action context wraps a golang
                                package context. This means that deadlines and cancelation signals
                                are available to all action implemetations. The built-in
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#Timeout&#34;&gt;Timeout&lt;/a&gt; middleware
                                takes advantage of this ability to let services or controllers
                                define a timeout value for all requests.
                        &lt;/p&gt;
                        &lt;h3&gt;Supporting Functionality&lt;/h3&gt;
                        &lt;h4&gt;Service Mux&lt;/h4&gt;
                        &lt;p&gt;
                                The goa HTTP request mux is in charge of dispatching incoming requests
                                to the correct controller action. It implements the &lt;code&gt;ServeMux&lt;/code&gt;
                                interface which on top of the usual binding of HTTP method and path
                                to handler also provides support for API versioning.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The &lt;code&gt;ServeMux&lt;/code&gt; interface &lt;code&gt;Handle&lt;/code&gt; method associates
                                a request HTTP method and path to a HandleFunc which is a function
                                that accepts a http ResponseWriter and Request as well as a instance
                                of url Values that contain all the path and querystring parameters.&lt;br/&gt;
                                &lt;br/&gt;
                                The interface also exposes a &lt;code&gt;Version&lt;/code&gt; method that gives
                                access to version specific muxes. This makes it possible to define
                                different controller actions for the same request HTTP method and
                                path but different API versions. The actual algorithm used to
                                compute the targeted API version is provided via an instance of
                                &lt;code&gt;SelectVersionFunc&lt;/code&gt;. goa comes with several implementations
                                of SelectVersionFunc:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;PathSelectVersionFunc&lt;/code&gt; function creates a
                                        &lt;code&gt;SelectVersionFunc&lt;/code&gt; that extracts the version from the request
                                        path.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;HeaderSelectVersionFunc&lt;/code&gt; function creates a
                                        &lt;code&gt;SelectVersionFunc&lt;/code&gt; that extracts the version from the given
                                        HTTP request header.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;QuerySelectVersionFunc&lt;/code&gt; function creates a
                                        &lt;code&gt;SelectVersionFunc&lt;/code&gt; that extracts the version from
                                        the given querystring value.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                The function &lt;code&gt;CombineSelectVersionFunc&lt;/code&gt; makes it possible to
                                combine any number of &lt;code&gt;SelectionVersionFunc&lt;/code&gt; to produce
                                arbitrarily complex lookup algorithms.
                        &lt;/p&gt;
                        &lt;h4&gt;Middleware&lt;/h4&gt;
                        &lt;p&gt;
                                goa defines its own type of middleware but also supports &#34;raw&#34; http
                                middleware. The &lt;a href=&#34;https://github.com/goadesign/goa-middleware&#34;&gt;goa-middleware&lt;/a&gt;
                                repo contains a number of goa middlewares.
                        &lt;/p&gt;
                        &lt;h4&gt;Logging&lt;/h4&gt;
                        &lt;p&gt;
                                goa uses structured logging so that logs created at each level contain
                                all the contextual information. The root logger is the service-level
                                &lt;code&gt;Logger&lt;/code&gt; field. Loggers are derived from it for each
                                controller and for each action. Finally a logger is also created for
                                each request so that log entries created inside a request contain
                                the full context: service name, controller name, action name and
                                unique request ID.
                        &lt;p&gt;
                        &lt;h4&gt;Error Handling&lt;/h4&gt;
                        &lt;p&gt;
                                All goa actions return an error. Error handlers can be defined at the 
                                controller or service level. If an action returns a non-nil error
                                then the controller error handler is invoked. If the controller does
                                not define a error handler then the service-wide error handler is
                                invoked instead. The default goa error handler simply returns a 500
                                response containing the error details in the body.
                        &lt;p&gt;
                        &lt;h4&gt;Graceful Shutdown&lt;/h4&gt;
                        &lt;p&gt;
                                A goa service can be instantiated via `NewGraceful` in which case the
                                http server is implemented by the &lt;a href=&#34;https://godoc.org/github.com/tylerb/graceful&#34;&gt;graceful package&lt;/a&gt;
                                which provides graceful shutdown behavior where upon receving a
                                shutdown signal the service waits until all pending requests are
                                completed before terminating.
                        &lt;/p&gt;
                        &lt;h3&gt;Swapping the Batteries&lt;/h3&gt;
                        &lt;h4&gt;Error Handling&lt;/h4&gt;
                        &lt;p&gt;
                                The service interface exposes a &lt;code&gt;SetHandler&lt;/code&gt; method which
                                allows overriding the default service error handler. goa comes with
                                two built-in error handlers:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;DefaultErrorHandler&lt;/code&gt; returns a 400 if the error
                                        is an instance of &lt;code&gt;BadRequestError&lt;/code&gt;, 500 otherwise.
                                        It also always writes the error message to the response body.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;TerseErrorHandler&lt;/code&gt; behaves identically to the
                                        default error handler with the exception that it does not write
                                        the error message to the response body for internal errors
                                        (i.e. errors that are not instances of &lt;code&gt;BadRequestError&lt;/code&gt;).
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                Custom error handlers can be easily swapped in, they consist of a
                                function that accepts an instance of an action context and of an 
                                error.
                        &lt;/p&gt;
                        &lt;h4&gt;Request Mux and Versioning&lt;/h4&gt;
                        &lt;p&gt;
                                As mentioned above the goa mux supports defining version specific
                                muxes. Different versions can be defined in the design using the 
                                &lt;code&gt;Version&lt;/code&gt; DSL:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package design

import (
        . &#34;github.com/goadesign/goa/design&#34;
        . &#34;github.com/goadesign/goa/design/apidsl&#34;
)

var _ = API(&#34;cellar&#34;, func() {
        Description(&#34;A basic example of an API implemented with goa&#34;)
        Scheme(&#34;http&#34;)
        Host(&#34;localhost:8080&#34;)
})

var _ = Version(&#34;1.0&#34;, func() {
        Title(&#34;The virtual winecellar v1.0 API&#34;)
        // ... other API level properties
})

var _ = Version(&#34;2.0&#34;, func() {
        Title(&#34;The virtual winecellar v2.0 API&#34;)
        // ... other API level properties
})

var _ = Resource(&#34;bottle&#34;, func() {
        BasePath(&#34;/bottles&#34;)
        Version(&#34;1.0&#34;)
        Version(&#34;2.0&#34;)
        // ... other resource properties
})

var _ = Resource(&#34;bottle&#34;, func() {
        BasePath(&#34;/bottles&#34;)
        Version(&#34;3.0&#34;)
        // ... other resource properties
})
&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                When &lt;code&gt;goagen&lt;/code&gt; sees that the design defines versions it
                                produces code that leverages the ServeMux interface Version method
                                to mount controllers onto the appropriate version mux:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func MountBottleV1Controller(service goa.Service, ctrl v1.BottleController) {
                                // ...
                        &lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                Each version defined in the design produces a different package containing
                                the corresponding generated controllers.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The generated code relies on the &lt;code&gt;ServeMux&lt;/code&gt; method exposed
                                by the service to retrieve the top-level mux. The goa default mux
                                implementation relies on the &lt;a href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;httprouter&lt;/a&gt;
                                package to implement the low level dispatch. Other low level routers
                                can easily be subsituted by providing an implementation of the
                                ServeMux interface.
                        &lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>