<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gen_main on goa</title>
    <link>http://goa.design/tags/gen_main/</link>
    <description>Recent content in Gen_main on goa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://goa.design/tags/gen_main/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>goa/goagen/gen_main</title>
      <link>http://goa.design/godoc/goa/goagen/gen_main/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/goa/goagen/gen_main/</guid>
      <description>

&lt;h1 id=&#34;genmain:37f33a104050d7aa5c3a67946b590852&#34;&gt;genmain&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/goa/goagen/gen_main&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package genmain provides a generator for a skeleton goa application.
This generator generates the code for a basic &amp;ldquo;main&amp;rdquo; package and is mainly intended as a way to
bootstrap new applications.
The generator creates a main.go file and one file per resource listed in the API metadata.
If a file already exists it skips its creation unless the flag &amp;ndash;force is provided on the command
line in which case it overrides the content of existing files.&lt;/p&gt;

&lt;h2 id=&#34;variables:37f33a104050d7aa5c3a67946b590852&#34;&gt;Variables&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (
    // AppName is the name of the generated application.
    AppName string

    // TargetPackage is the name of the generated Go package.
    TargetPackage string

    // Force is true if pre-existing files should be overwritten during generation.
    Force bool
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-generate:37f33a104050d7aa5c3a67946b590852&#34;&gt;func Generate&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Generate(api *design.APIDefinition) (files []string, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate is the generator entry point called by the meta generator.&lt;/p&gt;

&lt;h2 id=&#34;type-command:37f33a104050d7aa5c3a67946b590852&#34;&gt;type Command&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Command struct {
    *codegen.BaseCommand
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Command is the goa application code generator command line data structure.
It implements meta.Command.&lt;/p&gt;

&lt;h3 id=&#34;func-newcommand:37f33a104050d7aa5c3a67946b590852&#34;&gt;func NewCommand&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewCommand() *Command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewCommand instantiates a new command.&lt;/p&gt;

&lt;h3 id=&#34;func-command-registerflags:37f33a104050d7aa5c3a67946b590852&#34;&gt;func (*Command) RegisterFlags&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *Command) RegisterFlags(r codegen.FlagRegistry)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RegisterFlags registers the command line flags with the given registry.&lt;/p&gt;

&lt;h3 id=&#34;func-command-run:37f33a104050d7aa5c3a67946b590852&#34;&gt;func (*Command) Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *Command) Run() ([]string, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run simply calls the meta generator.&lt;/p&gt;

&lt;h2 id=&#34;type-generator:37f33a104050d7aa5c3a67946b590852&#34;&gt;type Generator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Generator struct {
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generator is the application code generator.&lt;/p&gt;

&lt;h3 id=&#34;func-generator-cleanup:37f33a104050d7aa5c3a67946b590852&#34;&gt;func (*Generator) Cleanup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (g *Generator) Cleanup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cleanup removes all the files generated by this generator during the last invokation of Generate.&lt;/p&gt;

&lt;h3 id=&#34;func-generator-generate:37f33a104050d7aa5c3a67946b590852&#34;&gt;func (*Generator) Generate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (g *Generator) Generate(api *design.APIDefinition) (_ []string, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate produces the skeleton main.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>