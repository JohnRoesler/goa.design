<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dsl on goa</title>
    <link>http://goa.design/tags/dsl/</link>
    <description>Recent content in Dsl on goa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://goa.design/tags/dsl/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>gorma/dsl</title>
      <link>http://goa.design/godoc/gorma/dsl/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/gorma/dsl/</guid>
      <description>

&lt;h1 id=&#34;dsl:b91f061e580551b58ef10f70a914bd76&#34;&gt;dsl&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/gorma/dsl&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package dsl uses the Goa DSL engine to generate a data storage layer
for your Goa API.&lt;/p&gt;

&lt;p&gt;Using a few DSL definitions you can extend the Goa API to include
database persistence.&lt;/p&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sg = StorageGroup(&amp;quot;MyStorageGroup&amp;quot;, func() {
    Description(&amp;quot;This is the global storage group&amp;quot;)
    Store(&amp;quot;mysql&amp;quot;, gorma.MySQL, func() {
        Description(&amp;quot;This is the mysql relational store&amp;quot;)
        Model(&amp;quot;Bottle&amp;quot;, func() {
            BuiltFrom(BottlePayload)
            RenderTo(Bottle)
            Description(&amp;quot;This is the bottle model&amp;quot;)
            Field(&amp;quot;ID&amp;quot;, gorma.PKInteger, func() {
                Description(&amp;quot;This is the ID PK field&amp;quot;)
            })
            Field(&amp;quot;Vintage&amp;quot;, gorma.Integer, func() {
                SQLTag(&amp;quot;index&amp;quot;)
            })
            Field(&amp;quot;CreatedAt&amp;quot;, gorma.Timestamp, func() {})
            Field(&amp;quot;UpdatedAt&amp;quot;, gorma.Timestamp, func() {})
            Field(&amp;quot;DeletedAt&amp;quot;, gorma.NullableTimestamp, func() {})
        })
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gorma uses Gorm (&lt;a href=&#34;https://github.com/jinzhu/gorm&#34;&gt;https://github.com/jinzhu/gorm&lt;/a&gt;) for database access.  Gorm was chosen
as the best of the &amp;lsquo;light-ORM&amp;rsquo; libraries available for Go.  It does the mundane work and
allows you to do anything manually if you choose.&lt;/p&gt;

&lt;p&gt;The base Gorma definition is a &lt;code&gt;StorageGroup&lt;/code&gt; which represents all the storage needs for an
application.  A StorageGroup will contain one or more &lt;code&gt;Store&lt;/code&gt;, which represends a database or
other persistence mechanism.  Gorma supports all the databases that Gorm supports, and
it is possible in the future to support others &amp;ndash; like Key/Value stores.&lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;Store&lt;/code&gt; will have one or more &lt;code&gt;Model&lt;/code&gt; which maps a Go structure to a table in the database.
Use the &lt;code&gt;BuiltFrom&lt;/code&gt; and &lt;code&gt;RenderTo&lt;/code&gt; DSL to tell the model which Goa types will be the payload (input)
and return types.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Model&lt;/code&gt; will contain one or more fields.  Gorma will use the &lt;code&gt;BuiltFrom&lt;/code&gt; definition to populate
a base set of fields.  Custom DSL is provided to add additional fields:&lt;/p&gt;

&lt;p&gt;Each table will likely want a primary key.  To add one to your &lt;code&gt;Model&lt;/code&gt;, create a Field definition
with a type of &lt;code&gt;gorma.PKInteger&lt;/code&gt; or &lt;code&gt;gorma.PKBigInteger&lt;/code&gt;.  Gorma will support UUID primary keys
at some point in the future.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Field(&amp;quot;ID&amp;quot;, gorma.PKInteger, func() {
    Description(&amp;quot;This is the ID PK field&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gorma generates all the helpers you need to translate to and from the Goa types (media types and payloads).
This makes wiring up your Goa controllers almost too easy to be considered programming.&lt;/p&gt;

&lt;h2 id=&#34;func-alias:b91f061e580551b58ef10f70a914bd76&#34;&gt;func Alias&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Alias(d string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alias overrides the name of the SQL store&amp;rsquo;s table or field.&lt;/p&gt;

&lt;h2 id=&#34;func-belongsto:b91f061e580551b58ef10f70a914bd76&#34;&gt;func BelongsTo&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func BelongsTo(parent string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BelongsTo signifies a relationship between this model and a
Parent.  The Parent has the child, and the Child belongs
to the Parent.
Usage:  BelongsTo(&amp;ldquo;User&amp;rdquo;)&lt;/p&gt;

&lt;h2 id=&#34;func-builtfrom:b91f061e580551b58ef10f70a914bd76&#34;&gt;func BuiltFrom&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func BuiltFrom(bf interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BuiltFrom informs Gorma that this model will be populated
from a Goa payload (User Type).  Conversion functions
will be generated to convert from the payload to the model.
Usage:  BuiltFrom(SomeGoaPayload)&lt;/p&gt;

&lt;h2 id=&#34;func-cached:b91f061e580551b58ef10f70a914bd76&#34;&gt;func Cached&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Cached(d string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cached caches the models for &lt;code&gt;duration&lt;/code&gt; seconds.&lt;/p&gt;

&lt;h2 id=&#34;func-description:b91f061e580551b58ef10f70a914bd76&#34;&gt;func Description&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Description(d string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Description sets the definition description.
Description can be called inside StorageGroup, RelationalStore, RelationalModel, RelationalField&lt;/p&gt;

&lt;h2 id=&#34;func-dynamictablename:b91f061e580551b58ef10f70a914bd76&#34;&gt;func DynamicTableName&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DynamicTableName()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DynamicTableName sets a boolean flag that causes the generator to
generate function definitions in the database models that specify
the name of the database table.  Useful when using multiple tables
with different names but same schema e.g. Users, AdminUsers.&lt;/p&gt;

&lt;h2 id=&#34;func-field:b91f061e580551b58ef10f70a914bd76&#34;&gt;func Field&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Field(name string, args ...interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Field is a DSL definition for a field in a Relational Model.
TODO: Examples and more docs here later.&lt;/p&gt;

&lt;p&gt;Parameter Options:
Field(&amp;ldquo;Title&amp;rdquo;)
Field(&amp;ldquo;Title&amp;rdquo;, gorma.String)
Field(&amp;ldquo;Title&amp;rdquo;, func(){&amp;hellip; other field level dsl &amp;hellip;})
Field(&amp;ldquo;Title&amp;rdquo;, gorma.String, func(){&amp;hellip; other field level dsl &amp;hellip;})&lt;/p&gt;

&lt;h2 id=&#34;func-hasmany:b91f061e580551b58ef10f70a914bd76&#34;&gt;func HasMany&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func HasMany(name, child string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HasMany signifies a relationship between this model and a
set of Children.  The Parent has the children, and the Children belong
to the Parent.  The first parameter becomes the name of the
field in the model struct, the second parameter is the name
of the child model.  The Child model will have a ParentID field
appended to the field list.  The Parent model definition will use
the first parameter as the field name in the struct definition.
Usage:  HasMany(&amp;ldquo;Orders&amp;rdquo;, &amp;ldquo;Order&amp;rdquo;)
Struct field definition:  Children  []Child&lt;/p&gt;

&lt;h2 id=&#34;func-hasone:b91f061e580551b58ef10f70a914bd76&#34;&gt;func HasOne&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func HasOne(child string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HasOne signifies a relationship between this model and another model.
If this model HasOne(OtherModel), then OtherModel is expected
to have a ThisModelID field as a Foreign Key to this model&amp;rsquo;s
Primary Key.  ThisModel will have a field named OtherModel of type
OtherModel.
Usage:  HasOne(&amp;ldquo;Proposal&amp;rdquo;)&lt;/p&gt;

&lt;h2 id=&#34;func-manytomany:b91f061e580551b58ef10f70a914bd76&#34;&gt;func ManyToMany&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ManyToMany(other, tablename string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ManyToMany creates a join table to store the intersection relationship
between this model and another model.  For example, in retail an Order can
contain many products, and a product can belong to many orders.  To express
this relationship use the following syntax:
Model(&amp;ldquo;Order&amp;rdquo;, func(){&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ManyToMany(&amp;quot;Product&amp;quot;, &amp;quot;order_lines&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;})
This specifies that the Order and Product tables have a &amp;ldquo;junction&amp;rdquo; table
called &lt;code&gt;order_lines&lt;/code&gt; that contains the order and product information.
The generated model will have a field called &lt;code&gt;Products&lt;/code&gt; that will
be an array of type &lt;code&gt;product.Product&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;func-model:b91f061e580551b58ef10f70a914bd76&#34;&gt;func Model&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Model(name string, dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Model is the DSL that represents a Relational Model.
Model name should be Title cased. Use RenderTo() and BuiltFrom()
to have Gorma generate conversion helpers for your model.  Gorma
will create appropriate fields for all of your database relationships
too, using the BelongsTo(), HasMany(), HasOne(), and ManyToMany() DSL.&lt;/p&gt;

&lt;h2 id=&#34;func-noautomaticidfields:b91f061e580551b58ef10f70a914bd76&#34;&gt;func NoAutomaticIDFields&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NoAutomaticIDFields()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NoAutomaticIDFields applies to a &lt;code&gt;Store&lt;/code&gt; type.  It allows you
to turn off the default behavior that will automatically create
an ID/int Primary Key for each model.&lt;/p&gt;

&lt;h2 id=&#34;func-noautomaticsoftdelete:b91f061e580551b58ef10f70a914bd76&#34;&gt;func NoAutomaticSoftDelete&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NoAutomaticSoftDelete()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NoAutomaticSoftDelete applies to a &lt;code&gt;Store&lt;/code&gt; type.  It allows
you to turn off the default behavior that will automatically
create a &lt;code&gt;DeletedAt&lt;/code&gt; field (*time.Time) that acts as a
soft-delete filter for your models.&lt;/p&gt;

&lt;h2 id=&#34;func-noautomatictimestamps:b91f061e580551b58ef10f70a914bd76&#34;&gt;func NoAutomaticTimestamps&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NoAutomaticTimestamps()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NoAutomaticTimestamps applies to a &lt;code&gt;Store&lt;/code&gt; type.  It allows you
to turn off the default behavior that will automatically create
an &lt;code&gt;CreatedAt&lt;/code&gt; and &lt;code&gt;UpdatedAt&lt;/code&gt; fields for each model.&lt;/p&gt;

&lt;h2 id=&#34;func-renderto:b91f061e580551b58ef10f70a914bd76&#34;&gt;func RenderTo&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func RenderTo(rt interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RenderTo informs Gorma that this model will need to be
rendered to a Goa type.  Conversion functions
will be generated to convert to/from the model.
Usage:   RenderTo(SomeGoaMediaType)&lt;/p&gt;

&lt;h2 id=&#34;func-roler:b91f061e580551b58ef10f70a914bd76&#34;&gt;func Roler&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Roler()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Roler sets a boolean flag that cause the generation of a
Role() function that returns the model&amp;rsquo;s Role value
Requires a field in the model named Role, type String&lt;/p&gt;

&lt;h2 id=&#34;func-sqltag:b91f061e580551b58ef10f70a914bd76&#34;&gt;func SQLTag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func SQLTag(d string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SQLTag sets the model&amp;rsquo;s struct tag &lt;code&gt;sql&lt;/code&gt; value
for indexing and other purposes.&lt;/p&gt;

&lt;h2 id=&#34;func-sanitizedbfieldname:b91f061e580551b58ef10f70a914bd76&#34;&gt;func SanitizeDBFieldName&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func SanitizeDBFieldName(name string) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SanitizeDBFieldName is exported for testing purposes&lt;/p&gt;

&lt;h2 id=&#34;func-sanitizefieldname:b91f061e580551b58ef10f70a914bd76&#34;&gt;func SanitizeFieldName&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func SanitizeFieldName(name string) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SanitizeFieldName is exported for testing purposes&lt;/p&gt;

&lt;h2 id=&#34;func-storagegroup:b91f061e580551b58ef10f70a914bd76&#34;&gt;func StorageGroup&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func StorageGroup(name string, dsli func()) *gorma.StorageGroupDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;StorageGroup implements the top level Gorma DSL
There should be one StorageGroup per Goa application.&lt;/p&gt;

&lt;h2 id=&#34;func-store:b91f061e580551b58ef10f70a914bd76&#34;&gt;func Store&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Store(name string, storeType gorma.RelationalStorageType, dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Store represents a database.  Gorma lets you specify
a database type, but it&amp;rsquo;s currently not used for any generation
logic.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goa DSL Engine</title>
      <link>http://goa.design/components/engine/</link>
      <pubDate>Sat, 30 Jan 2016 11:01:06 -0500</pubDate>
      
      <guid>http://goa.design/components/engine/</guid>
      <description>&lt;p&gt;&lt;p&gt;
                                &lt;code&gt;goagen&lt;/code&gt; is a tool that generates various artifacts from a goa design package.&lt;br/&gt; Install it with:
                                &lt;code class=&#34;bash&#34;&gt;go get github.com/goadesign/goa/goagen&lt;/code&gt;&lt;br/&gt;
                                goagen relies on &lt;code&gt;goimports&lt;/code&gt;:&lt;br/&gt;
                                &lt;code class=&#34;bash&#34;&gt;go get golang.org/x/tools/cmd/goimports&lt;/code&gt;
                        &lt;/p&gt;
                        &lt;p&gt;
                                Each type of artifact is associated with a &lt;code&gt;goagen&lt;/code&gt; command that exposes it own set of flags.
                                Internally these commands map to &amp;ldquo;generators&amp;rdquo; that contain the logic for generating the artifacts.
                                It works something like this:
                        &lt;/p&gt;
                        &lt;ol&gt;
                                &lt;li&gt;
                                        goagen parses the command line to determine the type of output desired and invokes the appropriate generator.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The generator writes the code of the tool that will produce the final output to a temporary Go workspace.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The tool composed of the design language package and the output producing code is compiled in the temporary workspace.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;goagen&lt;/code&gt; then runs the tool which evaluates the design functions and traverses the resulting in-memory data
                                        structures to write the output.
                                &lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;p&gt;
                                Each generator registers a command with the &lt;code&gt;goagen&lt;/code&gt; tool, &lt;code&gt;goagen &amp;ndash;help&lt;/code&gt; lists all the available
                                commands. These are:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;app&lt;/code&gt;: generates the service boilerplate code including controllers, contexts, media types and user types.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;main&lt;/code&gt;: generates a skeleton file for each resource controller as well as a default &lt;code&gt;main&lt;/code&gt;.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;client&lt;/code&gt;: generates an API client Go package and tool.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;swagger&lt;/code&gt;: generates the API Swagger specification.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;js&lt;/code&gt;: generates a JavaScript API client.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;schema&lt;/code&gt;: generates the API Hyper-schema JSON.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;gen&lt;/code&gt;: invokes a third party generator.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;bootstrap&lt;/code&gt;: invokes the &lt;code&gt;app&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;swagger&lt;/code&gt;
                                        generators.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                The command &lt;code&gt;goagen &amp;ndash;help-long&lt;/code&gt; lists all the supported commands and their flags.
                        &lt;/p&gt;
                        &lt;h2&gt;Common flags&lt;/h2&gt;
                        &lt;p&gt;
                                The following flags apply to all the &lt;code&gt;goagen&lt;/code&gt; commands:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;design|-d=DESIGN&lt;/code&gt; defines the Go package path to the service design package.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;out|-o=OUT&lt;/code&gt; specifies where to generate the files, defaults to the current directory.
                                &lt;/li&gt;
                                        &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;debug&lt;/code&gt; enables &lt;code&gt;goagen&lt;/code&gt; debug. This causes &lt;code&gt;goagen&lt;/code&gt; to print the content of the temporary
                                        files and to leave them around.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;help|&amp;ndash;help-long|&amp;ndash;help-man&lt;/code&gt; prints contextual help.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen app&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;app&lt;/code&gt; command is arguably the most critical. It generates all the supporting code for the
                                goa service. This command supports an additional flag:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg=app&lt;/code&gt; specifies the name of the generated Go package, defaults to &lt;code&gt;app&lt;/code&gt;. That&amp;rsquo;s also the
                                        name of the subdirectory that gets created to store the generated Go files.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                This command always deletes and re-creates any pre-existing directory with the same name. The idea
                                being that these files should never be edited.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen main&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;main&lt;/code&gt; command helps bootstrap a new goa service by generating a default &lt;code&gt;main.go&lt;/code&gt; as
                                well as a default (empty) implementation for each resource controller defined in the design package. By default
                                this command only generates the files if they don&amp;rsquo;t exist yet in the output directory. This
                                command accepts two additional flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;force&lt;/code&gt; causes the files to be generated even if files with the same name already exist (in
                                        which case they get overwritten).
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;name=API&lt;/code&gt; specifies the name of the service to be used in the generated call to &lt;code&gt;goa.New&lt;/code&gt;.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen client&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;client&lt;/code&gt; command generates both an API client package and tool. The client package implements a &lt;code&gt;Client&lt;/code&gt;
                                object that exposes one method for each resource action. The generated code of the CLI tool leverages the package to
                                make the API requests to the service.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The &lt;code&gt;Client&lt;/code&gt; object can be configured to use request signers that get invoked prior to sending the
                                request. The signers modify the request to include auth headers for example. goa comes with signers that implement
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#BasicSigner&#34;&gt;basic auth&lt;/a&gt;,
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#JWTSigner&#34;&gt;JWT auth&lt;/a&gt; and a subset of
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#OAuth2Signer&#34;&gt;OAuth2&lt;/a&gt;. Custom signers my be used as well, they must
                                implement the &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#Signer&#34;&gt;Signer&lt;/a&gt; interface.
                                This command accepts three additional flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;version&lt;/code&gt; specifies the CLI tool version.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;signer&lt;/code&gt; specifies a signer object supported by the API. Signer objects generally perform auth.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;signerPkg&lt;/code&gt; specifies the path to the package implementing the signer objects if not goa.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen js&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;js&lt;/code&gt; command generates a JavaScript API client suitable for both client-side and server-side
                                applications. The generated code defines an anonymous AMD module and relies on the &lt;a href=&#34;https://github.com/mzabriskie/axios&#34;&gt;axios&lt;/a&gt;
                                promised-based JavaScript library for making the actual HTTP requests.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The generated module wraps the &lt;code&gt;axios&lt;/code&gt; client and adds API specific functions, for example:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// List all bottles in account optionally filtering by year
// path is the request path, the format is &amp;ldquo;/cellar/accounts/:accountID/bottles&amp;rdquo;
// years is used to build the request query string.
// config is an optional object to be merged into the config built by the function prior to making the request.
// The content of the config object is described here: &lt;a href=&#34;https://github.com/mzabriskie/axios#request-api&#34;&gt;https://github.com/mzabriskie/axios#request-api&lt;/a&gt;
// This function returns a promise which raises an error if the HTTP response is a 4xx or 5xx.
client.listBottle = function (path, years, config) {
  cfg = {
    timeout: timeout,
    url: urlPrefix + path,
    method: &amp;lsquo;get&amp;rsquo;,
    params: {
      years: years
    },
    responseType: &amp;lsquo;json&amp;rsquo;
  };
  if (config) {
    cfg = utils.merge(cfg, config);
  }
  return client(cfg);
}&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The generated client module can be loaded using &lt;code&gt;requirejs&lt;/code&gt;:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;requirejs.config({
  paths: {
    axios: &amp;lsquo;/js/axios.min&amp;rsquo;,
    client: &amp;lsquo;/js/client&amp;rsquo;
  }
});
requirejs([&amp;lsquo;client&amp;rsquo;], function (client) {
  client().listBottle (&amp;ldquo;/cellar/accounts/440/bottles&amp;rdquo;, 317)
    .then(function (resp) {
      // All good, use resp
    })
    .catch(function (resp) {
      // Woops, request failed or returned 4xx or 5xx.
    });
});&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The code above assumes that the generated files &lt;code&gt;client.js&lt;/code&gt; and &lt;code&gt;axios.min.js&lt;/code&gt; are both
                                served from &lt;code&gt;/js&lt;/code&gt;. The &lt;code&gt;resp&lt;/code&gt; value returned to the promise is an object with the following
                                fields:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code language=&#34;javascript&#34;&gt;{
  // &lt;code&gt;data&lt;/code&gt; is the response that was provided by the server
  data: {},&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;status&lt;/code&gt; is the HTTP status code from the server response
  status: 200,&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;statusText&lt;/code&gt; is the HTTP status message from the server response
  statusText: &amp;lsquo;OK&amp;rsquo;,&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;headers&lt;/code&gt; the headers that the server responded with
  headers: {},&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;config&lt;/code&gt; is the config that was provided to &lt;code&gt;axios&lt;/code&gt; for the request
  config: {}
}&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The generator also produces an example HTML and controller that can be mounted on a
                                goa service to quickly test the JavaScript. Simply import the &lt;code&gt;js&lt;/code&gt; Go
                                package in your service main and mount the controller. The example HTML is served
                                under &lt;code&gt;/js&lt;/code&gt; so that loading this path in a browser will trigger the generated
                                JavaScript.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen swagger&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;swagger&lt;/code&gt; command generates a &lt;a href=&#34;http://swagger.io&#34;&gt;Swagger&lt;/a&gt; specification of the API.
                                The command does not accept additional flags. It generates both the Swagger JSON as well as a controller that
                                can be mounted on the goa service to serve it under &lt;code&gt;/swagger.json&lt;/code&gt;.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen schema&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;schema&lt;/code&gt; command generates a &lt;a href=&#34;https://blog.heroku.com/archives/2014/1/8/json_schema_for_heroku_platform_api&#34;&gt;Heroku-like&lt;/a&gt;
                                JSON hyper-schema representation of the API. It generates both the JSON as well as a controller that
                                can be mounted on the goa service to serve it under &lt;code&gt;/schema.json&lt;/code&gt;. The command accepts an additional flag:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;url|-u=URL&lt;/code&gt; specifies the base URL used to build the JSON schema ID.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen gen&lt;/code&gt;: goagen Plugins&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;gen&lt;/code&gt; command makes it possible to invoke &lt;code&gt;goagen&lt;/code&gt; plugins.
                                This command accepts two flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg-path=PKG-PATH&lt;/code&gt; specifies the Go package path to the plugin package.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg-name=PKG-NAME&lt;/code&gt; specifies the Go package name of the plugin package. It defaults to the
                                        name of the inner most directory in the Go package path.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                A plugin consists of a Go package which exposes a &lt;code&gt;Generate&lt;/code&gt; function with the following
                                signature:
                        &lt;p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func Generate(api *design.APIDefinition) ([]string, error)
&lt;/pre&gt;&lt;/code&gt;
                        &lt;p&gt;
                                 where api is the API definition computed from the design package. On success &lt;code&gt;Generate&lt;/code&gt; should return
                                 the path to the generated files. On error the error message gets displayed to the user (and
                                 goagen exist with status 1).
                        &lt;/p&gt;
                        &lt;p&gt;
                                 The &lt;code&gt;Generate&lt;/code&gt; method should take advantage of the &lt;code&gt;APIDefinition&lt;/code&gt; &lt;code&gt;IterateXXX&lt;/code&gt; methods to iterate
                                 through the API resources, media types and types to guarantee that the order doesn&amp;rsquo;t change
                                 between two invokation of the function (thereby generating different output even if the design
                                 hasn&amp;rsquo;t changed).
                        &lt;/p&gt;
                        &lt;p&gt;
                                 They may also take advantage of Metadata. The goa design language allows defining Metadata on a
                                 number of definitions: API, Resource, Action, Response and Attribute (which means Type and
                                 MediaType as well since these definitions are attributes). A metadata field consists of a
                                 key/value pair where both are simple strings. The generator can use these key/value pairs to
                                 produce different results, see example below. Metadata has no effect on the buit-in generators.
                                 The Output directory is available through the codegen.OutputDir global variable.
                        &lt;/p&gt;
                        &lt;p&gt;
                                 Package genresnames is an example of a goagen plugin. It creates a file &amp;ldquo;names.txt&amp;rdquo; containing
                                 the names of the API resources sorted in alphabetical order. If a resource has a
                                 metadata pair with the key &amp;ldquo;genresnames/name&amp;rdquo; then the plugin uses the metadata value instead.
                        &lt;/p&gt;
                        &lt;p&gt;
                                 Invoke the plugin with:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code&gt;
                                 goagen gen -d &lt;Go package path to design package&gt; &amp;ndash;pkg-path=&lt;Go package path to genresnames&gt;
                        &lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                 Source code:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;
package genresnames&lt;/p&gt;

&lt;p&gt;import (
        &amp;ldquo;io/ioutil&amp;rdquo;
        &amp;ldquo;os&amp;rdquo;
        &amp;ldquo;path/filepath&amp;rdquo;
        &amp;ldquo;strings&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;gopkg.in/alecthomas/kingpin.v2&amp;quot;

    &amp;quot;github.com/goadesign/goa/design&amp;quot;
    &amp;quot;github.com/goadesign/goa/goagen/codegen&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;)&lt;/p&gt;

&lt;p&gt;// Generate is the function called by goagen to generate the names file.
func Generate(api *design.APIDefinition) ([]string, error) {
        // Make sure to parse the common flags so that codegen.OutputDir gets properly
        // initialized.
        app := kingpin.New(&amp;ldquo;Resource names&amp;rdquo;, &amp;ldquo;Resource name generator&amp;rdquo;)
        codegen.RegisterFlags(app)
        if _, err := app.Parse(os.Args[1:]); err != nil {
                panic(err)
        }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // Now iterate through the resources to gather their names
    names := make([]string, len(api.Resources))
    i := 0
    api.IterateResources(func(res *design.ResourceDefinition) error {
            if n, ok := res.Metadata[&amp;quot;genresnames/name&amp;quot;]; ok {
                    names[i] = n
            } else {
                    names[i] = res.Name
            }
            i++
            return nil
    })
    content := strings.Join(names, &amp;quot;\n&amp;quot;)

    // Write the output file and return its name
    outputFile := filepath.Join(codegen.OutputDir, &amp;quot;names.txt&amp;quot;)
    ioutil.WriteFile(outputFile, []byte(content), 0755)
    return []string{outputFile}, nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>goagen</title>
      <link>http://goa.design/components/goagen/</link>
      <pubDate>Sat, 30 Jan 2016 11:01:06 -0500</pubDate>
      
      <guid>http://goa.design/components/goagen/</guid>
      <description>&lt;p&gt;&lt;p&gt;
                                &lt;code&gt;goagen&lt;/code&gt; is a tool that generates various artifacts from a goa design package.&lt;br/&gt; Install it with:
                                &lt;code class=&#34;bash&#34;&gt;go get github.com/goadesign/goa/goagen&lt;/code&gt;&lt;br/&gt;
                                goagen relies on &lt;code&gt;goimports&lt;/code&gt;:&lt;br/&gt;
                                &lt;code class=&#34;bash&#34;&gt;go get golang.org/x/tools/cmd/goimports&lt;/code&gt;
                        &lt;/p&gt;
                        &lt;p&gt;
                                Each type of artifact is associated with a &lt;code&gt;goagen&lt;/code&gt; command that exposes it own set of flags.
                                Internally these commands map to &amp;ldquo;generators&amp;rdquo; that contain the logic for generating the artifacts.
                                It works something like this:
                        &lt;/p&gt;
                        &lt;ol&gt;
                                &lt;li&gt;
                                        goagen parses the command line to determine the type of output desired and invokes the appropriate generator.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The generator writes the code of the tool that will produce the final output to a temporary Go workspace.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The tool composed of the design language package and the output producing code is compiled in the temporary workspace.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;goagen&lt;/code&gt; then runs the tool which evaluates the design functions and traverses the resulting in-memory data
                                        structures to write the output.
                                &lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;p&gt;
                                Each generator registers a command with the &lt;code&gt;goagen&lt;/code&gt; tool, &lt;code&gt;goagen &amp;ndash;help&lt;/code&gt; lists all the available
                                commands. These are:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;app&lt;/code&gt;: generates the service boilerplate code including controllers, contexts, media types and user types.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;main&lt;/code&gt;: generates a skeleton file for each resource controller as well as a default &lt;code&gt;main&lt;/code&gt;.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;client&lt;/code&gt;: generates an API client Go package and tool.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;swagger&lt;/code&gt;: generates the API Swagger specification.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;js&lt;/code&gt;: generates a JavaScript API client.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;schema&lt;/code&gt;: generates the API Hyper-schema JSON.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;gen&lt;/code&gt;: invokes a third party generator.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;bootstrap&lt;/code&gt;: invokes the &lt;code&gt;app&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;swagger&lt;/code&gt;
                                        generators.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                The command &lt;code&gt;goagen &amp;ndash;help-long&lt;/code&gt; lists all the supported commands and their flags.
                        &lt;/p&gt;
                        &lt;h2&gt;Common flags&lt;/h2&gt;
                        &lt;p&gt;
                                The following flags apply to all the &lt;code&gt;goagen&lt;/code&gt; commands:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;design|-d=DESIGN&lt;/code&gt; defines the Go package path to the service design package.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;out|-o=OUT&lt;/code&gt; specifies where to generate the files, defaults to the current directory.
                                &lt;/li&gt;
                                        &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;debug&lt;/code&gt; enables &lt;code&gt;goagen&lt;/code&gt; debug. This causes &lt;code&gt;goagen&lt;/code&gt; to print the content of the temporary
                                        files and to leave them around.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;help|&amp;ndash;help-long|&amp;ndash;help-man&lt;/code&gt; prints contextual help.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen app&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;app&lt;/code&gt; command is arguably the most critical. It generates all the supporting code for the
                                goa service. This command supports an additional flag:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg=app&lt;/code&gt; specifies the name of the generated Go package, defaults to &lt;code&gt;app&lt;/code&gt;. That&amp;rsquo;s also the
                                        name of the subdirectory that gets created to store the generated Go files.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                This command always deletes and re-creates any pre-existing directory with the same name. The idea
                                being that these files should never be edited.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen main&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;main&lt;/code&gt; command helps bootstrap a new goa service by generating a default &lt;code&gt;main.go&lt;/code&gt; as
                                well as a default (empty) implementation for each resource controller defined in the design package. By default
                                this command only generates the files if they don&amp;rsquo;t exist yet in the output directory. This
                                command accepts two additional flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;force&lt;/code&gt; causes the files to be generated even if files with the same name already exist (in
                                        which case they get overwritten).
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;name=API&lt;/code&gt; specifies the name of the service to be used in the generated call to &lt;code&gt;goa.New&lt;/code&gt;.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen client&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;client&lt;/code&gt; command generates both an API client package and tool. The client package implements a &lt;code&gt;Client&lt;/code&gt;
                                object that exposes one method for each resource action. The generated code of the CLI tool leverages the package to
                                make the API requests to the service.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The &lt;code&gt;Client&lt;/code&gt; object can be configured to use request signers that get invoked prior to sending the
                                request. The signers modify the request to include auth headers for example. goa comes with signers that implement
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#BasicSigner&#34;&gt;basic auth&lt;/a&gt;,
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#JWTSigner&#34;&gt;JWT auth&lt;/a&gt; and a subset of
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#OAuth2Signer&#34;&gt;OAuth2&lt;/a&gt;. Custom signers my be used as well, they must
                                implement the &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#Signer&#34;&gt;Signer&lt;/a&gt; interface.
                                This command accepts three additional flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;version&lt;/code&gt; specifies the CLI tool version.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;signer&lt;/code&gt; specifies a signer object supported by the API. Signer objects generally perform auth.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;signerPkg&lt;/code&gt; specifies the path to the package implementing the signer objects if not goa.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen js&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;js&lt;/code&gt; command generates a JavaScript API client suitable for both client-side and server-side
                                applications. The generated code defines an anonymous AMD module and relies on the &lt;a href=&#34;https://github.com/mzabriskie/axios&#34;&gt;axios&lt;/a&gt;
                                promised-based JavaScript library for making the actual HTTP requests.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The generated module wraps the &lt;code&gt;axios&lt;/code&gt; client and adds API specific functions, for example:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// List all bottles in account optionally filtering by year
// path is the request path, the format is &amp;ldquo;/cellar/accounts/:accountID/bottles&amp;rdquo;
// years is used to build the request query string.
// config is an optional object to be merged into the config built by the function prior to making the request.
// The content of the config object is described here: &lt;a href=&#34;https://github.com/mzabriskie/axios#request-api&#34;&gt;https://github.com/mzabriskie/axios#request-api&lt;/a&gt;
// This function returns a promise which raises an error if the HTTP response is a 4xx or 5xx.
client.listBottle = function (path, years, config) {
  cfg = {
    timeout: timeout,
    url: urlPrefix + path,
    method: &amp;lsquo;get&amp;rsquo;,
    params: {
      years: years
    },
    responseType: &amp;lsquo;json&amp;rsquo;
  };
  if (config) {
    cfg = utils.merge(cfg, config);
  }
  return client(cfg);
}&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The generated client module can be loaded using &lt;code&gt;requirejs&lt;/code&gt;:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;requirejs.config({
  paths: {
    axios: &amp;lsquo;/js/axios.min&amp;rsquo;,
    client: &amp;lsquo;/js/client&amp;rsquo;
  }
});
requirejs([&amp;lsquo;client&amp;rsquo;], function (client) {
  client().listBottle (&amp;ldquo;/cellar/accounts/440/bottles&amp;rdquo;, 317)
    .then(function (resp) {
      // All good, use resp
    })
    .catch(function (resp) {
      // Woops, request failed or returned 4xx or 5xx.
    });
});&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The code above assumes that the generated files &lt;code&gt;client.js&lt;/code&gt; and &lt;code&gt;axios.min.js&lt;/code&gt; are both
                                served from &lt;code&gt;/js&lt;/code&gt;. The &lt;code&gt;resp&lt;/code&gt; value returned to the promise is an object with the following
                                fields:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code language=&#34;javascript&#34;&gt;{
  // &lt;code&gt;data&lt;/code&gt; is the response that was provided by the server
  data: {},&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;status&lt;/code&gt; is the HTTP status code from the server response
  status: 200,&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;statusText&lt;/code&gt; is the HTTP status message from the server response
  statusText: &amp;lsquo;OK&amp;rsquo;,&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;headers&lt;/code&gt; the headers that the server responded with
  headers: {},&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;config&lt;/code&gt; is the config that was provided to &lt;code&gt;axios&lt;/code&gt; for the request
  config: {}
}&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The generator also produces an example HTML and controller that can be mounted on a
                                goa service to quickly test the JavaScript. Simply import the &lt;code&gt;js&lt;/code&gt; Go
                                package in your service main and mount the controller. The example HTML is served
                                under &lt;code&gt;/js&lt;/code&gt; so that loading this path in a browser will trigger the generated
                                JavaScript.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen swagger&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;swagger&lt;/code&gt; command generates a &lt;a href=&#34;http://swagger.io&#34;&gt;Swagger&lt;/a&gt; specification of the API.
                                The command does not accept additional flags. It generates both the Swagger JSON as well as a controller that
                                can be mounted on the goa service to serve it under &lt;code&gt;/swagger.json&lt;/code&gt;.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen schema&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;schema&lt;/code&gt; command generates a &lt;a href=&#34;https://blog.heroku.com/archives/2014/1/8/json_schema_for_heroku_platform_api&#34;&gt;Heroku-like&lt;/a&gt;
                                JSON hyper-schema representation of the API. It generates both the JSON as well as a controller that
                                can be mounted on the goa service to serve it under &lt;code&gt;/schema.json&lt;/code&gt;. The command accepts an additional flag:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;url|-u=URL&lt;/code&gt; specifies the base URL used to build the JSON schema ID.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen gen&lt;/code&gt;: goagen Plugins&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;gen&lt;/code&gt; command makes it possible to invoke &lt;code&gt;goagen&lt;/code&gt; plugins.
                                This command accepts two flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg-path=PKG-PATH&lt;/code&gt; specifies the Go package path to the plugin package.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg-name=PKG-NAME&lt;/code&gt; specifies the Go package name of the plugin package. It defaults to the
                                        name of the inner most directory in the Go package path.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                A plugin consists of a Go package which exposes a &lt;code&gt;Generate&lt;/code&gt; function with the following
                                signature:
                        &lt;p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func Generate(api *design.APIDefinition) ([]string, error)
&lt;/pre&gt;&lt;/code&gt;
                        &lt;p&gt;
                                 where api is the API definition computed from the design package. On success &lt;code&gt;Generate&lt;/code&gt; should return
                                 the path to the generated files. On error the error message gets displayed to the user (and
                                 goagen exist with status 1).
                        &lt;/p&gt;
                        &lt;p&gt;
                                 The &lt;code&gt;Generate&lt;/code&gt; method should take advantage of the &lt;code&gt;APIDefinition&lt;/code&gt; &lt;code&gt;IterateXXX&lt;/code&gt; methods to iterate
                                 through the API resources, media types and types to guarantee that the order doesn&amp;rsquo;t change
                                 between two invokation of the function (thereby generating different output even if the design
                                 hasn&amp;rsquo;t changed).
                        &lt;/p&gt;
                        &lt;p&gt;
                                 They may also take advantage of Metadata. The goa design language allows defining Metadata on a
                                 number of definitions: API, Resource, Action, Response and Attribute (which means Type and
                                 MediaType as well since these definitions are attributes). A metadata field consists of a
                                 key/value pair where both are simple strings. The generator can use these key/value pairs to
                                 produce different results, see example below. Metadata has no effect on the buit-in generators.
                                 The Output directory is available through the codegen.OutputDir global variable.
                        &lt;/p&gt;
                        &lt;p&gt;
                                 Package genresnames is an example of a goagen plugin. It creates a file &amp;ldquo;names.txt&amp;rdquo; containing
                                 the names of the API resources sorted in alphabetical order. If a resource has a
                                 metadata pair with the key &amp;ldquo;genresnames/name&amp;rdquo; then the plugin uses the metadata value instead.
                        &lt;/p&gt;
                        &lt;p&gt;
                                 Invoke the plugin with:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code&gt;
                                 goagen gen -d &lt;Go package path to design package&gt; &amp;ndash;pkg-path=&lt;Go package path to genresnames&gt;
                        &lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                 Source code:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;
package genresnames&lt;/p&gt;

&lt;p&gt;import (
        &amp;ldquo;io/ioutil&amp;rdquo;
        &amp;ldquo;os&amp;rdquo;
        &amp;ldquo;path/filepath&amp;rdquo;
        &amp;ldquo;strings&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;gopkg.in/alecthomas/kingpin.v2&amp;quot;

    &amp;quot;github.com/goadesign/goa/design&amp;quot;
    &amp;quot;github.com/goadesign/goa/goagen/codegen&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;)&lt;/p&gt;

&lt;p&gt;// Generate is the function called by goagen to generate the names file.
func Generate(api *design.APIDefinition) ([]string, error) {
        // Make sure to parse the common flags so that codegen.OutputDir gets properly
        // initialized.
        app := kingpin.New(&amp;ldquo;Resource names&amp;rdquo;, &amp;ldquo;Resource name generator&amp;rdquo;)
        codegen.RegisterFlags(app)
        if _, err := app.Parse(os.Args[1:]); err != nil {
                panic(err)
        }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // Now iterate through the resources to gather their names
    names := make([]string, len(api.Resources))
    i := 0
    api.IterateResources(func(res *design.ResourceDefinition) error {
            if n, ok := res.Metadata[&amp;quot;genresnames/name&amp;quot;]; ok {
                    names[i] = n
            } else {
                    names[i] = res.Name
            }
            i++
            return nil
    })
    content := strings.Join(names, &amp;quot;\n&amp;quot;)

    // Write the output file and return its name
    outputFile := filepath.Join(codegen.OutputDir, &amp;quot;names.txt&amp;quot;)
    ioutil.WriteFile(outputFile, []byte(content), 0755)
    return []string{outputFile}, nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>runtime</title>
      <link>http://goa.design/components/runtime/</link>
      <pubDate>Sat, 30 Jan 2016 11:01:06 -0500</pubDate>
      
      <guid>http://goa.design/components/runtime/</guid>
      <description>&lt;p&gt;
                                The goa runtime is implemented by the goa package. It includes the
                                implementation of the goa action context which provides the means
                                to access the request state and write the response. The package
                                also contains a number of data structures and algorithms
                                that provide supporting functionality to the service. These include
                                logging, error handling, versioning support etc.
                                goa follows the &#34;battery included&#34; model for the supporting
                                functionality letting you customize all aspects if the provided
                                default is not sufficient.
                        &lt;/p&gt;
                        &lt;h3&gt;The goa Action Context&lt;/h3&gt;
                        &lt;p&gt;
                                The action context is a data structure that is provided to all goa
                                controller action implementations as first parameter. It leverages the
                                &lt;a href=&#34;https://blog.golang.org/context&#34;&gt;work done&lt;/a&gt; at Google
                                around passing contexts across interface boundaries and adds to it
                                by providing additional methods tailored to the goa use case.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The context exposes methods to access the request state and write
                                the response in a generic way like many other Go web frameworks. For
                                example path parameters or querystring values can be accessed using
                                the method &lt;code&gt;Get&lt;/code&gt; which returns a string. However goa goes
                                one step further and leverages the code generation provided by `goagen`
                                to define &lt;i&gt;action specific&lt;/i&gt; fields that provide access to the
                                same state using &#34;typed&#34; methods. So for example if a path parameter
                                called &lt;code&gt;ID&lt;/code&gt; is defined in the design as being of type
                                &lt;code&gt;Integer&lt;/code&gt; the corresponding controller action method
                                accepts a context data structure which exposes a field named &lt;code&gt;ID&lt;/code&gt;
                                of type &lt;code&gt;int&lt;/code&gt;. The same goes for the request payload so that
                                accessing the &lt;code&gt;Payload&lt;/code&gt; field of an action context returns
                                a data structure that is specific to that action as described in the
                                design. This alleviates the need for reflection or otherwise &#34;binding&#34;
                                the context to a struct.&lt;br/&gt;
                                &lt;br/&gt;
                                The same goes for writing responses: while the underlying http
                                ResponseWriter is available to write the response, the action context
                                also provides action specific methods for writing the responses
                                described in the design. These generated methods take care of writing
                                the correct status code and content-type header for example. They
                                also make it possible to specificy the response payload using custom
                                data structures generated from the media type described in the design.
                        &lt;/p&gt;
                        &lt;p&gt;
                                As mentioned earlier each controller action context wraps a golang
                                package context. This means that deadlines and cancelation signals
                                are available to all action implemetations. The built-in
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#Timeout&#34;&gt;Timeout&lt;/a&gt; middleware
                                takes advantage of this ability to let services or controllers
                                define a timeout value for all requests.
                        &lt;/p&gt;
                        &lt;h3&gt;Supporting Functionality&lt;/h3&gt;
                        &lt;h4&gt;Service Mux&lt;/h4&gt;
                        &lt;p&gt;
                                The goa HTTP request mux is in charge of dispatching incoming requests
                                to the correct controller action. It implements the &lt;code&gt;ServeMux&lt;/code&gt;
                                interface which on top of the usual binding of HTTP method and path
                                to handler also provides support for API versioning.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The &lt;code&gt;ServeMux&lt;/code&gt; interface &lt;code&gt;Handle&lt;/code&gt; method associates
                                a request HTTP method and path to a HandleFunc which is a function
                                that accepts a http ResponseWriter and Request as well as a instance
                                of url Values that contain all the path and querystring parameters.&lt;br/&gt;
                                &lt;br/&gt;
                                The interface also exposes a &lt;code&gt;Version&lt;/code&gt; method that gives
                                access to version specific muxes. This makes it possible to define
                                different controller actions for the same request HTTP method and
                                path but different API versions. The actual algorithm used to
                                compute the targeted API version is provided via an instance of
                                &lt;code&gt;SelectVersionFunc&lt;/code&gt;. goa comes with several implementations
                                of SelectVersionFunc:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;PathSelectVersionFunc&lt;/code&gt; function creates a
                                        &lt;code&gt;SelectVersionFunc&lt;/code&gt; that extracts the version from the request
                                        path.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;HeaderSelectVersionFunc&lt;/code&gt; function creates a
                                        &lt;code&gt;SelectVersionFunc&lt;/code&gt; that extracts the version from the given
                                        HTTP request header.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;QuerySelectVersionFunc&lt;/code&gt; function creates a
                                        &lt;code&gt;SelectVersionFunc&lt;/code&gt; that extracts the version from
                                        the given querystring value.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                The function &lt;code&gt;CombineSelectVersionFunc&lt;/code&gt; makes it possible to
                                combine any number of &lt;code&gt;SelectionVersionFunc&lt;/code&gt; to produce
                                arbitrarily complex lookup algorithms.
                        &lt;/p&gt;
                        &lt;h4&gt;Middleware&lt;/h4&gt;
                        &lt;p&gt;
                                goa defines its own type of middleware but also supports &#34;raw&#34; http
                                middleware. The &lt;a href=&#34;https://github.com/goadesign/goa-middleware&#34;&gt;goa-middleware&lt;/a&gt;
                                repo contains a number of goa middlewares.
                        &lt;/p&gt;
                        &lt;h4&gt;Logging&lt;/h4&gt;
                        &lt;p&gt;
                                goa uses structured logging so that logs created at each level contain
                                all the contextual information. The root logger is the service-level
                                &lt;code&gt;Logger&lt;/code&gt; field. Loggers are derived from it for each
                                controller and for each action. Finally a logger is also created for
                                each request so that log entries created inside a request contain
                                the full context: service name, controller name, action name and
                                unique request ID.
                        &lt;p&gt;
                        &lt;h4&gt;Error Handling&lt;/h4&gt;
                        &lt;p&gt;
                                All goa actions return an error. Error handlers can be defined at the 
                                controller or service level. If an action returns a non-nil error
                                then the controller error handler is invoked. If the controller does
                                not define a error handler then the service-wide error handler is
                                invoked instead. The default goa error handler simply returns a 500
                                response containing the error details in the body.
                        &lt;p&gt;
                        &lt;h4&gt;Graceful Shutdown&lt;/h4&gt;
                        &lt;p&gt;
                                A goa service can be instantiated via `NewGraceful` in which case the
                                http server is implemented by the &lt;a href=&#34;https://godoc.org/github.com/tylerb/graceful&#34;&gt;graceful package&lt;/a&gt;
                                which provides graceful shutdown behavior where upon receving a
                                shutdown signal the service waits until all pending requests are
                                completed before terminating.
                        &lt;/p&gt;
                        &lt;h3&gt;Swapping the Batteries&lt;/h3&gt;
                        &lt;h4&gt;Error Handling&lt;/h4&gt;
                        &lt;p&gt;
                                The service interface exposes a &lt;code&gt;SetHandler&lt;/code&gt; method which
                                allows overriding the default service error handler. goa comes with
                                two built-in error handlers:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;DefaultErrorHandler&lt;/code&gt; returns a 400 if the error
                                        is an instance of &lt;code&gt;BadRequestError&lt;/code&gt;, 500 otherwise.
                                        It also always writes the error message to the response body.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;TerseErrorHandler&lt;/code&gt; behaves identically to the
                                        default error handler with the exception that it does not write
                                        the error message to the response body for internal errors
                                        (i.e. errors that are not instances of &lt;code&gt;BadRequestError&lt;/code&gt;).
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                Custom error handlers can be easily swapped in, they consist of a
                                function that accepts an instance of an action context and of an 
                                error.
                        &lt;/p&gt;
                        &lt;h4&gt;Request Mux and Versioning&lt;/h4&gt;
                        &lt;p&gt;
                                As mentioned above the goa mux supports defining version specific
                                muxes. Different versions can be defined in the design using the 
                                &lt;code&gt;Version&lt;/code&gt; DSL:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package design

import (
        . &#34;github.com/goadesign/goa/design&#34;
        . &#34;github.com/goadesign/goa/design/apidsl&#34;
)

var _ = API(&#34;cellar&#34;, func() {
        Description(&#34;A basic example of an API implemented with goa&#34;)
        Scheme(&#34;http&#34;)
        Host(&#34;localhost:8080&#34;)
})

var _ = Version(&#34;1.0&#34;, func() {
        Title(&#34;The virtual winecellar v1.0 API&#34;)
        // ... other API level properties
})

var _ = Version(&#34;2.0&#34;, func() {
        Title(&#34;The virtual winecellar v2.0 API&#34;)
        // ... other API level properties
})

var _ = Resource(&#34;bottle&#34;, func() {
        BasePath(&#34;/bottles&#34;)
        Version(&#34;1.0&#34;)
        Version(&#34;2.0&#34;)
        // ... other resource properties
})

var _ = Resource(&#34;bottle&#34;, func() {
        BasePath(&#34;/bottles&#34;)
        Version(&#34;3.0&#34;)
        // ... other resource properties
})
&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                When &lt;code&gt;goagen&lt;/code&gt; sees that the design defines versions it
                                produces code that leverages the ServeMux interface Version method
                                to mount controllers onto the appropriate version mux:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func MountBottleV1Controller(service goa.Service, ctrl v1.BottleController) {
                                // ...
                        &lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                Each version defined in the design produces a different package containing
                                the corresponding generated controllers.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The generated code relies on the &lt;code&gt;ServeMux&lt;/code&gt; method exposed
                                by the service to retrieve the top-level mux. The goa default mux
                                implementation relies on the &lt;a href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;httprouter&lt;/a&gt;
                                package to implement the low level dispatch. Other low level routers
                                can easily be subsituted by providing an implementation of the
                                ServeMux interface.
                        &lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>