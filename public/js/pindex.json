[{"title":"about","href":"/about","content":"hello about"},{"title":"Hello Goa!","tags":["generation","go"],"href":"/blog/hello-goa","content":"hello Goa welcome blog post"},{"title":"Goa DSL Engine","tags":["dsl"],"href":"/components/engine","content":" goagen is a tool that generates various artifacts from a goa design package Install it with go get githubcomgoadesigngoagoagen goagen relies on goimports go get golangorgxtoolscmdgoimports Each type of artifact is associated with a goagen command that exposes it own set of flags Internally these commands map to generators that contain the logic for generating the artifacts It works something like this goagen parses the command line to determine the type of output desired and invokes the appropriate generator The generator writes the code of the tool that will produce the final output to a temporary Go workspace The tool composed of the design language package and the output producing code is compiled in the temporary workspace goagen then runs the tool which evaluates the design functions and traverses the resulting inmemory data structures to write the output Each generator registers a command with the goagen tool goagen help lists all the available commands These are app generates the service boilerplate code including controllers contexts media types and user types main generates a skeleton file for each resource controller as well as a default main client generates an API client Go package and tool swagger generates the API Swagger specification js generates a JavaScript API client schema generates the API Hyperschema JSON gen invokes a third party generator bootstrap invokes the app main client and swagger generators The command goagen helplong lists all the supported commands and their flags Common flags The following flags apply to all the goagen commands designdDESIGN defines the Go package path to the service design package outoOUT specifies where to generate the files defaults to the current directory debug enables goagen debug This causes goagen to print the content of the temporary files and to leave them around helphelplonghelpman prints contextual help goagen app The app command is arguably the most critical It generates all the supporting code for the goa service This command supports an additional flag pkgapp specifies the name of the generated Go package defaults to app Thats also the name of the subdirectory that gets created to store the generated Go files This command always deletes and recreates any preexisting directory with the same name The idea being that these files should never be edited goagen main The main command helps bootstrap a new goa service by generating a default maingo as well as a default empty implementation for each resource controller defined in the design package By default this command only generates the files if they dont exist yet in the output directory This command accepts two additional flags force causes the files to be generated even if files with the same name already exist in which case they get overwritten nameAPI specifies the name of the service to be used in the generated call to goaNew goagen client The client command generates both an API client package and tool The client package implements a Client object that exposes one method for each resource action The generated code of the CLI tool leverages the package to make the API requests to the service The Client object can be configured to use request signers that get invoked prior to sending the request The signers modify the request to include auth headers for example goa comes with signers that implement basic auth JWT auth and a subset of OAuth2 Custom signers my be used as well they must implement the Signer interface This command accepts three additional flags version specifies the CLI tool version signer specifies a signer object supported by the API Signer objects generally perform auth signerPkg specifies the path to the package implementing the signer objects if not goa goagen js The js command generates a JavaScript API client suitable for both clientside and serverside applications The generated code defines an anonymous AMD module and relies on the axios promisedbased JavaScript library for making the actual HTTP requests The generated module wraps the axios client and adds API specific functions for example List all bottles in account optionally filtering by year path is the request path the format is cellaraccountsaccountIDbottles years is used to build the request query string config is an optional object to be merged into the config built by the function prior to making the request The content of the config object is described here httpsgithubcommzabriskieaxiosrequestapi This function returns a promise which raises an error if the HTTP response is a 4xx or 5xx clientlistBottle function path years config cfg timeout timeout url urlPrefix path method get params years years responseType json if config cfg utilsmergecfg config return clientcfg The generated client module can be loaded using requirejs requirejsconfig paths axios jsaxiosmin client jsclient requirejsclient function client clientlistBottle cellaraccounts440bottles 317 thenfunction resp All good use resp catchfunction resp Woops request failed or returned 4xx or 5xx The code above assumes that the generated files clientjs and axiosminjs are both served from js The resp value returned to the promise is an object with the following fields data is the response that was provided by the server data status is the HTTP status code from the server response status 200 statusText is the HTTP status message from the server response statusText OK headers the headers that the server responded with headers config is the config that was provided to axios for the request config The generator also produces an example HTML and controller that can be mounted on a goa service to quickly test the JavaScript Simply import the js Go package in your service main and mount the controller The example HTML is served under js so that loading this path in a browser will trigger the generated JavaScript goagen swagger The swagger command generates a Swagger specification of the API The command does not accept additional flags It generates both the Swagger JSON as well as a controller that can be mounted on the goa service to serve it under swaggerjson goagen schema The schema command generates a Herokulike JSON hyperschema representation of the API It generates both the JSON as well as a controller that can be mounted on the goa service to serve it under schemajson The command accepts an additional flag urluURL specifies the base URL used to build the JSON schema ID goagen gen goagen Plugins The gen command makes it possible to invoke goagen plugins This command accepts two flags pkgpathPKGPATH specifies the Go package path to the plugin package pkgnamePKGNAME specifies the Go package name of the plugin package It defaults to the name of the inner most directory in the Go package path A plugin consists of a Go package which exposes a Generate function with the following signature func Generateapi designAPIDefinition string error where api is the API definition computed from the design package On success Generate should return the path to the generated files On error the error message gets displayed to the user and goagen exist with status 1 The Generate method should take advantage of the APIDefinition IterateXXX methods to iterate through the API resources media types and types to guarantee that the order doesnt change between two invokation of the function thereby generating different output even if the design hasnt changed They may also take advantage of Metadata The goa design language allows defining Metadata on a number of definitions API Resource Action Response and Attribute which means Type and MediaType as well since these definitions are attributes A metadata field consists of a keyvalue pair where both are simple strings The generator can use these keyvalue pairs to produce different results see example below Metadata has no effect on the buitin generators The Output directory is available through the codegenOutputDir global variable Package genresnames is an example of a goagen plugin It creates a file namestxt containing the names of the API resources sorted in alphabetical order If a resource has a metadata pair with the key genresnamesname then the plugin uses the metadata value instead Invoke the plugin with goagen gen d pkgpath Source code package genresnames import ioioutil os pathfilepath strings gopkginalecthomaskingpinv2 githubcomgoadesigngoadesign githubcomgoadesigngoagoagencodegen Generate is the function called by goagen to generate the names file func Generateapi designAPIDefinition string error Make sure to parse the common flags so that codegenOutputDir gets properly initialized app kingpinNewResource names Resource name generator codegenRegisterFlagsapp if err appParseosArgs1 err nil panicerr Now iterate through the resources to gather their names names makestring lenapiResources i 0 apiIterateResourcesfuncres designResourceDefinition error if n ok resMetadatagenresnamesname ok namesi n else namesi resName i return nil content stringsJoinnames n Write the output file and return its name outputFile filepathJoincodegenOutputDir namestxt ioutilWriteFileoutputFile bytecontent 0755 return stringoutputFile nil "},{"title":"goagen","tags":["dsl","goagen"],"href":"/components/goagen","content":" goagen is a tool that generates various artifacts from a goa design package Install it with go get githubcomgoadesigngoagoagen goagen relies on goimports go get golangorgxtoolscmdgoimports Each type of artifact is associated with a goagen command that exposes it own set of flags Internally these commands map to generators that contain the logic for generating the artifacts It works something like this goagen parses the command line to determine the type of output desired and invokes the appropriate generator The generator writes the code of the tool that will produce the final output to a temporary Go workspace The tool composed of the design language package and the output producing code is compiled in the temporary workspace goagen then runs the tool which evaluates the design functions and traverses the resulting inmemory data structures to write the output Each generator registers a command with the goagen tool goagen help lists all the available commands These are app generates the service boilerplate code including controllers contexts media types and user types main generates a skeleton file for each resource controller as well as a default main client generates an API client Go package and tool swagger generates the API Swagger specification js generates a JavaScript API client schema generates the API Hyperschema JSON gen invokes a third party generator bootstrap invokes the app main client and swagger generators The command goagen helplong lists all the supported commands and their flags Common flags The following flags apply to all the goagen commands designdDESIGN defines the Go package path to the service design package outoOUT specifies where to generate the files defaults to the current directory debug enables goagen debug This causes goagen to print the content of the temporary files and to leave them around helphelplonghelpman prints contextual help goagen app The app command is arguably the most critical It generates all the supporting code for the goa service This command supports an additional flag pkgapp specifies the name of the generated Go package defaults to app Thats also the name of the subdirectory that gets created to store the generated Go files This command always deletes and recreates any preexisting directory with the same name The idea being that these files should never be edited goagen main The main command helps bootstrap a new goa service by generating a default maingo as well as a default empty implementation for each resource controller defined in the design package By default this command only generates the files if they dont exist yet in the output directory This command accepts two additional flags force causes the files to be generated even if files with the same name already exist in which case they get overwritten nameAPI specifies the name of the service to be used in the generated call to goaNew goagen client The client command generates both an API client package and tool The client package implements a Client object that exposes one method for each resource action The generated code of the CLI tool leverages the package to make the API requests to the service The Client object can be configured to use request signers that get invoked prior to sending the request The signers modify the request to include auth headers for example goa comes with signers that implement basic auth JWT auth and a subset of OAuth2 Custom signers my be used as well they must implement the Signer interface This command accepts three additional flags version specifies the CLI tool version signer specifies a signer object supported by the API Signer objects generally perform auth signerPkg specifies the path to the package implementing the signer objects if not goa goagen js The js command generates a JavaScript API client suitable for both clientside and serverside applications The generated code defines an anonymous AMD module and relies on the axios promisedbased JavaScript library for making the actual HTTP requests The generated module wraps the axios client and adds API specific functions for example List all bottles in account optionally filtering by year path is the request path the format is cellaraccountsaccountIDbottles years is used to build the request query string config is an optional object to be merged into the config built by the function prior to making the request The content of the config object is described here httpsgithubcommzabriskieaxiosrequestapi This function returns a promise which raises an error if the HTTP response is a 4xx or 5xx clientlistBottle function path years config cfg timeout timeout url urlPrefix path method get params years years responseType json if config cfg utilsmergecfg config return clientcfg The generated client module can be loaded using requirejs requirejsconfig paths axios jsaxiosmin client jsclient requirejsclient function client clientlistBottle cellaraccounts440bottles 317 thenfunction resp All good use resp catchfunction resp Woops request failed or returned 4xx or 5xx The code above assumes that the generated files clientjs and axiosminjs are both served from js The resp value returned to the promise is an object with the following fields data is the response that was provided by the server data status is the HTTP status code from the server response status 200 statusText is the HTTP status message from the server response statusText OK headers the headers that the server responded with headers config is the config that was provided to axios for the request config The generator also produces an example HTML and controller that can be mounted on a goa service to quickly test the JavaScript Simply import the js Go package in your service main and mount the controller The example HTML is served under js so that loading this path in a browser will trigger the generated JavaScript goagen swagger The swagger command generates a Swagger specification of the API The command does not accept additional flags It generates both the Swagger JSON as well as a controller that can be mounted on the goa service to serve it under swaggerjson goagen schema The schema command generates a Herokulike JSON hyperschema representation of the API It generates both the JSON as well as a controller that can be mounted on the goa service to serve it under schemajson The command accepts an additional flag urluURL specifies the base URL used to build the JSON schema ID goagen gen goagen Plugins The gen command makes it possible to invoke goagen plugins This command accepts two flags pkgpathPKGPATH specifies the Go package path to the plugin package pkgnamePKGNAME specifies the Go package name of the plugin package It defaults to the name of the inner most directory in the Go package path A plugin consists of a Go package which exposes a Generate function with the following signature func Generateapi designAPIDefinition string error where api is the API definition computed from the design package On success Generate should return the path to the generated files On error the error message gets displayed to the user and goagen exist with status 1 The Generate method should take advantage of the APIDefinition IterateXXX methods to iterate through the API resources media types and types to guarantee that the order doesnt change between two invokation of the function thereby generating different output even if the design hasnt changed They may also take advantage of Metadata The goa design language allows defining Metadata on a number of definitions API Resource Action Response and Attribute which means Type and MediaType as well since these definitions are attributes A metadata field consists of a keyvalue pair where both are simple strings The generator can use these keyvalue pairs to produce different results see example below Metadata has no effect on the buitin generators The Output directory is available through the codegenOutputDir global variable Package genresnames is an example of a goagen plugin It creates a file namestxt containing the names of the API resources sorted in alphabetical order If a resource has a metadata pair with the key genresnamesname then the plugin uses the metadata value instead Invoke the plugin with goagen gen d pkgpath Source code package genresnames import ioioutil os pathfilepath strings gopkginalecthomaskingpinv2 githubcomgoadesigngoadesign githubcomgoadesigngoagoagencodegen Generate is the function called by goagen to generate the names file func Generateapi designAPIDefinition string error Make sure to parse the common flags so that codegenOutputDir gets properly initialized app kingpinNewResource names Resource name generator codegenRegisterFlagsapp if err appParseosArgs1 err nil panicerr Now iterate through the resources to gather their names names makestring lenapiResources i 0 apiIterateResourcesfuncres designResourceDefinition error if n ok resMetadatagenresnamesname ok namesi n else namesi resName i return nil content stringsJoinnames n Write the output file and return its name outputFile filepathJoincodegenOutputDir namestxt ioutilWriteFileoutputFile bytecontent 0755 return stringoutputFile nil "},{"title":"runtime","tags":["dsl"],"href":"/components/runtime","content":" The goa runtime is implemented by the goa package It includes the implementation of the goa action context which provides the means to access the request state and write the response The package also contains a number of data structures and algorithms that provide supporting functionality to the service These include logging error handling versioning support etc goa follows the battery included model for the supporting functionality letting you customize all aspects if the provided default is not sufficient The goa Action Context The action context is a data structure that is provided to all goa controller action implementations as first parameter It leverages the work done at Google around passing contexts across interface boundaries and adds to it by providing additional methods tailored to the goa use case The context exposes methods to access the request state and write the response in a generic way like many other Go web frameworks For example path parameters or querystring values can be accessed using the method Get which returns a string However goa goes one step further and leverages the code generation provided by goagen to define action specific fields that provide access to the same state using typed methods So for example if a path parameter called ID is defined in the design as being of type Integer the corresponding controller action method accepts a context data structure which exposes a field named ID of type int The same goes for the request payload so that accessing the Payload field of an action context returns a data structure that is specific to that action as described in the design This alleviates the need for reflection or otherwise binding the context to a struct The same goes for writing responses while the underlying http ResponseWriter is available to write the response the action context also provides action specific methods for writing the responses described in the design These generated methods take care of writing the correct status code and contenttype header for example They also make it possible to specificy the response payload using custom data structures generated from the media type described in the design As mentioned earlier each controller action context wraps a golang package context This means that deadlines and cancelation signals are available to all action implemetations The builtin Timeout middleware takes advantage of this ability to let services or controllers define a timeout value for all requests Supporting Functionality Service Mux The goa HTTP request mux is in charge of dispatching incoming requests to the correct controller action It implements the ServeMux interface which on top of the usual binding of HTTP method and path to handler also provides support for API versioning The ServeMux interface Handle method associates a request HTTP method and path to a HandleFunc which is a function that accepts a http ResponseWriter and Request as well as a instance of url Values that contain all the path and querystring parameters The interface also exposes a Version method that gives access to version specific muxes This makes it possible to define different controller actions for the same request HTTP method and path but different API versions The actual algorithm used to compute the targeted API version is provided via an instance of SelectVersionFunc goa comes with several implementations of SelectVersionFunc The PathSelectVersionFunc function creates a SelectVersionFunc that extracts the version from the request path The HeaderSelectVersionFunc function creates a SelectVersionFunc that extracts the version from the given HTTP request header The QuerySelectVersionFunc function creates a SelectVersionFunc that extracts the version from the given querystring value The function CombineSelectVersionFunc makes it possible to combine any number of SelectionVersionFunc to produce arbitrarily complex lookup algorithms Middleware goa defines its own type of middleware but also supports raw http middleware The goamiddleware repo contains a number of goa middlewares Logging goa uses structured logging so that logs created at each level contain all the contextual information The root logger is the servicelevel Logger field Loggers are derived from it for each controller and for each action Finally a logger is also created for each request so that log entries created inside a request contain the full context service name controller name action name and unique request ID Error Handling All goa actions return an error Error handlers can be defined at the controller or service level If an action returns a nonnil error then the controller error handler is invoked If the controller does not define a error handler then the servicewide error handler is invoked instead The default goa error handler simply returns a 500 response containing the error details in the body Graceful Shutdown A goa service can be instantiated via NewGraceful in which case the http server is implemented by the graceful package which provides graceful shutdown behavior where upon receving a shutdown signal the service waits until all pending requests are completed before terminating Swapping the Batteries Error Handling The service interface exposes a SetHandler method which allows overriding the default service error handler goa comes with two builtin error handlers The DefaultErrorHandler returns a 400 if the error is an instance of BadRequestError 500 otherwise It also always writes the error message to the response body The TerseErrorHandler behaves identically to the default error handler with the exception that it does not write the error message to the response body for internal errors ie errors that are not instances of BadRequestError Custom error handlers can be easily swapped in they consist of a function that accepts an instance of an action context and of an error Request Mux and Versioning As mentioned above the goa mux supports defining version specific muxes Different versions can be defined in the design using the Version DSL package design import githubcomgoadesigngoadesign githubcomgoadesigngoadesignapidsl var APIcellar func DescriptionA basic example of an API implemented with goa Schemehttp Hostlocalhost8080 var Version10 func TitleThe virtual winecellar v10 API other API level properties var Version20 func TitleThe virtual winecellar v20 API other API level properties var Resourcebottle func BasePathbottles Version10 Version20 other resource properties var Resourcebottle func BasePathbottles Version30 other resource properties When goagen sees that the design defines versions it produces code that leverages the ServeMux interface Version method to mount controllers onto the appropriate version mux func MountBottleV1Controllerservice goaService ctrl v1BottleController Each version defined in the design produces a different package containing the corresponding generated controllers The generated code relies on the ServeMux method exposed by the service to retrieve the toplevel mux The goa default mux implementation relies on the httprouter package to implement the low level dispatch Other low level routers can easily be subsituted by providing an implementation of the ServeMux interface "},{"title":"swagger","tags":["swagger","json"],"href":"/components/swagger","content":"Content of the file goes Here"},{"title":"encoding/binc","tags":["godoc","binc"],"href":"/godoc/encoding/binc","content":" binc import githubcomgoadesignencodingbinc func DecoderFactory go func DecoderFactory goaEncoderFactory DecoderFactory is the default factory used by the goa Consumes DSL func EncoderFactory go func EncoderFactory goaEncoderFactory EncoderFactory is the default factory used by the goa Produces DSL type Factory go type Factory struct Factory uses githubcomugorjigocodec to act as an DecoderFactory and EncoderFactory func Factory NewDecoder go func f Factory NewDecoderr ioReader goaDecoder NewDecoder returns a new jsonDecoder that satisfies goaDecoder The built in codecDecoder has a compatible Reset func func Factory NewEncoder go func f Factory NewEncoderw ioWriter goaEncoder NewEncoder returns a new jsonEncoder that satisfies goaEncoder The built in codecEncoder has a compatible Reset func Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"encoding/cbor","tags":["godoc","cbor"],"href":"/godoc/encoding/cbor","content":" cbor import githubcomgoadesignencodingcbor func DecoderFactory go func DecoderFactory goaEncoderFactory DecoderFactory is the default factory used by the goa Consumes DSL func EncoderFactory go func EncoderFactory goaEncoderFactory EncoderFactory is the default factory used by the goa Produces DSL type Factory go type Factory struct Factory uses githubcomugorjigocodec to act as an DecoderFactory and EncoderFactory func Factory NewDecoder go func f Factory NewDecoderr ioReader goaDecoder NewDecoder returns a new jsonDecoder that satisfies goaDecoder The built in codecDecoder has a compatible Reset func func Factory NewEncoder go func f Factory NewEncoderw ioWriter goaEncoder NewEncoder returns a new jsonEncoder that satisfies goaEncoder The built in codecEncoder has a compatible Reset func Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"encoding/gogoprotobuf","tags":["godoc","gogoprotobuf"],"href":"/godoc/encoding/gogoprotobuf","content":" gogoprotobuf import githubcomgoadesignencodinggogoprotobuf func DecoderFactory go func DecoderFactory goaEncoderFactory DecoderFactory is the default factory used by the goa Consumes DSL func EncoderFactory go func EncoderFactory goaEncoderFactory EncoderFactory is the default factory used by the goa Produces DSL type Factory go type Factory struct Factory uses githubcomugorjigocodec to act as an DecoderFactory and EncoderFactory func Factory NewDecoder go func f Factory NewDecoderr ioReader goaDecoder NewDecoder returns a new protoDecoder that satisfies goaDecoder func Factory NewEncoder go func f Factory NewEncoderw ioWriter goaEncoder NewEncoder returns a new protoEncoder that satisfies goaEncoder type ProtoDecoder go type ProtoDecoder struct contains filtered or unexported fields ProtoDecoder stores state between Reset and Decode func ProtoDecoder Decode go func dec ProtoDecoder Decodev interface error Decode unmarshals an ioReader into protoMessage v func ProtoDecoder Reset go func dec ProtoDecoder Resetr ioReader Reset stores the new reader and resets its bytesBuffer and protoBuffer type ProtoEncoder go type ProtoEncoder struct contains filtered or unexported fields ProtoEncoder stores state between Reset and Encode func ProtoEncoder Encode go func enc ProtoEncoder Encodev interface error Encode marshals a protoMessage and writes it to an ioWriter func ProtoEncoder Reset go func enc ProtoEncoder Resetw ioWriter Reset stores the new writer and resets its protoBuffer Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"encoding/json","tags":["godoc","json"],"href":"/godoc/encoding/json","content":" json import githubcomgoadesignencodingjson func DecoderFactory go func DecoderFactory goaEncoderFactory DecoderFactory is the default factory used by the goa Consumes DSL func EncoderFactory go func EncoderFactory goaEncoderFactory EncoderFactory is the default factory used by the goa Produces DSL type Factory go type Factory struct Factory uses githubcomugorjigocodec to act as an DecoderFactory and EncoderFactory func Factory NewDecoder go func f Factory NewDecoderr ioReader goaDecoder NewDecoder returns a new jsonDecoder that satisfies goaDecoder The built in codecDecoder has a compatible Reset func func Factory NewEncoder go func f Factory NewEncoderw ioWriter goaEncoder NewEncoder returns a new jsonEncoder that satisfies goaEncoder The built in codecEncoder has a compatible Reset func Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"encoding/msgpack","tags":["godoc","msgpack"],"href":"/godoc/encoding/msgpack","content":" msgpack import githubcomgoadesignencodingmsgpack func DecoderFactory go func DecoderFactory goaEncoderFactory DecoderFactory is the default factory used by the goa Consumes DSL func EncoderFactory go func EncoderFactory goaEncoderFactory EncoderFactory is the default factory used by the goa Produces DSL type Factory go type Factory struct Factory uses githubcomugorjigocodec to act as an DecoderFactory and EncoderFactory func Factory NewDecoder go func f Factory NewDecoderr ioReader goaDecoder NewDecoder returns a new jsonDecoder that satisfies goaDecoder The built in codecDecoder has a compatible Reset func func Factory NewEncoder go func f Factory NewEncoderw ioWriter goaEncoder NewEncoder returns a new jsonEncoder that satisfies goaEncoder The built in codecEncoder has a compatible Reset func Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/design/apidsl/test","tags":["godoc","test"],"href":"/godoc/goa/design/apidsl/test","content":" test import githubcomgoadesigngoadesignapidsltest Package test contains a selfcontained DSL test This test must be in its own package to emulate the proper order of global variables and package initialization This file is needed for go get and thus the build to succeed Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/design/apidsl","tags":["godoc","apidsl"],"href":"/godoc/goa/design/apidsl","content":" apidsl import githubcomgoadesigngoadesignapidsl Package apidsl implements the goa design language The goa design language provides a simple way to describe an API design The language consists of global Go functions that can be nested to build up definitions The root definition is the API definition This definition is what the language builds as it executes There are 3 other top level definitions the resource media type and type definitions all created using the corresponding global functions Resource MediaType and Type Resource definitions describe the API resources This includes the default media type used to represent the resource as well as all the actions that can be run on it Media type definitions describe the media types used throughout the API A media type describes the body of HTTP responses by listing their attributes think object fields in a recursive manner This description can also include JSON schemalike validation rules that goa uses to produce validation code A Media type definition also describes one or more views and for each view which fields to render Finally a media type definition may also define links to other resources The media type used to render the link on a resource defines a special link view used by default by goa to render the links child attributes The last top level definition is the type definition Type definitions describe data structures in a similar way that media type definitions describe response body attributes In fact media type definitions are a special kind of type definitions that add views and links Type definitions can be used to describe the request payloads as a whole or any attribute appearing anywhere payloads media types headers params etc and as with media type definitions they can include validation rules that goa leverages to validate attributes of that type Package apidsl also provides a generic DSL engine that other DSLs can plug into Adding a DSL implementation consists of registering the root DSL object in the design package Roots variable The runner iterates through all root DSL definitions and executes the definition sets they expose In general there should be one root definition per DSL the builtin API DSL uses the APIDefinition as root definition The root definition can in turn list sets of definitions where a set defines a unit of execution and allows to control the ordering of execution Each definition set consists of a list of definitions Definitions must implement the designDefinition interface and may additionally implement the designSource and designValidate interfaces Constants go const Continue Continue SwitchingProtocols SwitchingProtocols OK OK Created Created Accepted Accepted NonAuthoritativeInfo NonAuthoritativeInfo NoContent NoContent ResetContent ResetContent PartialContent PartialContent MultipleChoices MultipleChoices MovedPermanently MovedPermanently Found Found SeeOther SeeOther NotModified NotModified UseProxy UseProxy TemporaryRedirect TemporaryRedirect BadRequest BadRequest Unauthorized Unauthorized PaymentRequired PaymentRequired Forbidden Forbidden NotFound NotFound MethodNotAllowed MethodNotAllowed NotAcceptable NotAcceptable ProxyAuthRequired ProxyAuthRequired RequestTimeout RequestTimeout Conflict Conflict Gone Gone LengthRequired LengthRequired PreconditionFailed PreconditionFailed RequestEntityTooLarge RequestEntityTooLarge RequestURITooLong RequestURITooLong UnsupportedMediaType UnsupportedMediaType RequestedRangeNotSatisfiable RequestedRangeNotSatisfiable ExpectationFailed ExpectationFailed Teapot Teapot UnprocessableEntity UnprocessableEntity InternalServerError InternalServerError NotImplemented NotImplemented BadGateway BadGateway ServiceUnavailable ServiceUnavailable GatewayTimeout GatewayTimeout HTTPVersionNotSupported HTTPVersionNotSupported List of all builtin response names Variables go var SupportedValidationFormats string cidr datetime email hostname ipv4 ipv6 mac regexp uri SupportedValidationFormats lists the supported formats for use with the Format DSL func API go func APIname string dsl func designAPIDefinition API implements the top level API DSL It defines the API name default description and other default global property values for all API versions Here is an example showing all the possible API subdefinitions APIAPI name func Titletitle API title used in documentation Descriptiondescription API description used in documentation TermsOfServiceterms Contactfunc API Contact information Namecontact name Emailcontact email URLcontact URL Licensefunc API Licensing information Namelicense name URLlicense URL Docsfunc Descriptiondoc description URLdoc URL Hostgoadesign API hostname Schemehttp BasePathbaseparam Common base path to all API actions BaseParamsfunc Common parameters to all API actions Paramparam Consumesapplicationxml textxml func Packagegithubcomraphaelgoamiddlewareencodingxml Consumesapplicationjson Producesapplicationvndgolanggob func Packagegithubcomraphaelgoamiddlewareencodinggob Producesapplicationjson ResponseTemplatestatic func Response template for use by actions Descriptiondescription Status404 MediaTypeapplicationjson ResponseTemplatedynamic funcarg1 arg2 string Descriptionarg1 Status200 MediaTypearg2 TraitAuthenticated func Traits define DSL that can be run anywhere Headersfunc Headerheader Requiredheader func APIVersion go func APIVersionversions string APIVersion define the API versions that expose this resource func Action go func Actionname string dsl func Action implements the action definition DSL Action definitions describe specific API endpoints including the URL HTTP method and request parameters via path wildcards or query strings and payload data structure describing the request HTTP body An action belongs to a resource and inherits default values from the resource definition including the URL path prefix default response media type and default payload attribute properties inherited from the attribute with identical name in the resource default media type Action definitions also describe all the possible responses including the HTTP status headers and body Here is an example showing all the possible subdefinitions ActionUpdate func DescriptionUpdate account Docsfunc DescriptionUpdate docs URLhttpcellarapicomdocsactionsupdate Schemehttp Routing PUTid Full action path is built by appending id to parent resource base path PUTorgsorgaccountsid The prefix indicates an absolute path Paramsfunc Params describe the action parameters Paramorg String Parameters may correspond to path wildcards Paramid Integer Paramsort func or URL query string values Enumasc desc Headersfunc Headers describe relevant action headers HeaderAuthorization String HeaderXAccount Integer RequiredAuthorization XAccount PayloadUpdatePayload Payload describes the HTTP request body here using a type ResponseNoContent Each possible HTTP response is described via Response ResponseNotFound func ArrayOf go func ArrayOft designDataType designArray ArrayOf creates an array type from its element type The result can be used anywhere a type can Examples var Bottle Typebottle func Attributename var Bottles ArrayOfBottle Actionupdate func Paramsfunc Paramids ArrayOfInteger PayloadArrayOfBottle Equivalent to PayloadBottles If you are looking to return a collection of elements in a Response clause refer to CollectionOf ArrayOf creates a type where CollectionOf creates a media type func Attribute go func Attributename string args interface Attribute implements the attribute definition DSL An attribute describes a data structure recursively Attributes are used for describing request headers parameters and payloads response bodies and headers media types and types An attribute definition is recursive attributes may include other attributes At the basic level an attribute has a name a type and optionally a default value and validation rules The type of an attribute can be one of The primitive types Boolean Integer Number or String A type defined via the Type function A media type defined via the MediaType function An object described recursively with child attributes An array defined using the ArrayOf function An hashmap defined using the HashOf function Attributes can be defined using the Attribute Param Member or Header functions depending on where the definition appears The syntax for all these DSL is the same Here are some examples Attributename Defines an attribute of type String Attributename func Patternfoo Adds a validation rule to the attribute Attributename Integer Defines an attribute of type Integer Attributename Integer func Default42 With a default value Attributename Integer description Specifies a description Attributename Integer description func Enum1 2 And validation rules Nested attributes Attributenested func Descriptiondescription Attributechild Attributechild2 func Requiredchild Here are all the valid usage of the Attribute function Attributename string dataType DataType description string dsl func Attributename string dataType DataType description string Attributename string dataType DataType dsl func Attributename string dataType DataType Attributename string dsl func dataType is String or Object if DSL defines child attributes Attributename string dataType is String func Attributes go func Attributesdsl func Attributes implements the media type attributes dsl See MediaType func BaseParams go func BaseParamsdsl func BaseParams defines the API base path parameters These parameters may correspond to wildcards in the BasePath or URL query string values The DSL for describing each Param is the Attribute DSL func BasePath go func BasePathval string BasePath defines the API base path ie the common path prefix to all the API actions The path may define wildcards see Routing for a description of the wildcard syntax The corresponding parameters must be described using BaseParams func CONNECT go func CONNECTpath string designRouteDefinition CONNECT creates a route using the GET HTTP method func CanonicalActionName go func CanonicalActionNamea string CanonicalActionName sets the name of the action used to compute the resource collection and resource collection items hrefs See Resource func CollectionOf go func CollectionOfv interface dsl func designMediaTypeDefinition CollectionOf creates a collection media type from its element media type A collection media type represents the content of responses that return a collection of resources such as list actions This function can be called from any place where a media type can be used The resulting media type identifier is built from the element media type by appending the media type parameter type with value collection func Consumes go func Consumesargs interface Consumes adds a MIME type to the list of MIME types the APIs supports when accepting requests Consumes may also specify the path of the decoding package The package must expose a DecoderFactory method that returns an object which implements goaDecoderFactory func Contact go func Contactdsl func Contact sets the API contact information func DELETE go func DELETEpath string designRouteDefinition DELETE creates a route using the DELETE HTTP method func Default go func Defaultdef interface Default sets the default value for an attribute func DefaultMedia go func DefaultMediaval interface DefaultMedia sets a resource default media type by identifier or by reference using a value returned by MediaType var Resourcebottle func DefaultMediaBottleMedia var Resourceregion func DefaultMediavndgoaregion The default media type is used to build OK response definitions when no specific media type is given in the Response function call The default media type is also used to set the default properties of attributes listed in action payloads So if a media type defines an attribute name with associated validations then simply calling Attributename inside a request Payload defines the payload attribute with the same type and validations func Description go func Descriptiond string Description sets the definition description Description can be called inside API Resource Action or MediaType func Docs go func Docsdsl func Docs provides external documentation pointers func Email go func Emailemail string Email sets the contact email func Enum go func Enumval interface Enum adds a enum validation to the attribute See httpjsonschemaorglatestjsonschemavalidationhtmlanchor76 func Format go func Formatf string Format adds a format validation to the attribute See httpjsonschemaorglatestjsonschemavalidationhtmlanchor104 The formats supported by goa are datetime RFC3339 date time email RFC5322 email address hostname RFC1035 internet host name ipv4 and ipv6 RFC2373 IPv4 and IPv6 address uri RFC3986 URI mac IEEE 802 MAC48 EUI48 or EUI64 MAC address cidr RFC4632 or RFC4291 CIDR notation IP address regexp RE2 regular expression func GET go func GETpath string designRouteDefinition GET creates a route using the GET HTTP method func HEAD go func HEADpath string designRouteDefinition HEAD creates a route using the HEAD HTTP method func HashOf go func HashOfk v designDataType designHash HashOf creates a hash map from its key and element types The result can be used anywhere a type can Examples var Bottle Typebottle func Attributename var RatedBottles HashOfString Bottle ActionupdateRatings func Payloadfunc Memberratings HashOfString Integer Artificial examples Memberbottles RatedBottles func Header go func Headername string args interface Header is an alias of Attribute func Headers go func Headersdsl func Headers implements the DSL for describing HTTP headers The DSL syntax is identical to the one of Attribute Here is an example defining a couple of headers with validations Headersfunc HeaderAuthorization HeaderXAccount Integer func Minimum1 RequiredAuthorization Headers can be used inside Action to define the action request headers Response to define the response headers or Resource to define common request headers to all the resource actions func Host go func Hosthost string Host sets the API hostname func InitDesign go func InitDesign InitDesign initializes the Design global variable and loads the builtin response templates This is a public function mainly so it can be used in tests func License go func Licensedsl func License sets the API license information func Link go func Linkname string view string Link adds a link to a media type At the minimum a link has a name corresponding to one of the media type attribute names A link may also define the view used to render the linkedto attribute The default view used to render links is link Examples Linkorigin Use the link view of the origin attribute Linkaccount tiny Use the tiny view of the account attribute func Links go func Linksdsl func Links implements the media type links dsl See MediaType func MaxLength go func MaxLengthval int MaxLength adss a maxItems validation to the attribute See httpjsonschemaorglatestjsonschemavalidationhtmlanchor42 func Maximum go func Maximumval interface Maximum adds a maximum validation to the attribute See httpjsonschemaorglatestjsonschemavalidationhtmlanchor17 func Media go func Mediaval interface Media sets a response media type by name or by reference using a value returned by MediaType ResponseNotFound func Status404 Mediaapplicationjson Media can be used inside Response or ResponseTemplate func MediaType go func MediaTypeidentifier string dsl func designMediaTypeDefinition MediaType implements the media type definition dsl A media type definition describes the representation of a resource used in a response body This includes listing all the potential resource attributes that can appear in the body Views specify which of the attributes are actually rendered so that the same media type definition may represent multiple rendering of a given resource representation All media types must define a view named default This view is used to render the media type in response bodies when no other view is specified A media type definition may also define links to other media types This is done by first defining an attribute for the linkedto media type and then referring to that attribute in the Links dsl Views may then elect to render one or the other or both Links are rendered using the special link view Media types that are linked to must define that view Here is an example showing all the possible media type subdefinitions MediaTypeapplicationvndgoaexamplebottle func DescriptionA bottle of wine APIVersion10 TypeNameBottleMedia Optionally override the default generated name Attributesfunc Attributeid Integer ID of bottle Attributehref String API href of bottle Attributeaccount Account Owner account Attributeorigin Origin Details on wine origin Linksfunc Linkaccount Defines a link to the Account media type Linkorigin tiny Overrides the default view used to render links Requiredid href Viewdefault func Attributeid Attributehref Attributelinks Default view renders links Viewextended func Attributeid Attributehref Attributeaccount Extended view renders account inline Attributeorigin Extended view renders origin inline Attributelinks Extended view also renders links This function returns the media type definition so it can be referred to throughout the dsl func Member go func Membername string args interface Member is an alias of Attribute func Metadata go func Metadataname string value string Metadata is a set of keyvalue pairs that can be assigned to an object Each value consists of a slice of stirngs so that multiple invocation of the Metadata function on the same target using the same key builds up the slice While keys can have any value the following names are handled explicitly by goagen structtagxxx sets the struct field tag xxx on generated structs Overrides tags that goagen would otherwise set If the metadata value is a slice then the strings are joined with the space character as separator swaggertagxxx sets the Swagger object field tag xxx The value must be one to three strings The first string is the tag description while the second and third strings are the documentation url and description for the tag Subsequent calls to Metadata on the same attribute with key swaggertag builds up the Swagger tag list Usage Metadatastructtagjson myNameomitempty Metadatastructtagxml myNameattr Metadataswaggertagbackend func MinLength go func MinLengthval int MinLength adss a minItems validation to the attribute See httpjsonschemaorglatestjsonschemavalidationhtmlanchor45 func Minimum go func Minimumval interface Minimum adds a minimum validation to the attribute See httpjsonschemaorglatestjsonschemavalidationhtmlanchor21 func Name go func Namename string Name sets the contact or license name func PATCH go func PATCHpath string designRouteDefinition PATCH creates a route using the PATCH HTTP method func POST go func POSTpath string designRouteDefinition POST creates a route using the POST HTTP method func PUT go func PUTpath string designRouteDefinition PUT creates a route using the PUT HTTP method func Package go func Packagepath string Package sets the Go package path to the encoder or decoder It must be used inside a Consumes or Produces DSL func Param go func Paramname string args interface Param is an alias of Attribute func Params go func Paramsdsl func Params describe the action parameters either path parameters identified via wildcards or query string parameters Each parameter is described via the Param function which uses the same DSL as the Attribute DSL Here is an example Paramsfunc Paramid Integer A path parameter defined using eg GETid Paramsort String func A query string parameter Enumasc desc Params can be used inside Action to define the action parameters or Resource to define common parameters to all the resource actions func Parent go func Parentp string Parent sets the resource parent The parent resource is used to compute the path to the resource actions as well as resource collection item hrefs See Resource func Pattern go func Patternp string Pattern adds a pattern validation to the attribute See httpjsonschemaorglatestjsonschemavalidationhtmlanchor33 func Payload go func Payloadp interface dsls func Payload implements the action payload DSL An action payload describes the HTTP request body data structure The function accepts either a type or a DSL that describes the payload members using the Member DSL which accepts the same syntax as the Attribute DSL This function can be called passing in a type a DSL or both Examples PayloadBottlePayload Request payload is described by the BottlePayload type Payloadfunc Request payload is an object and is described inline MemberName PayloadBottlePayload func Request payload is described by merging the inline RequiredName definition into the BottlePayload type func Produces go func Producesargs interface Produces adds a MIME type to the list of MIME types the APIs can encode responses with Produces may also specify the path of the encoding package The package must expose a EncoderFactory method that returns an object which implements goaEncoderFactory func Reference go func Referencet designDataType Reference sets a type or media type reference The value itself can be a type or a media type The reference type attributes define the default properties for attributes with the same name in the type using the reference So for example if a type is defined as such var Bottle Typebottle func Attributename func MinLength3 Attributevintage Integer func Minimum1970 Attributesomethingelse Declaring the following media type var BottleMedia MediaTypevndgoabottle func ReferenceBottle Attributesfunc Attributeid Integer Attributename Attributevintage defines the name and vintage attributes with the same type and validations as defined in the Bottle type func Required go func Requirednames string Required adds a required validation to the attribute See httpjsonschemaorglatestjsonschemavalidationhtmlanchor61 func Resource go func Resourcename string dsl func designResourceDefinition Resource implements the resource definition dsl There is one resource definition per resource exposed by the API The resource dsl allows setting the resource default media type This media type is used to render the response body of actions that return the OK response unless the action overrides the default The default media type also sets the properties of the request payload attributes with the same name See DefaultMedia The resource dsl also allows listing the supported resource collection and resource collection item actions Each action corresponds to a specific API endpoint See Action The resource dsl can also specify a parent resource Parent resources have two effects First they set the prefix of all resource action paths to the parent resource href Note that actions can override the path using an absolute path that is a path starting with Second goa uses the parent resource href coupled with the resource BasePath if any to build hrefs to the resource collection or resource collection items By default goa uses the show action if present to compute a resource href basically concatenating the parent resource href with the base path and show action path The resource definition may specify a canonical action via CanonicalActionName to override that default Here is an example of a resource definition Resourcebottle func DescriptionA wine bottle Resource description DefaultMediaBottleMedia Resource default media type BasePathbottles Common resource action path prefix if not Parentaccount Name of parent resource if any CanonicalActionNameget Name of action that returns canonical representation if not show UseTraitAuthenticated Included trait if any can appear more than once APIVersionv1 API version exposing this resource can appear more than once Actionshow func Action definition can appear more than once Action dsl func Response go func Responsename string paramsAndDSL interface Response implements the response definition DSL Response takes the name of the response as first parameter goa defines all the standard HTTP status name as global variables so they can be readily used as response names Response also accepts optional arguments that correspond to the arguments defined by the corresponding response template the response template with the same name if there is one see ResponseTemplate A response may also optionally use an anonymous function as last argument to specify the response status code media type and headers overriding what the default response or response template specifies ResponseOK vndgoabottle func OK response template accepts one argument the media type identifier Headersfunc Headers list the response HTTP headers see Headers HeaderXRequestId ResponseNotFound func Status404 Not necessary as defined by default NotFound response Mediaapplicationjson Override NotFound response default of textplain ResponseCreated func MediaBottleMedia goa defines a default response for all the HTTP status code The default response simply sets the status code So if an action can return NotFound for example all it has to do is specify ResponseNotFound there is no need to specify the status code as the default response already does it in other words ResponseNotFound is equivalent to ResponseNotFound func Status404 goa also defines a default response template for the OK response which takes a single argument the identifier of the media type used to render the response The API DSL can define additional response templates or override the default OK response template using ResponseTemplate The media type identifier specified in a response definition via the Media function can be generic such as textplain or applicationjson or can correspond to the identifier of a media type defined in the API DSL In this latter case goa uses the media type definition to generate helper response methods These methods know how to render the views defined on the media type and run the validations defined in the media type during rendering func ResponseTemplate go func ResponseTemplatename string p interface ResponseTemplate defines a response template that action definitions can use to describe their responses The template may specify the HTTP response status header specification and body media type The template consists of a name and an anonymous function The function is called when an action uses the template to define a response Response template functions accept string parameters they can use to define the response fields Here is an example of a response template definition that uses a function with one argument corresponding to the name of the response body media type ResponseTemplateOK funcmt string Status200 OK response uses status code 200 Mediamt Media type name set by action definition Headersfunc HeaderXRequestId func XRequestId header contains a string Pattern09AF Regexp used to validate the response header content RequiredXRequestId Header is mandatory This template can the be used by actions to define the OK response as follows ResponseOK vndgoaexample goa comes with a set of predefined response templates one per standard HTTP status code The OK template is the only one that accepts an argument It is used as shown in the example above to set the response media type Other predefined templates do not use arguments ResponseTemplate makes it possible to define additional response templates specific to the API func Routing go func Routingroutes designRouteDefinition Routing lists the action route Each route is defined with a function named after the HTTP method The route function takes the path as argument Route paths may use wildcards as described in the httprouterhttpsgodocorggithubcomjulienschmidthttprouter package documentation These wildcards define parameters using the name or name syntax where name matches a path segment and name is a catchall that matches the path until the end func Scheme go func Schemevals string Scheme sets the API URL schemes func Status go func Statusstatus int Status sets the Response status func TRACE go func TRACEpath string designRouteDefinition TRACE creates a route using the TRACE HTTP method func TermsOfService go func TermsOfServiceterms string TermsOfService describes the API terms of services or links to them func Title go func Titleval string Title sets the API title used by generated documentation JSON Hyperschema code comments etc func Trait go func Traitname string val func Trait defines an API trait A trait encapsulates arbitrary DSL that gets executed wherever the trait is called via the UseTrait function func Type go func Typename string dsl func designUserTypeDefinition Type implements the type definition dsl A type definition describes a data structure consisting of attributes Each attribute has a type which can also refer to a type definition or use a primitive type or nested attibutes The dsl syntax for define a type definition is the Attribute dsl see Attribute On top of specifying any attribute type type definitions can also be used to describe the data structure of a request payload They can also be used by media type definitions as reference see Reference Here is an example TypecreatePayload func DescriptionType of create and upload action payloads APIVersion10 Attributename String name of bottle Attributeorigin Origin Details on wine origin See Origin definition below Requiredname var Origin Typeorigin func DescriptionOrigin of bottle AttributeCountry This function returns the newly defined type so the value can be used throughout the dsl func TypeName go func TypeNamename string TypeName makes it possible to set the Go struct name for a type or media type in the generated code By default goagen uses the name type or identifier media type given in the dsl and computes a valid Go identifier from it This function makes it possible to override that and provide a custom name name must be a valid Go identifier func URL go func URLurl string URL sets the contact or license URL func UseTrait go func UseTraitname string UseTrait executes the API trait with the given name UseTrait can be used inside a Resource Action or Attribute DSL func Version go func Versionver string dsl func designAPIVersionDefinition Version is the top level design language function which defines the API global property values for a given version The DSL used to define the property values is identical to the one used by the API function func View go func Viewname string dsl func View adds a new view to a media type A view has a name and lists attributes that are rendered when the view is used to produce a response The attribute names must appear in the media type definition If an attribute is itself a media type then the view may specify which view to use when rendering the attribute using the View function in the View dsl If not specified then the view named default is used Examples Viewdefault func Attributeid id and name must be media type attributes Attributename Viewextended func Attributeid Attributename Attributeorigin func Viewextended Use view extended to render attribute origin Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/design","tags":["godoc","design"],"href":"/godoc/goa/design","content":" design import githubcomgoadesigngoadesign Package design defines types which describe the data types used by action controllers These are the data structures of the request payloads and parameters as well as the response payloads There are primitive types corresponding to the JSON primitive types bool string integer and number array types which represent a collection of another type and object types corresponding to JSON objects ie a map indexed by strings where each value may be any of the data types On top of these the package also defines user types and media types Both these types are named objects with additional properties a description and for media types the media type identifier links and views Constants go const BooleanKind represents a JSON bool BooleanKind iota 1 IntegerKind represents a JSON integer IntegerKind NumberKind represents a JSON number including integers NumberKind StringKind represents a JSON string StringKind DateTimeKind represents a JSON string that is parsed as a Go timeTime DateTimeKind AnyKind represents a generic interface AnyKind ArrayKind represents a JSON array ArrayKind ObjectKind represents a JSON object ObjectKind HashKind represents a JSON object where the keys are not known in advance HashKind UserTypeKind represents a user type UserTypeKind MediaTypeKind represents a media type MediaTypeKind go const Boolean is the type for a JSON boolean Boolean PrimitiveBooleanKind Integer is the type for a JSON number without a fraction or exponent part Integer PrimitiveIntegerKind Number is the type for any JSON number including integers Number PrimitiveNumberKind String is the type for a JSON string String PrimitiveStringKind DateTime is the type for a JSON string parsed as a Go timeTime DateTime expects an RFC3339 formatted value DateTime PrimitiveDateTimeKind Any is the type for an arbitrary JSON value interface in Go Any PrimitiveAnyKind Variables go var Design is the API definition created via DSL Design APIDefinition WildcardRegex is the regular expression used to capture path parameters WildcardRegex regexpMustCompileazAZ09 GeneratedMediaTypes contains DSL definitions that were created by the design DSL and need to be executed as a second pass An example of this are media types defined with CollectionOf the element media type must be defined first then the definition created by CollectionOf must execute GeneratedMediaTypes MediaTypeRoot DefaultDecoders contains the decoding definitions used when no Consumes DSL is found DefaultDecoders EncodingDefinition DefaultEncoders contains the encoding definitions used when no Produces DSL is found DefaultEncoders EncodingDefinition KnownEncoders contains the list of encoding packages and factories known by goa indexed by MIME type KnownEncoders mapstring3string applicationjson 3stringjson JSONEncoderFactory JSONDecoderFactory applicationxml 3stringxml XMLEncoderFactory XMLDecoderFactory textxml 3stringxml XMLEncoderFactory XMLDecoderFactory applicationgob 3stringgob GobEncoderFactory GobDecoderFactory applicationxgob 3stringgob GobEncoderFactory GobDecoderFactory applicationbinc 3stringgithubcomgoadesignmiddlewareencodingbinc EncoderFactory DecoderFactory applicationxbinc 3stringgithubcomgoadesignmiddlewareencodingbinc EncoderFactory DecoderFactory applicationxcbor 3stringgithubcomgoadesignmiddlewareencodingcbor EncoderFactory DecoderFactory applicationcbor 3stringgithubcomgoadesignmiddlewareencodingcbor EncoderFactory DecoderFactory applicationmsgpack 3stringgithubcomgoadesignmiddlewareencodingmsgpack EncoderFactory DecoderFactory applicationxmsgpack 3stringgithubcomgoadesignmiddlewareencodingmsgpack EncoderFactory DecoderFactory JSONContentTypes is a slice of default ContentType headers that will use stdlib encodingjson to unmarshal unless overwritten using SetDecoder JSONContentTypes stringapplicationjson XMLContentTypes is a slice of default ContentType headers that will use stdlib encodingxml to unmarshal unless overwritten using SetDecoder XMLContentTypes stringapplicationxml textxml GobContentTypes is a slice of default ContentType headers that will use stdlib encodinggob to unmarshal unless overwritten using SetDecoder GobContentTypes stringapplicationgob applicationxgob func CanonicalIdentifier go func CanonicalIdentifieridentifier string string CanonicalIdentifier returns the media type identifier sans suffix which is what the DSL uses to store and lookup media types func ExtractWildcards go func ExtractWildcardspath string string ExtractWildcards returns the names of the wildcards that appear in path func HasKnownEncoder go func HasKnownEncodermimeType string bool HasKnownEncoder returns true if the encoder for the given MIME type is known by goa MIME types with unknown encoders must be associated with a package path explicitly in the DSL func IsGoaEncoder go func IsGoaEncoderpkgPath string bool IsGoaEncoder returns true if the encoder for the given MIME type is implemented in the goa package type APIDefinition go type APIDefinition struct APIVersionDefinition contains the default values for properties across all versions APIVersionDefinition APIVersions contain the API properties indexed by version APIVersions mapstringAPIVersionDefinition Exposed resources indexed by name Resources mapstringResourceDefinition Types indexes the user defined types by name Types mapstringUserTypeDefinition MediaTypes indexes the API media types by canonical identifier MediaTypes mapstringMediaTypeDefinition contains filtered or unexported fields APIDefinition defines the global properties of the API func APIDefinition Context go func a APIDefinition Context string Context returns the generic definition name used in error messages func APIDefinition Example go func a APIDefinition Exampledt DataType interface Example returns a random value for the given data type If the data type has validations then the example value validates them Example returns the same random value for a given api name the random generator is seeded after the api name func APIDefinition IterateMediaTypes go func a APIDefinition IterateMediaTypesit MediaTypeIterator error IterateMediaTypes calls the given iterator passing in each media type sorted in alphabetical order Iteration stops if an iterator returns an error and in this case IterateMediaTypes returns that error func APIDefinition IterateResources go func a APIDefinition IterateResourcesit ResourceIterator error IterateResources calls the given iterator passing in each resource sorted in alphabetical order Iteration stops if an iterator returns an error and in this case IterateResources returns that error func APIDefinition IterateSets go func a APIDefinition IterateSetsiterator dslengineSetIterator IterateSets goes over all the definition sets of the API The API definition itself each version definition user types media types and finally resources func APIDefinition IterateUserTypes go func a APIDefinition IterateUserTypesit UserTypeIterator error IterateUserTypes calls the given iterator passing in each user type sorted in alphabetical order Iteration stops if an iterator returns an error and in this case IterateUserTypes returns that error func APIDefinition IterateVersions go func a APIDefinition IterateVersionsit VersionIterator error IterateVersions calls the given iterator passing in each API version definition sorted alphabetically by version name It first calls the iterator on the embedded version definition which contains the definitions for all the unversioned resources Iteration stops if an iterator returns an error and in this case IterateVersions returns that error func APIDefinition MediaTypeWithIdentifier go func a APIDefinition MediaTypeWithIdentifierid string MediaTypeDefinition MediaTypeWithIdentifier returns the media type with a matching media type identifier Two media type identifiers match if their values sans suffix match So for example applicationvndfooxml applicationvndfoojson and applicationvndfoo all match func APIDefinition SupportsNoVersion go func a APIDefinition SupportsNoVersion bool SupportsNoVersion returns true if the API is unversioned func APIDefinition SupportsVersion go func a APIDefinition SupportsVersionver string bool SupportsVersion returns true if the object supports the given version func APIDefinition Validate go func a APIDefinition Validate dslengineValidationErrors Validate tests whether the API definition is consistent all resource parent names resolve to an actual resource func APIDefinition Versions go func a APIDefinition Versions versions string Versions returns an array of supported versions type APIVersionDefinition go type APIVersionDefinition struct API name Name string API Title Title string API description Description string API version if any Version string API hostname Host string API URL schemes Schemes string Common base path to all API actions BasePath string Common path parameters to all API actions BaseParams AttributeDefinition Consumes lists the mime types supported by the API controllers Consumes EncodingDefinition Produces lists the mime types generated by the API controllers Produces EncodingDefinition TermsOfService describes or links to the API terms of service TermsOfService string Contact provides the API users with contact information Contact ContactDefinition License describes the API license License LicenseDefinition Docs points to the API external documentation Docs DocsDefinition Traits available to all API resources and actions indexed by name Traits mapstringdslengineTraitDefinition Responses available to all API actions indexed by name Responses mapstringResponseDefinition Response template factories available to all API actions indexed by name ResponseTemplates mapstringResponseTemplateDefinition Builtin responses DefaultResponses mapstringResponseDefinition Builtin response templates DefaultResponseTemplates mapstringResponseTemplateDefinition DSLFunc contains the DSL used to create this definition if any DSLFunc func Metadata is a list of keyvalue pairs Metadata dslengineMetadataDefinition APIVersionDefinition defines the properties of the API for a given version func APIVersionDefinition Context go func v APIVersionDefinition Context string Context returns the generic definition name used in error messages func APIVersionDefinition DSL go func v APIVersionDefinition DSL func DSL returns the initialization DSL func APIVersionDefinition Finalize go func v APIVersionDefinition Finalize Finalize sets the Consumes and Produces fields to the defaults if empty func APIVersionDefinition IsDefault go func v APIVersionDefinition IsDefault bool IsDefault returns true if the version definition applies to all versions ie is the API definition func APIVersionDefinition IterateMediaTypes go func v APIVersionDefinition IterateMediaTypesit MediaTypeIterator error IterateMediaTypes calls the given iterator passing in each media type sorted in alphabetical order Iteration stops if an iterator returns an error and in this case IterateMediaTypes returns that error func APIVersionDefinition IterateResources go func v APIVersionDefinition IterateResourcesit ResourceIterator error IterateResources calls the given iterator passing in each resource sorted in alphabetical order Iteration stops if an iterator returns an error and in this case IterateResources returns that error func APIVersionDefinition IterateResponses go func v APIVersionDefinition IterateResponsesit ResponseIterator error IterateResponses calls the given iterator passing in each response sorted in alphabetical order Iteration stops if an iterator returns an error and in this case IterateResponses returns that error func APIVersionDefinition IterateUserTypes go func v APIVersionDefinition IterateUserTypesit UserTypeIterator error IterateUserTypes calls the given iterator passing in each user type sorted in alphabetical order Iteration stops if an iterator returns an error and in this case IterateUserTypes returns that error type ActionDefinition go type ActionDefinition struct Action name eg create Name string Action description eg Creates a task Description string Docs points to the API external documentation Docs DocsDefinition Parent resource Parent ResourceDefinition Specific action URL schemes Schemes string Action routes Routes RouteDefinition Map of possible response definitions indexed by name Responses mapstringResponseDefinition Path and query string parameters Params AttributeDefinition Query string parameters only QueryParams AttributeDefinition Payload blueprint request body if any Payload UserTypeDefinition Request headers that need to be made available to action Headers AttributeDefinition Metadata is a list of keyvalue pairs Metadata dslengineMetadataDefinition ActionDefinition defines a resource action It defines both an HTTP endpoint and the shape of HTTP requests and responses made to that endpoint The shape of requests is defined via parameters there are path parameters parameters and a payload parameter request body ie portions of the URL that define parameter values query string func ActionDefinition AllParams go func a ActionDefinition AllParams AttributeDefinition AllParams returns the path and query string parameters of the action across all its routes func ActionDefinition Context go func a ActionDefinition Context string Context returns the generic definition name used in error messages func ActionDefinition HasAbsoluteRoutes go func a ActionDefinition HasAbsoluteRoutes bool HasAbsoluteRoutes returns true if all the action routes are absolute func ActionDefinition PathParams go func a ActionDefinition PathParamsversion APIVersionDefinition AttributeDefinition PathParams returns the path parameters of the action across all its routes func ActionDefinition Validate go func a ActionDefinition Validateversion APIVersionDefinition dslengineValidationErrors Validate tests whether the action definition is consistent parameters have unique names and it has at least one response func ActionDefinition ValidateParams go func a ActionDefinition ValidateParamsversion APIVersionDefinition dslengineValidationErrors ValidateParams checks the action parameters make sure they have names members and types type ActionIterator go type ActionIterator funca ActionDefinition error ActionIterator is the type of functions given to IterateActions type Array go type Array struct ElemType AttributeDefinition Array is the type for a JSON array func Array Dup go func a Array Dup DataType Dup calls Dup on the array ElemType and creates an array with the result func Array Example go func a Array Exampler RandomGenerator interface Example produces a random array value func Array IsArray go func a Array IsArray bool IsArray returns true func Array IsCompatible go func a Array IsCompatibleval interface bool IsCompatible returns true if val is compatible with p func Array IsHash go func a Array IsHash bool IsHash returns false func Array IsObject go func a Array IsObject bool IsObject returns false func Array IsPrimitive go func a Array IsPrimitive bool IsPrimitive returns false func Array Kind go func a Array Kind Kind Kind implements DataKind func Array Name go func a Array Name string Name returns the type name func Array ToArray go func a Array ToArray Array ToArray returns a func Array ToHash go func a Array ToHash Hash ToHash returns nil func Array ToObject go func a Array ToObject Object ToObject returns nil type AttributeDefinition go type AttributeDefinition struct Attribute type Type DataType Attribute reference type if any Reference DataType Optional description Description string Optional validation functions Validations dslengineValidationDefinition Metadata is a list of keyvalue pairs Metadata dslengineMetadataDefinition Optional member default value DefaultValue interface Optional view used to render Attribute only applies to media type attributes View string List of API versions that use the attribute APIVersions string NonZeroAttributes lists the names of the child attributes that cannot have a zero value and thus whose presence does not need to be validated NonZeroAttributes mapstringbool DSLFunc contains the initialization DSL This is used for user types DSLFunc func AttributeDefinition defines a JSON object member with optional description default value and validations func AttributeDefinition AllNonZero go func a AttributeDefinition AllNonZero string AllNonZero returns the complete list of all nonzero attribute name func AttributeDefinition AllRequired go func a AttributeDefinition AllRequired required string AllRequired returns the list of all required fields from the underlying object An attribute type can be itself an attribute eg a MediaTypeDefinition or a UserTypeDefinition This happens when the DSL uses references for example So traverse the hierarchy and collect all the required validations func AttributeDefinition Context go func a AttributeDefinition Context string Context returns the generic definition name used in error messages func AttributeDefinition DSL go func a AttributeDefinition DSL func DSL returns the initialization DSL func AttributeDefinition Definition go func a AttributeDefinition Definition AttributeDefinition Definition returns the underlying attribute definition Note that this function is inherited by both UserTypeDefinition and MediaTypeDefinition func AttributeDefinition Dup go func a AttributeDefinition Dup AttributeDefinition Dup returns a copy of the attribute definition Note the primitive underlying types are not duplicated for simplicity func AttributeDefinition Example go func a AttributeDefinition Exampler RandomGenerator interface Example returns a random instance of the attribute that validates func AttributeDefinition Inherit go func a AttributeDefinition Inheritparent AttributeDefinition Inherit merges the properties of existing target type attributes with the arguments The algorithm is recursive so that child attributes are also merged func AttributeDefinition IsNonZero go func a AttributeDefinition IsNonZeroattName string bool IsNonZero returns true if the given string matches the name of a nonzero attribute false otherwise func AttributeDefinition IsPrimitivePointer go func a AttributeDefinition IsPrimitivePointerattName string bool IsPrimitivePointer returns true if the field generated for the given attribute should be a pointer to a primitive type The target attribute must be an object func AttributeDefinition IsRequired go func a AttributeDefinition IsRequiredattName string bool IsRequired returns true if the given string matches the name of a required attribute false otherwise func AttributeDefinition Merge go func a AttributeDefinition Mergeother AttributeDefinition AttributeDefinition Merge merges the argument attributes into the target and returns the target overriding existing attributes with identical names This only applies to attributes of type Object and Merge panics if the argument or the target is not of type Object func AttributeDefinition Validate go func a AttributeDefinition Validatectx string parent dslengineDefinition dslengineValidationErrors Validate tests whether the attribute definition is consistent required fields exist Since attributes are unaware of their context additional context information can be provided to be used in error messages The parent definition context is automatically added to error messages type AttributeIterator go type AttributeIterator funcstring AttributeDefinition error AttributeIterator is the type of the function given to IterateAttributes type ContactDefinition go type ContactDefinition struct Name of the contact personorganization Name string jsonnameomitempty Email address of the contact personorganization Email string jsonemailomitempty URL pointing to the contact information URL string jsonurlomitempty ContactDefinition contains the API contact information func ContactDefinition Context go func c ContactDefinition Context string Context returns the generic definition name used in error messages type DataStructure go type DataStructure interface Definition returns the data structure definition Definition AttributeDefinition DataStructure is the interface implemented by all data structure types That is attribute definitions user types and media types type DataType go type DataType interface Kind of data type one of the Kind enum Kind Kind Name returns the type name Name string IsPrimitive returns true if the underlying type is one of the primitive types IsPrimitive bool IsObject returns true if the underlying type is an object a user type which is an object or a media type whose type is an object IsObject bool IsArray returns true if the underlying type is an array a user type which is an array or a media type whose type is an array IsArray bool IsHash returns true if the underlying type is a hash map a user type which is a hash map or a media type whose type is a hash map IsHash bool ToObject returns the underlying object if any ie if IsObject returns true nil otherwise ToObject Object ToArray returns the underlying array if any ie if IsArray returns true nil otherwise ToArray Array ToHash returns the underlying hash map if any ie if IsHash returns true nil otherwise ToHash Hash IsCompatible checks whether val has a Go type that is compatible with the data type IsCompatibleval interface bool Dup creates a copy of the type This is only relevant for types that are DSLDefinition ie have an attribute definition Dup DataType Example returns a random value for the given data type If the data type has validations then the example value validates them Exampler RandomGenerator interface DataType is the common interface to all types type DocsDefinition go type DocsDefinition struct Description of documentation Description string jsondescriptionomitempty URL to documentation URL string jsonurlomitempty DocsDefinition points to external documentation func DocsDefinition Context go func d DocsDefinition Context string Context returns the generic definition name used in error messages type EncodingDefinition go type EncodingDefinition struct MIMETypes is the set of possible MIME types for the content being encoded or decoded MIMETypes string PackagePath is the path to the Go package that implements the encoder decoder The package must expose a EncoderFactory or DecoderFactory function that the generated code calls The methods must return objects that implement the goaEncoderFactory or goaDecoderFactory interface respectively PackagePath string EncodingDefinition defines an encoder supported by the API func EncodingDefinition Context go func enc EncodingDefinition Context string Context returns the generic definition name used in error messages func EncodingDefinition SupportingPackages go func enc EncodingDefinition SupportingPackages mapstringstring SupportingPackages returns the package paths to the packages that implements the encoders and decoders that support the MIME types in the definition The return value maps the package path to the corresponding list of supported MIME types It is nil if no package could be found for any of the MIME types in the definition in which case the definition is invalid func EncodingDefinition Validate go func enc EncodingDefinition Validate dslengineValidationErrors Validate validates the encoding MIME type and Go package path if set type Hash go type Hash struct KeyType AttributeDefinition ElemType AttributeDefinition Hash is the type for a hash map func Hash Dup go func h Hash Dup DataType Dup creates a copy of h func Hash Example go func h Hash Exampler RandomGenerator interface Example returns a random hash value func Hash IsArray go func h Hash IsArray bool IsArray returns false func Hash IsCompatible go func h Hash IsCompatibleval interface bool IsCompatible returns true if val is compatible with p func Hash IsHash go func h Hash IsHash bool IsHash returns true func Hash IsObject go func h Hash IsObject bool IsObject returns false func Hash IsPrimitive go func h Hash IsPrimitive bool IsPrimitive returns false func Hash Kind go func h Hash Kind Kind Kind implements DataKind func Hash Name go func h Hash Name string Name returns the type name func Hash ToArray go func h Hash ToArray Array ToArray returns nil func Hash ToHash go func h Hash ToHash Hash ToHash returns the underlying hash map func Hash ToObject go func h Hash ToObject Object ToObject returns nil type Kind go type Kind uint A Kind defines the JSON type that a DataType represents type LicenseDefinition go type LicenseDefinition struct Name of license used for the API Name string jsonnameomitempty URL to the license used for the API URL string jsonurlomitempty LicenseDefinition contains the license information for the API func LicenseDefinition Context go func l LicenseDefinition Context string Context returns the generic definition name used in error messages type LinkDefinition go type LinkDefinition struct Link name Name string View used to render link if not link View string URITemplate is the RFC6570 URI template of the link Href URITemplate string Parent media Type Parent MediaTypeDefinition LinkDefinition defines a media type link it specifies a URL to a related resource func LinkDefinition Attribute go func l LinkDefinition Attribute AttributeDefinition Attribute returns the linked attribute func LinkDefinition Context go func l LinkDefinition Context string Context returns the generic definition name used in error messages func LinkDefinition MediaType go func l LinkDefinition MediaType MediaTypeDefinition MediaType returns the media type of the linked attribute func LinkDefinition Validate go func l LinkDefinition Validate dslengineValidationErrors Validate checks that the link definition is consistent it has a media type or the name of an attribute part of the parent media type type MediaTypeDefinition go type MediaTypeDefinition struct A media type is a type UserTypeDefinition Identifier is the RFC 6838 media type identifier Identifier string Links list the rendered links indexed by name Links mapstringLinkDefinition Views list the supported views indexed by name Views mapstringViewDefinition Resource this media type is the canonical representation for if any Resource ResourceDefinition MediaTypeDefinition describes the rendering of a resource using property and link definitions A property corresponds to a single member of the media type it has a name and a type as well as optional validation rules A link has a name and a URL that points to a related resource Media types also define views which describe which members and links to render when building the response body for the corresponding view func NewMediaTypeDefinition go func NewMediaTypeDefinitionname identifier string dsl func MediaTypeDefinition NewMediaTypeDefinition creates a media type definition but does not execute the DSL func MediaTypeDefinition ComputeViews go func m MediaTypeDefinition ComputeViews mapstringViewDefinition ComputeViews returns the media type views recursing as necessary if the media type is a collection func MediaTypeDefinition Dup go func m MediaTypeDefinition Dup DataType Dup returns a copy of m func MediaTypeDefinition Kind go func m MediaTypeDefinition Kind Kind Kind implements DataKind func MediaTypeDefinition Validate go func m MediaTypeDefinition Validate dslengineValidationErrors Validate checks that the media type definition is consistent its identifier is a valid media type identifier type MediaTypeIterator go type MediaTypeIterator funcm MediaTypeDefinition error MediaTypeIterator is the type of functions given to IterateMediaTypes type MediaTypeRoot go type MediaTypeRoot mapstringMediaTypeDefinition MediaTypeRoot is the data structure that represents the additional DSL definition root that contains the media type definition set created by CollectionOf func MediaTypeRoot IterateSets go func r MediaTypeRoot IterateSetsiterator dslengineSetIterator IterateSets iterates over the one generated media type definition set type Object go type Object mapstringAttributeDefinition Object is the type for a JSON object func Object Dup go func o Object Dup DataType Dup creates a copy of o func Object Example go func o Object Exampler RandomGenerator interface Example returns a random value of the object func Object IsArray go func o Object IsArray bool IsArray returns false func Object IsCompatible go func o Object IsCompatibleval interface bool IsCompatible returns true if val is compatible with p func Object IsHash go func o Object IsHash bool IsHash returns false func Object IsObject go func o Object IsObject bool IsObject returns true func Object IsPrimitive go func o Object IsPrimitive bool IsPrimitive returns false func Object IterateAttributes go func o Object IterateAttributesit AttributeIterator error IterateAttributes calls the given iterator passing in each attribute sorted in alphabetical order Iteration stops if an iterator returns an error and in this case IterateObject returns that error func Object Kind go func o Object Kind Kind Kind implements DataKind func Object Merge go func o Object Mergeother Object Merge copies others attributes into o overridding any preexisting attribute with the same name func Object Name go func o Object Name string Name returns the type name func Object ToArray go func o Object ToArray Array ToArray returns nil func Object ToHash go func o Object ToHash Hash ToHash returns nil func Object ToObject go func o Object ToObject Object ToObject returns the underlying object type Primitive go type Primitive Kind Primitive is the type for null boolean integer number string and time func Primitive Dup go func p Primitive Dup DataType Dup returns the primitive type func Primitive Example go func p Primitive Exampler RandomGenerator interface Example returns an instance of the given data type func Primitive IsArray go func p Primitive IsArray bool IsArray returns false func Primitive IsCompatible go func p Primitive IsCompatibleval interface ok bool IsCompatible returns true if val is compatible with p func Primitive IsHash go func p Primitive IsHash bool IsHash returns false func Primitive IsObject go func p Primitive IsObject bool IsObject returns false func Primitive IsPrimitive go func p Primitive IsPrimitive bool IsPrimitive returns true func Primitive Kind go func p Primitive Kind Kind Kind implements DataKind func Primitive Name go func p Primitive Name string Name returns the type name func Primitive ToArray go func p Primitive ToArray Array ToArray returns nil func Primitive ToHash go func p Primitive ToHash Hash ToHash returns nil func Primitive ToObject go func p Primitive ToObject Object ToObject returns nil type RandomGenerator go type RandomGenerator struct Seed string contains filtered or unexported fields RandomGenerator generates consistent random values of different types given a seed The random values are consistent in that given the same seed the same random values get generated func NewRandomGenerator go func NewRandomGeneratorseed string RandomGenerator NewRandomGenerator returns a random value generator seeded from the given string value func RandomGenerator Bool go func r RandomGenerator Bool bool Bool produces a random boolean func RandomGenerator DateTime go func r RandomGenerator DateTime timeTime DateTime produces a random date func RandomGenerator Float64 go func r RandomGenerator Float64 float64 Float64 produces a random float64 value func RandomGenerator Int go func r RandomGenerator Int int Int produces a random integer func RandomGenerator String go func r RandomGenerator String string String produces a random string type ResourceDefinition go type ResourceDefinition struct Resource name Name string Common URL prefix to all resource action HTTP requests BasePath string Object describing each parameter that appears in BasePath if any BaseParams AttributeDefinition Name of parent resource if any ParentName string Optional description Description string API versions that expose this resource APIVersions string Default media type describes the resource attributes MediaType string Exposed resource actions indexed by name Actions mapstringActionDefinition Action with canonical resource path CanonicalActionName string Map of response definitions that apply to all actions indexed by name Responses mapstringResponseDefinition Path and query string parameters that apply to all actions Params AttributeDefinition Request headers that apply to all actions Headers AttributeDefinition DSLFunc contains the DSL used to create this definition if any DSLFunc func metadata is a list of keyvalue pairs Metadata dslengineMetadataDefinition ResourceDefinition describes a REST resource It defines both a media type and a set of actions that can be executed through HTTP requests A resource is versioned so that multiple versions of the same resource may be exposed by the API func NewResourceDefinition go func NewResourceDefinitionname string dsl func ResourceDefinition NewResourceDefinition creates a resource definition but does not execute the DSL func ResourceDefinition CanonicalAction go func r ResourceDefinition CanonicalAction ActionDefinition CanonicalAction returns the canonical action of the resource if any The canonical action is used to compute hrefs to resources func ResourceDefinition Context go func r ResourceDefinition Context string Context returns the generic definition name used in error messages func ResourceDefinition DSL go func r ResourceDefinition DSL func DSL returns the initialization DSL func ResourceDefinition Finalize go func r ResourceDefinition Finalize Finalize is run post DSL execution It merges response definitions creates implicit action parameters initializes querystring parameters and sets path parameters as non zero attributes func ResourceDefinition FullPath go func r ResourceDefinition FullPathversion APIVersionDefinition string FullPath computes the base path to the resource actions concatenating the API and parent resource base paths as needed func ResourceDefinition IterateActions go func r ResourceDefinition IterateActionsit ActionIterator error IterateActions calls the given iterator passing in each resource action sorted in alphabetical order Iteration stops if an iterator returns an error and in this case IterateActions returns that error func ResourceDefinition Parent go func r ResourceDefinition Parent ResourceDefinition Parent returns the parent resource if any nil otherwise func ResourceDefinition SupportsNoVersion go func r ResourceDefinition SupportsNoVersion bool SupportsNoVersion returns true if the resource is exposed by an unversioned API func ResourceDefinition SupportsVersion go func r ResourceDefinition SupportsVersionversion string bool SupportsVersion returns true if the resource is exposed by the given API version An empty string version means no version func ResourceDefinition URITemplate go func r ResourceDefinition URITemplateversion APIVersionDefinition string URITemplate returns a httprouter compliant URI template to this resource The result is the empty string if the resource does not have a show action and does not define a different canonical action func ResourceDefinition Validate go func r ResourceDefinition Validateversion APIVersionDefinition dslengineValidationErrors Validate tests whether the resource definition is consistent action names are valid and each action is valid func ResourceDefinition Versions go func r ResourceDefinition Versions string Versions returns the API versions that expose the resource type ResourceIterator go type ResourceIterator funcr ResourceDefinition error ResourceIterator is the type of functions given to IterateResources type ResponseDefinition go type ResponseDefinition struct Response name Name string HTTP status Status int Response description Description string Response body media type if any MediaType string Response header definitions Headers AttributeDefinition Parent action or resource Parent dslengineDefinition Metadata is a list of keyvalue pairs Metadata dslengineMetadataDefinition Standard is true if the response definition comes from the goa default responses Standard bool Global is true if the response definition comes from the global API properties Global bool ResponseDefinition defines a HTTP response status and optional validation rules func ResponseDefinition Context go func r ResponseDefinition Context string Context returns the generic definition name used in error messages func ResponseDefinition Dup go func r ResponseDefinition Dup ResponseDefinition Dup returns a copy of the response definition func ResponseDefinition Merge go func r ResponseDefinition Mergeother ResponseDefinition Merge merges other into target Only the fields of target that are not already set are merged func ResponseDefinition Validate go func r ResponseDefinition Validate dslengineValidationErrors Validate checks that the response definition is consistent its status is set and the media type definition if any is valid type ResponseIterator go type ResponseIterator funcr ResponseDefinition error ResponseIterator is the type of functions given to IterateResponses type ResponseTemplateDefinition go type ResponseTemplateDefinition struct Response template name Name string Response template function Template funcparams string ResponseDefinition ResponseTemplateDefinition defines a response template A response template is a function that takes an arbitrary number of strings and returns a response definition func ResponseTemplateDefinition Context go func r ResponseTemplateDefinition Context string Context returns the generic definition name used in error messages type RouteDefinition go type RouteDefinition struct Verb is the HTTP method eg GET POST etc Verb string Path is the URL path eg tasksid Path string Parent is the action this route applies to Parent ActionDefinition RouteDefinition represents an action route func RouteDefinition Context go func r RouteDefinition Context string Context returns the generic definition name used in error messages func RouteDefinition FullPath go func r RouteDefinition FullPathversion APIVersionDefinition string FullPath returns the action full path computed by concatenating the API and resource base paths with the action specific path func RouteDefinition IsAbsolute go func r RouteDefinition IsAbsolute bool IsAbsolute returns true if the action path should not be concatenated to the resource and API base paths func RouteDefinition Params go func r RouteDefinition Paramsversion APIVersionDefinition string Params returns the route parameters For example for the route GET foofooID Params returns stringfooID func RouteDefinition Validate go func r RouteDefinition Validate dslengineValidationErrors Validate checks that the route definition is consistent it has a parent type UserTypeDefinition go type UserTypeDefinition struct A user type is an attribute definition AttributeDefinition Name of type TypeName string UserTypeDefinition is the type for user defined types that are not media types eg payload types func NewUserTypeDefinition go func NewUserTypeDefinitionname string dsl func UserTypeDefinition NewUserTypeDefinition creates a user type definition but does not execute the DSL func UserTypeDefinition Context go func t UserTypeDefinition Context string Context returns the generic definition name used in error messages func UserTypeDefinition DSL go func t UserTypeDefinition DSL func DSL returns the initialization DSL func UserTypeDefinition Dup go func u UserTypeDefinition Dup DataType Dup returns a copy of u func UserTypeDefinition Finalize go func u UserTypeDefinition Finalize Finalize merges base type attributes func UserTypeDefinition IsArray go func u UserTypeDefinition IsArray bool IsArray calls IsArray on the user type underlying data type func UserTypeDefinition IsCompatible go func u UserTypeDefinition IsCompatibleval interface bool IsCompatible returns true if val is compatible with p func UserTypeDefinition IsHash go func u UserTypeDefinition IsHash bool IsHash calls IsHash on the user type underlying data type func UserTypeDefinition IsObject go func u UserTypeDefinition IsObject bool IsObject calls IsObject on the user type underlying data type func UserTypeDefinition IsPrimitive go func u UserTypeDefinition IsPrimitive bool IsPrimitive calls IsPrimitive on the user type underlying data type func UserTypeDefinition Kind go func u UserTypeDefinition Kind Kind Kind implements DataKind func UserTypeDefinition Name go func u UserTypeDefinition Name string Name returns the JSON type name func UserTypeDefinition SupportsNoVersion go func u UserTypeDefinition SupportsNoVersion bool SupportsNoVersion returns true if the resource is exposed by an unversioned API func UserTypeDefinition SupportsVersion go func u UserTypeDefinition SupportsVersionversion string bool SupportsVersion returns true if the type is exposed by the given API version An empty string version means no version func UserTypeDefinition ToArray go func u UserTypeDefinition ToArray Array ToArray calls ToArray on the user type underlying data type func UserTypeDefinition ToHash go func u UserTypeDefinition ToHash Hash ToHash calls ToHash on the user type underlying data type func UserTypeDefinition ToObject go func u UserTypeDefinition ToObject Object ToObject calls ToObject on the user type underlying data type func UserTypeDefinition Validate go func u UserTypeDefinition Validatectx string parent dslengineDefinition dslengineValidationErrors Validate checks that the user type definition is consistent it has a name and all user and media types used in fields support the API versions that use the type func UserTypeDefinition Versions go func u UserTypeDefinition Versions string Versions returns all the API versions that use the type type UserTypeIterator go type UserTypeIterator funcm UserTypeDefinition error UserTypeIterator is the type of functions given to IterateUserTypes type VersionIterator go type VersionIterator funcv APIVersionDefinition error VersionIterator is the type of functions given to IterateVersions type ViewDefinition go type ViewDefinition struct Set of properties included in view AttributeDefinition Name of view Name string Parent media Type Parent MediaTypeDefinition ViewDefinition defines which members and links to render when building a response The view is a JSON object whose property names must match the names of the parent media type members The members fields are inherited from the parent media type but may be overridden func ViewDefinition Context go func v ViewDefinition Context string Context returns the generic definition name used in error messages func ViewDefinition Validate go func v ViewDefinition Validate dslengineValidationErrors Validate checks that the view definition is consistent it has a parent media type and the underlying definition type is consistent Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/dslengine","tags":["godoc","dslengine"],"href":"/godoc/goa/dslengine","content":" dslengine import githubcomgoadesigngoadslengine func Caller go func Caller string Caller returns the name of calling function func CanUse go func CanUseclient provider Versioned error CanUse returns nil if the provider supports all the versions supported by the client or if the provider is unversioned func Execute go func Executedsl func def Definition bool Execute runs the given DSL to initialize the given definition It returns true on success It returns false and appends to Errors on failure Note that Run takes care of calling Execute on all definitions that implement Source This function is intended for use by definitions that run the DSL at declaration time rather than store the DSL for execution by the dsl usually simple independent definitions The DSL should use ReportError to record DSL execution errors func IncompatibleDSL go func IncompatibleDSLdslFunc string IncompatibleDSL should be called by DSL functions when they are invoked in an incorrect context eg Params in Resource func InvalidArgError go func InvalidArgErrorexpected string actual interface InvalidArgError records an invalid argument error It is used by DSL functions that take dynamic arguments func ReportError go func ReportErrorfm string vals interface ReportError records a DSL error for reporting post DSL execution func Run go func Run error Run runs the given root definitions It iterates over the definition sets multiple times to first execute the DSL the validate the resulting definitions and finally finalize them The executed DSL may append new roots to the Roots Design package variable to have them be executed last in the same run func TopLevelDefinition go func TopLevelDefinitionfailItNotTopLevel bool bool TopLevelDefinition returns true if the currently evaluated DSL is a root DSL ie is not being run in the context of another definition type Definition go type Definition interface Context is used to build error messages that refer to the definition Context string Definition is the common interface implemented by all definitions func CurrentDefinition go func CurrentDefinition Definition CurrentDefinition returns the definition whose initialization DSL is currently being executed type DefinitionSet go type DefinitionSet Definition DefinitionSet contains DSL definitions that are executed as one unit The slice elements may implement the Validate an Source interfaces to enable the corresponding behaviors during DSL execution type EnumValidationDefinition go type EnumValidationDefinition struct Values interface EnumValidationDefinition represents an enum validation as described at httpjsonschemaorglatestjsonschemavalidationhtmlanchor76 func EnumValidationDefinition Context go func v EnumValidationDefinition Context string Context returns the generic definition name used in error messages type Error go type Error struct GoError error File string Line int Error represents an error that occurred while running the API DSL It contains the name of the file and line number of where the error occurred as well as the original Go error func Error Error go func de Error Error res string Error returns the underlying error message type Finalize go type Finalize interface Definition Finalize is run by the DSL runner once the definition DSL has executed and the definition has been validated Finalize Finalize is the interface implemented by definitions that require an additional pass after the DSL has executed eg to merge generated definitions or initialize default values type FormatValidationDefinition go type FormatValidationDefinition struct Format string FormatValidationDefinition represents a format validation as described at httpjsonschemaorglatestjsonschemavalidationhtmlanchor104 func FormatValidationDefinition Context go func f FormatValidationDefinition Context string Context returns the generic definition name used in error messages type MaxLengthValidationDefinition go type MaxLengthValidationDefinition struct MaxLength int MaxLengthValidationDefinition represents an maximum length validation as described at httpjsonschemaorglatestjsonschemavalidationhtmlanchor26 func MaxLengthValidationDefinition Context go func m MaxLengthValidationDefinition Context string Context returns the generic definition name used in error messages type MaximumValidationDefinition go type MaximumValidationDefinition struct Max float64 MaximumValidationDefinition represents a maximum value validation as described at httpjsonschemaorglatestjsonschemavalidationhtmlanchor17 func MaximumValidationDefinition Context go func m MaximumValidationDefinition Context string Context returns the generic definition name used in error messages type MetadataDefinition go type MetadataDefinition mapstringstring MetadataDefinition is a set of keyvalue pairs type MinLengthValidationDefinition go type MinLengthValidationDefinition struct MinLength int MinLengthValidationDefinition represents an minimum length validation as described at httpjsonschemaorglatestjsonschemavalidationhtmlanchor29 func MinLengthValidationDefinition Context go func m MinLengthValidationDefinition Context string Context returns the generic definition name used in error messages type MinimumValidationDefinition go type MinimumValidationDefinition struct Min float64 MinimumValidationDefinition represents an minimum value validation as described at httpjsonschemaorglatestjsonschemavalidationhtmlanchor21 func MinimumValidationDefinition Context go func m MinimumValidationDefinition Context string Context returns the generic definition name used in error messages type MultiError go type MultiError Error MultiError collects all DSL errors It implements error go var Errors contains the DSL execution errors if any Errors MultiError Roots contains the root definition sets built by the DSLs DSL implementations should append to it to ensure the DSL gets executed by the runner Note that a root definition is a different concept from a top level definition ie a definition that is an entry point in the DSL In particular a root definition may include an arbitrary number of definition sets forming a tree of definitions For example the API DSL only has one root definition the API definition but many top level definitions API Version Type MediaType etc all defining a definition set Roots Root func MultiError Error go func m MultiError Error string Error returns the error message type PatternValidationDefinition go type PatternValidationDefinition struct Pattern string PatternValidationDefinition represents a pattern validation as described at httpjsonschemaorglatestjsonschemavalidationhtmlanchor33 func PatternValidationDefinition Context go func f PatternValidationDefinition Context string Context returns the generic definition name used in error messages type RequiredValidationDefinition go type RequiredValidationDefinition struct Names string RequiredValidationDefinition represents a required validation as described at httpjsonschemaorglatestjsonschemavalidationhtmlanchor61 func RequiredValidationDefinition Context go func r RequiredValidationDefinition Context string Context returns the generic definition name used in error messages type Root go type Root interface IterateSets calls the given iterator passing in each definition set sorted in execution order IterateSetsSetIterator Root is the interface implemented by the DSL root objects held by the Roots variable These objects contains all the definition sets created by the DSL and can be passed to the dsl for execution type SetIterator go type SetIterator funcs DefinitionSet error SetIterator is the function signature used to iterate over definition sets with IterateSets type Source go type Source interface Definition DSL returns the DSL used to initialize the definition if any DSL func Source is the interface implemented by definitions that can be initialized via DSL type TraitDefinition go type TraitDefinition struct Trait name Name string Trait DSL DSLFunc func TraitDefinition defines a set of reusable properties func TraitDefinition Context go func t TraitDefinition Context string Context returns the generic definition name used in error messages func TraitDefinition DSL go func t TraitDefinition DSL func DSL returns the initialization DSL type Validate go type Validate interface Definition Validate returns nil if the definition contains no validation error The Validate implementation may take advantage of ValidationErrors to report more than one errors at a time Validate error Validate is the interface implemented by definitions that can be validated Validation is done by the DSL dsl post execution type ValidationDefinition go type ValidationDefinition interface Definition ValidationDefinition is the common interface for all validation data structures It doesnt expose any method and simply exists to help with documentation type ValidationErrors go type ValidationErrors struct Errors error Definitions Definition ValidationErrors records the errors encountered when running Validate func ValidationErrors Add go func verr ValidationErrors Adddef Definition format string vals interface Add adds a validation error to the target Add flattens validation errors so that the recorded errors are never ValidationErrors themselves func ValidationErrors AsError go func verr ValidationErrors AsError ValidationErrors AsError returns an error if there are validation errors nil otherwise func ValidationErrors Error go func verr ValidationErrors Error string Error implements the error interface func ValidationErrors Merge go func verr ValidationErrors Mergeerr ValidationErrors Merge merges validation errors into the target type Versioned go type Versioned interface Definition Versions returns an array of supported versions if the object is versioned nil othewise Versions string SupportsVersion returns true if the object supports the given version SupportsVersionver string bool SupportsNoVersion returns true if the object is unversioned SupportsNoVersion bool Versioned is implemented by potentially versioned definitions such as API resources Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen/codegen","tags":["godoc","codegen"],"href":"/godoc/goa/goagen/codegen","content":" codegen import githubcomgoadesigngoagoagencodegen Package codegen contains common code used by all code generators Each subpackage corresponds to a code generator The meta subpackage is the generator generator it contains code that compiles and runs a specific generator tool that uses the user metadata Constants go const Version 001 Version of generator tools Variables go var OutputDir is the path to the directory the generated files should be written to OutputDir string DesignPackagePath is the path to the user Go design package DesignPackagePath string Debug toggles debug mode If debug mode is enabled then the generated files are not cleaned up upon failure Also logs additional debug information Set this flag to true prior to calling Generate Debug bool NoFormat causes goimports to be skipped when true NoFormat bool CommandName is the name of the command being run CommandName string go var DefaultFuncMap is the FuncMap used to initialize all source file templates DefaultFuncMap templateFuncMap add funca b int int return a b commandLine CommandLine comment Comment goify Goify gonative GoNativeType gopkgtypename GoPackageTypeName gopkgtyperef GoPackageTypeRef gotypedef GoTypeDef gotypename GoTypeName gotyperef GoTypeRef join stringsJoin mediaTypeMarshalerImpl MediaTypeMarshalerImpl recursiveValidate RecursiveChecker tabs Tabs tempvar Tempvar title stringsTitle toLower stringsToLower typeMarshaler MediaTypeMarshaler userTypeMarshalerImpl UserTypeMarshalerImpl validationChecker ValidationChecker versionPkg VersionPackage go var TempCount holds the value appended to variable names to make them unique TempCount int func AttributeMarshaler go func AttributeMarshaleratt designAttributeDefinition versioned bool defaultPkg string context source target string string AttributeMarshaler produces the Go code that initiliazes the variable named with the value of target which holds an interface with the content of the variable named with the value of source which contains an instance of the attribute type data structure The attribute view is used to render child attributes if there are any As with TypeMarshaler the code renders media type links and runs any validation defined on the type definition versioned indicates whether the code is being generated from a version package true or from the default package defaultPkg false The generated code assumes that there is a variable called err of type error that it can use to record errors func CommandLine go func CommandLine string CommandLine return the command used to run this process func Comment go func Commentelems string string Comment produces line comments by concatenating the given strings and producing 80 characters long lines starting with func GoNativeType go func GoNativeTypet designDataType string GoNativeType returns the Go builtin type from which instances of t can be initialized func GoPackageTypeName go func GoPackageTypeNamet designDataType required string versioned bool defPkg string tabs int string GoPackageTypeName returns the Go type name for a data type versioned indicates whether the type is being referenced from a version package true or the default package defPkg false required only applies when referring to a user type that is an object defined inline In this case the type Object does not carry the required field information defined in the parent anonymous attribute tabs is used to properly tabulate the object struct fields and only applies to this case func GoPackageTypeRef go func GoPackageTypeReft designDataType required string versioned bool defPkg string tabs int string GoPackageTypeRef returns the Go code that refers to the Go type which matches the given data type versioned indicates whether the type is being referenced from a version package true or the default package defPkg false required only applies when referring to a user type that is an object defined inline In this case the type Object does not carry the required field information defined in the parent anonymous attribute tabs is used to properly tabulate the object struct fields and only applies to this case func GoTypeDef go func GoTypeDefds designDataStructure versioned bool defPkg string tabs int jsonTags bool string GoTypeDef returns the Go code that defines a Go type which matches the data structure definition the part that comes after type foo versioned indicates whether the type is being referenced from a version package true or the default package false tabs is the number of tab characters used to tabulate the definition however the first line is never indented jsonTags controls whether to produce json tags func GoTypeName go func GoTypeNamet designDataType required string tabs int string GoTypeName returns the Go type name for a data type tabs is used to properly tabulate the object struct fields and only applies to this case This function assumes the type is in the same package as the code accessing it required only applies when referring to a user type that is an object defined inline In this case the type Object does not carry the required field information defined in the parent anonymous attribute func GoTypeRef go func GoTypeReft designDataType required string tabs int string GoTypeRef returns the Go code that refers to the Go type which matches the given data type the part that comes after var foo required only applies when referring to a user type that is an object defined inline In this case the type Object does not carry the required field information defined in the parent anonymous attribute tabs is used to properly tabulate the object struct fields and only applies to this case This function assumes the type is in the same package as the code accessing it func Goify go func Goifystr string firstUpper bool string Goify makes a valid Go identifier out of any string It does that by removing any non letter and non digit character and by making sure the first character is a letter or Goify produces a CamelCase version of the string if firstUpper is true the first character of the identifier is uppercase otherwise its lowercase func Indent go func Indents prefix string string Indent inserts prefix at the beginning of each nonempty line of s The endofline marker is NL func IndentBytes go func IndentBytesb prefix byte byte IndentBytes inserts prefix at the beginning of each nonempty line of b The endofline marker is NL func MediaTypeMarshaler go func MediaTypeMarshalermt designMediaTypeDefinition versioned bool defaultPkg context source target view string string MediaTypeMarshaler produces the Go code that initializes the variable named target which holds a an interface with the content of the variable named source which contains an instance of the media type data structure The code runs any validation defined on the media type definition Also view is used to know which fields to copy and which ones to omit and for fields that are media types which view to use to render it The rendering also takes care of following links The generated code assumes that there is a variable called err of type error that it can use to record errors versioned indicates whether the code is being generated from a version package true or from the default package defaultPkg false func MediaTypeMarshalerImpl go func MediaTypeMarshalerImplmt designMediaTypeDefinition versioned bool defaultPkg view string string MediaTypeMarshalerImpl returns the Go code for a function that marshals and validates instances of the given media type into raw values using the given view to render the attributes func PackageName go func PackageNamepath string string error PackageName returns the name of a package at the given path func PackagePath go func PackagePathpath string string error PackagePath returns the Go package path for the directory that lives under the given absolute file path func PackagePrefix go func PackagePrefixut designUserTypeDefinition versioned bool pkg string string PackagePrefix returns the package prefix to use to access ut from ver given it lives in the package pkg func PackageSourcePath go func PackageSourcePathpkg string string error PackageSourcePath returns the absolute path to the given package source func RecursiveChecker go func RecursiveCheckeratt designAttributeDefinition nonzero required bool target context string depth int string RecursiveChecker produces Go code that runs the validation checks recursively over the given attribute func RegisterFlags go func RegisterFlagsr FlagRegistry RegisterFlags registers the global flags func RunTemplate go func RunTemplatetmpl templateTemplate data interface string RunTemplate executs the given template with the given input and returns the rendered string func Tabs go func Tabsdepth int string Tabs returns a string made of depth tab characters func Tempvar go func Tempvar string Tempvar generates a unique variable name func TypeMarshaler go func TypeMarshalert designDataType versioned bool defaultPkg context source target string string TypeMarshaler produces the Go code that initializes the variable named target which is an interface with the content of the variable named source which contains an instance of the type data structure The code takes care of rendering media types according to the view defined on the attribute if any It also renders media type links Finally it validates the results using any type validation that is defined on the type attributes if the type contains attributes The generated code assumes that there is a variable called err of type error that it can use to record errors versioned indicates whether the code is being generated from a version package true or from the default package defaultPkg false func UserTypeMarshalerImpl go func UserTypeMarshalerImplu designUserTypeDefinition versioned bool defaultPkg string string UserTypeMarshalerImpl returns the Go code for a function that marshals and validates instances of the given user type into raw values using the given view to render the attributes func ValidationChecker go func ValidationCheckeratt designAttributeDefinition nonzero required bool target context string depth int string ValidationChecker produces Go code that runs the validation defined in the given attribute definition against the content of the variable named target recursively context is used to keep track of recursion to produce helpful error messages in case of type validation error The generated code assumes that there is a preexisting err variable of type error It initializes that variable in case a validation fails Note we do not want to recurse here recursion is done by the marshalerunmarshaler code func VersionPackage go func VersionPackageversion string string VersionPackage computes a given version package name v1 v1 V1 v1 1 v1 10 v1 if unique v1dot0 otherwise func WriteTabs go func WriteTabsbuf bytesBuffer count int WriteTabs is a helper function that writes count tabulation characters to buf type BaseCommand go type BaseCommand struct CmdName string CmdDescription string BaseCommand provides the basic logic for all commands It implements the Command interface Commands may then specialize to provide the specific Run behavior func NewBaseCommand go func NewBaseCommandname desc string BaseCommand NewBaseCommand instantiates a base command func BaseCommand Description go func b BaseCommand Description string Description returns the command description func BaseCommand Name go func b BaseCommand Name string Name returns the command name func BaseCommand RegisterFlags go func b BaseCommand RegisterFlagsr FlagRegistry RegisterFlags is a dummy implementation override in subcommand func BaseCommand Run go func b BaseCommand Run string error Run is a dummy implementation override in subcommand type Command go type Command interface Name of the command Name string Description returns the description used by the goa tool help Description string RegisterFlags initializes the given registry flags with all the flags relevant to this command RegisterFlagsr FlagRegistry Run generates the generator code then compiles and runs it It returns the list of generated files Run uses the variables initialized by the command line defined in RegisterFlags Run string error Command is the interface implemented by all generation goa commands There is one command per generation target ie app docs etc type FlagRegistry go type FlagRegistry interface Flags returns the command flag set Flags pflagFlagSet FlagRegistry is the interface implemented by cobraCommand to register flags type ImportSpec go type ImportSpec struct Name string Path string ImportSpec defines a generated import statement func NewImport go func NewImportname path string ImportSpec NewImport creates an import spec func SimpleImport go func SimpleImportpath string ImportSpec SimpleImport creates an import with no explicit path component func ImportSpec Code go func s ImportSpec Code string Code returns the Go import statement for the ImportSpec type Package go type Package struct Go Path of package Path string Workspace containing package Workspace Workspace Package represents a temporary Go package func PackageFor go func PackageForsource string Package error PackageFor returns the package for the given source file func Package Abs go func p Package Abs string Abs returns the absolute path to the package source directory func Package Compile go func p Package Compilebin string string error Compile compiles a package and returns the path to the compiled binary func Package CreateSourceFile go func p Package CreateSourceFilename string SourceFile CreateSourceFile creates a Go source file in the given package type SourceFile go type SourceFile struct Name of the source file Name string Package containing source file Package Package SourceFile represents a single Go source file func SourceFileFor go func SourceFileForpath string SourceFile error SourceFileFor returns a SourceFile for the file at the given path func SourceFile Abs go func f SourceFile Abs string Abs returne the source file absolute filename func SourceFile ExecuteTemplate go func f SourceFile ExecuteTemplatename source string funcMap templateFuncMap data interface error ExecuteTemplate executes the template and writes the output to the file func SourceFile FormatCode go func f SourceFile FormatCode error FormatCode runs goimports w on the source file func SourceFile Write go func f SourceFile Writeb byte int error Write implements ioWriter so that variables of type SourceFile can be used in templateExecute func SourceFile WriteHeader go func f SourceFile WriteHeadertitle pack string imports ImportSpec error WriteHeader writes the generic generated code header type Workspace go type Workspace struct Path is the absolute path to the workspace directory Path string contains filtered or unexported fields Workspace represents a temporary Go workspace func NewWorkspace go func NewWorkspaceprefix string Workspace error NewWorkspace returns a newly created temporary Go workspace Use Delete to delete the corresponding temporary directory when done func WorkspaceFor go func WorkspaceForsource string Workspace error WorkspaceFor returns the Go workspace for the given Go source file func Workspace Delete go func w Workspace Delete Delete deletes the workspace temporary directory func Workspace NewPackage go func w Workspace NewPackagegoPath string Package error NewPackage creates a new package in the workspace It deletes any preexisting package goPath is the go package path used to import the package func Workspace Reset go func w Workspace Reset error Reset removes all content from the workspace Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen/gen_app","tags":["godoc","gen_app"],"href":"/godoc/goa/goagen/gen_app","content":" genapp import githubcomgoadesigngoagoagengenapp Variables go var TargetPackage is the name of the generated Go package TargetPackage string go var WildcardRegex regexpMustCompile WildcardRegex is the regex used to capture path parameters func AppOutputDir go func AppOutputDir string AppOutputDir returns the directory containing the generated files func AppPackagePath go func AppPackagePath string error AppPackagePath returns the Go package path to the generated package func BuildEncoderMap go func BuildEncoderMapinfo designEncodingDefinition encoder bool mapstringEncoderTemplateData error BuildEncoderMap builds the template data needed to render the given encoding definitions This extra map is needed to handle the case where a single encoding definition maps to multiple encoding packages The data is indexed by encoder Go package path func Generate go func Generateapi designAPIDefinition files string err error Generate is the generator entry point called by the meta generator func MergeResponses go func MergeResponsesl r mapstringdesignResponseDefinition mapstringdesignResponseDefinition MergeResponses merge the response maps overriding the first argument map entries with the second argument map entries in case of collision type Command go type Command struct codegenBaseCommand Command is the goa application code generator command line data structure func NewCommand go func NewCommand Command NewCommand instantiates a new command func Command RegisterFlags go func c Command RegisterFlagsr codegenFlagRegistry RegisterFlags registers the command line flags with the given registry func Command Run go func c Command Run string error Run simply calls the meta generator type ContextTemplateData go type ContextTemplateData struct Name string eg ListBottleContext ResourceName string eg bottles ActionName string eg list Params designAttributeDefinition Payload designUserTypeDefinition Headers designAttributeDefinition Routes designRouteDefinition Responses mapstringdesignResponseDefinition API designAPIDefinition Version designAPIVersionDefinition DefaultPkg string ContextTemplateData contains all the information used by the template to render the context code for an action func ContextTemplateData IsPathParam go func c ContextTemplateData IsPathParamparam string bool IsPathParam returns true if the given parameter name corresponds to a path parameter for all the context action routes Such parameter is required but does not need to be validated as httprouter takes care of that func ContextTemplateData MustValidate go func c ContextTemplateData MustValidatename string bool MustValidate returns true if code that checks for the presence of the given param must be generated func ContextTemplateData Versioned go func c ContextTemplateData Versioned bool Versioned returns true if the context was built from an API version type ContextsWriter go type ContextsWriter struct codegenSourceFile CtxTmpl templateTemplate CtxNewTmpl templateTemplate CtxRespTmpl templateTemplate PayloadTmpl templateTemplate ContextsWriter generate codes for a goa application contexts func NewContextsWriter go func NewContextsWriterfilename string ContextsWriter error NewContextsWriter returns a contexts code writer Contexts provide the glue between the underlying request data and the user controller func ContextsWriter Execute go func w ContextsWriter Executedata ContextTemplateData error Execute writes the code for the context types to the writer type ControllerTemplateData go type ControllerTemplateData struct Resource string Lower case plural resource name eg bottles Actions mapstringinterface Array of actions each action has keys Name Routes Context and Unmarshal Version designAPIVersionDefinition Controller API version EncoderMap mapstringEncoderTemplateData Encoder data indexed by package path DecoderMap mapstringEncoderTemplateData Decoder data indexed by package path ControllerTemplateData contains the information required to generate an action handler type ControllersWriter go type ControllersWriter struct codegenSourceFile CtrlTmpl templateTemplate MountTmpl templateTemplate UnmarshalTmpl templateTemplate ControllersWriter generate code for a goa application handlers Handlers receive a HTTP request create the action context call the action code and send the resulting HTTP response func NewControllersWriter go func NewControllersWriterfilename string ControllersWriter error NewControllersWriter returns a handlers code writer Handlers provide the glue between the underlying request data and the user controller func ControllersWriter Execute go func w ControllersWriter Executedata ControllerTemplateData error Execute writes the handlers GoGenerator type EncoderTemplateData go type EncoderTemplateData struct PackagePath is the Go package path to the package implmenting the encoder decoder PackagePath string PackageName is the name of the Go package implementing the encoder decoder PackageName string Factory is the name of the package variable implementing the decoder encoder factory Factory string MIMETypes is the list of supported MIME types MIMETypes string Default is true if this encoder decoder should be set as the default Default bool EncoderTemplateData containes the data needed to render the registration code for a single encoder or decoder package type Generator go type Generator struct contains filtered or unexported fields Generator is the application code generator func Generator Cleanup go func g Generator Cleanup Cleanup removes the entire app directory if it was created by this generator func Generator Generate go func g Generator Generateapi designAPIDefinition string err error Generate the application code implement codegenGenerator type MediaTypeTemplateData go type MediaTypeTemplateData struct MediaType designMediaTypeDefinition Versioned bool DefaultPkg string MediaTypeTemplateData contains all the information used by the template to redner the media types code type MediaTypesWriter go type MediaTypesWriter struct codegenSourceFile MediaTypeTmpl templateTemplate MediaTypesWriter generate code for a goa application media types Media types are data structures used to render the response bodies func NewMediaTypesWriter go func NewMediaTypesWriterfilename string MediaTypesWriter error NewMediaTypesWriter returns a contexts code writer Media types contain the data used to render response bodies func MediaTypesWriter Execute go func w MediaTypesWriter Executedata MediaTypeTemplateData error Execute writes the code for the context types to the writer type ResourceData go type ResourceData struct Name string Name of resource Identifier string Identifier of resource media type Description string Description of resource Type designMediaTypeDefinition Type of resource media type CanonicalTemplate string CanonicalFormat represents the resource canonical path in the form of a fmtSprintf format CanonicalParams string CanonicalParams is the list of parameter names that appear in the resource canonical path in order ResourceData contains the information required to generate the resource GoGenerator type ResourcesWriter go type ResourcesWriter struct codegenSourceFile ResourceTmpl templateTemplate ResourcesWriter generate code for a goa application resources Resources are data structures initialized by the application handlers and passed to controller actions func NewResourcesWriter go func NewResourcesWriterfilename string ResourcesWriter error NewResourcesWriter returns a contexts code writer Resources provide the glue between the underlying request data and the user controller func ResourcesWriter Execute go func w ResourcesWriter Executedata ResourceData error Execute writes the code for the context types to the writer type UserTypeTemplateData go type UserTypeTemplateData struct UserType designUserTypeDefinition Versioned bool DefaultPkg string UserTypeTemplateData contains all the information used by the template to redner the media types code type UserTypesWriter go type UserTypesWriter struct codegenSourceFile UserTypeTmpl templateTemplate UserTypesWriter generate code for a goa application user types User types are data structures defined in the DSL with Type func NewUserTypesWriter go func NewUserTypesWriterfilename string UserTypesWriter error NewUserTypesWriter returns a contexts code writer User types contain custom data structured defined in the DSL with Type func UserTypesWriter Execute go func w UserTypesWriter Executedata UserTypeTemplateData error Execute writes the code for the context types to the writer Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen/gen_client","tags":["godoc","gen_client"],"href":"/godoc/goa/goagen/gen_client","content":" genclient import githubcomgoadesigngoagoagengenclient Package genclient provides a generator for the client tool and package of a goa application The generator creates a maingo file and a subpackge containing data structures specific to the service Variables go var Signers contains the names of the request signers supported by the client Signers string SignerPackages contains the Go package path to external packages containing custom signers SignerPackages string Version is the generated client version Version string func Generate go func Generateapi designAPIDefinition files string err error Generate is the generator entry point called by the meta generator type Command go type Command struct codegenBaseCommand Command is the goa application code generator command line data structure It implements metaCommand func NewCommand go func NewCommand Command NewCommand instantiates a new command func Command RegisterFlags go func c Command RegisterFlagsr codegenFlagRegistry RegisterFlags registers the command line flags with the given registry func Command Run go func c Command Run string error Run simply calls the meta generator type Generator go type Generator struct contains filtered or unexported fields Generator is the application code generator func Generator Cleanup go func g Generator Cleanup Cleanup removes all the files generated by this generator during the last invokation of Generate func Generator Generate go func g Generator Generateapi designAPIDefinition string err error Generate produces the skeleton main Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen/gen_gen","tags":["godoc","gen_gen"],"href":"/godoc/goa/goagen/gen_gen","content":" gengen import githubcomgoadesigngoagoagengengen Package gengen provides goagen with the ability to run user provided generators plugins How to Write a goagen Plugin The only requirement is that the package exposes a global Generate function with the following signature func Generateapi designAPIDefinition string error where api is the API definition computed from the design DSL On success Generate should return the path to the generated files On error the error message gets displayed to the user and goagen exist with status 1 The Generate method should take advantage of the APIDefinition IterateXXX methods to iterate through the API resources media types and types to guarantee that the order doesnt change between two invokation of the function thereby generating different output even if the design hasnt changed They may also take advantage of Metadata The goa design language allows defining Metadata on a number of definitions API Resource Action Response and Attribute which means Type and MediaType as well since these definitions are attributes A metadata field consists of a keyvalue pair where both are simple strings The generator can use these keyvalue pairs to produce different results see example below Metadata has no effect on the buitin generators The Output directory is available through the codegenOutputDir global variable Package genresnames is an example of a goagen plugin It creates a file namestxt containing the names of the API resources sorted in alphabetical order If a resource has a metadata pair with the key genresnamesname then the plugin uses the metadata value instead Invoke the plugin with goagen gen d pkgpath Source code package genresnames import ioioutil os pathfilepath strings gopkginalecthomaskingpinv2 githubcomgoadesigngoadesign githubcomgoadesigngoagoagencodegen Generate is the function called by goagen to generate the names file func Generateapi designAPIDefinition string error Make sure to parse the common flags so that codegenOutputDir gets properly initialized app kingpinNewResource names Resource name generator codegenRegisterFlagsapp if err appParseosArgs1 err nil panicerr Now iterate through the resources to gather their names names makestring lenapiResources i 0 apiIterateResourcesfuncres designResourceDefinition error if n ok resMetadatagenresnamesname ok namesi n else namesi resName i return nil content stringsJoinnames n Write the output file and return its name outputFile filepathJoincodegenOutputDir namestxt ioutilWriteFileoutputFile bytecontent 0644 return stringoutputFile nil Variables go var GenPkgPath contains the path to the third party generator Go package GenPkgPath string GenPkgName contains the name of the third party generator Go package GenPkgName string type Command go type Command struct codegenBaseCommand Command is the goa generic generator command line data structure It implements metaCommand func NewCommand go func NewCommand Command NewCommand instantiates a new command func Command RegisterFlags go func c Command RegisterFlagsr codegenFlagRegistry RegisterFlags registers the command line flags with the given registry func Command Run go func c Command Run string error Run simply calls the meta generator Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen/gen_js","tags":["godoc","gen_js"],"href":"/godoc/goa/goagen/gen_js","content":" genjs import githubcomgoadesigngoagoagengenjs Package genjs provides a goa generator for a javascript client module The module exposes functions for calling the API actions It relies on the axios httpsgithubcommzabriskieaxios javascript library to perform the actual HTTP requests The generator also produces an example controller and index HTML that shows how to use the module The controller simply serves all the files under the js directory so that loading js in a browser triggers the example code Variables go var Timeout is the request timeout before it gets aborted Timeout timeDuration Scheme is the URL scheme used to make requests to the API Scheme string Host is the API hostname Host string func Generate go func Generateapi designAPIDefinition files string err error Generate is the generator entry point called by the meta generator type Command go type Command struct codegenBaseCommand Command is the goa application code generator command line data structure It implements metaCommand func NewCommand go func NewCommand Command NewCommand instantiates a new command func Command RegisterFlags go func c Command RegisterFlagsr codegenFlagRegistry RegisterFlags registers the command line flags with the given registry func Command Run go func c Command Run string error Run simply calls the meta generator type Generator go type Generator struct contains filtered or unexported fields Generator is the application code generator func Generator Cleanup go func g Generator Cleanup Cleanup removes all the files generated by this generator during the last invokation of Generate func Generator Generate go func g Generator Generateapi designAPIDefinition string err error Generate produces the skeleton main Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen/gen_main","tags":["godoc","gen_main"],"href":"/godoc/goa/goagen/gen_main","content":" genmain import githubcomgoadesigngoagoagengenmain Package genmain provides a generator for a skeleton goa application This generator generates the code for a basic main package and is mainly intended as a way to bootstrap new applications The generator creates a maingo file and one file per resource listed in the API metadata If a file already exists it skips its creation unless the flag force is provided on the command line in which case it overrides the content of existing files Variables go var AppName is the name of the generated application AppName string TargetPackage is the name of the generated Go package TargetPackage string Force is true if preexisting files should be overwritten during generation Force bool func Generate go func Generateapi designAPIDefinition files string err error Generate is the generator entry point called by the meta generator type Command go type Command struct codegenBaseCommand Command is the goa application code generator command line data structure It implements metaCommand func NewCommand go func NewCommand Command NewCommand instantiates a new command func Command RegisterFlags go func c Command RegisterFlagsr codegenFlagRegistry RegisterFlags registers the command line flags with the given registry func Command Run go func c Command Run string error Run simply calls the meta generator type Generator go type Generator struct contains filtered or unexported fields Generator is the application code generator func Generator Cleanup go func g Generator Cleanup Cleanup removes all the files generated by this generator during the last invokation of Generate func Generator Generate go func g Generator Generateapi designAPIDefinition string err error Generate produces the skeleton main Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen/gen_schema","tags":["godoc","gen_schema"],"href":"/godoc/goa/goagen/gen_schema","content":" genschema import githubcomgoadesigngoagoagengenschema Package genschema provides a generator for the JSON schema controller The schema controller responds to GET schema requests with the API JSON Hyperschema This JSON schema can be used to generate API documentation ruby and Go API clients See the blog post httpsblogherokucomarchives201418jsonschemaforherokuplatformapi describing how Heroku leverages the JSON Hyperschema standard httpjsonschemaorglatestjsonschemahypermediahtml for more information Constants go const SchemaRef httpjsonschemaorgdraft04hyperschema SchemaRef is the JSON Hyperschema standard href Variables go var Definitions contains the generated JSON schema definitions Definitions mapstringJSONSchema go var ServiceURL string ServiceURL is used to build the JSON schema ID of the root document func Generate go func Generateapi designAPIDefinition files string err error Generate is the generator entry point called by the meta generator func GenerateMediaTypeDefinition go func GenerateMediaTypeDefinitionapi designAPIDefinition mt designMediaTypeDefinition GenerateMediaTypeDefinition produces the JSON schema corresponding to the given media type func GenerateResourceDefinition go func GenerateResourceDefinitionapi designAPIDefinition r designResourceDefinition GenerateResourceDefinition produces the JSON schema corresponding to the given API resource It stores the results in cachedSchema func GenerateTypeDefinition go func GenerateTypeDefinitionapi designAPIDefinition ut designUserTypeDefinition GenerateTypeDefinition produces the JSON schema corresponding to the given type func JSONSchemaDir go func JSONSchemaDir string JSONSchemaDir is the path to the directory where the schema controller is generated func MediaTypeRef go func MediaTypeRefapi designAPIDefinition mt designMediaTypeDefinition string MediaTypeRef produces the JSON reference to the media type definition func TypeRef go func TypeRefapi designAPIDefinition ut designUserTypeDefinition string TypeRef produces the JSON reference to the type definition type Command go type Command struct codegenBaseCommand Command is the goa application code generator command line data structure It implements metaCommand func NewCommand go func NewCommand Command NewCommand instantiates a new command func Command RegisterFlags go func c Command RegisterFlagsr codegenFlagRegistry RegisterFlags registers the command line flags with the given registry func Command Run go func c Command Run string error Run simply calls the meta generator type Generator go type Generator struct contains filtered or unexported fields Generator is the application code generator func Generator Cleanup go func g Generator Cleanup Cleanup removes all the files generated by this generator during the last invokation of Generate func Generator Generate go func g Generator Generateapi designAPIDefinition string err error Generate produces the skeleton main type JSONLink go type JSONLink struct Title string jsontitleomitempty Description string jsondescriptionomitempty Rel string jsonrelomitempty Href string jsonhrefomitempty Method string jsonmethodomitempty Schema JSONSchema jsonschemaomitempty TargetSchema JSONSchema jsontargetSchemaomitempty MediaType string jsonmediaTypeomitempty EncType string jsonencTypeomitempty JSONLink represents a link field in a JSON hyper schema type JSONMedia go type JSONMedia struct BinaryEncoding string jsonbinaryEncodingomitempty Type string jsontypeomitempty JSONMedia represents a media field in a JSON hyper schema type JSONSchema go type JSONSchema struct Schema string jsonschemaomitempty Core schema ID string jsonidomitempty Title string jsontitleomitempty Type JSONType jsontypeomitempty Items JSONSchema jsonitemsomitempty Properties mapstringJSONSchema jsonpropertiesomitempty Definitions mapstringJSONSchema jsondefinitionsomitempty Description string jsondescriptionomitempty DefaultValue interface jsondefaultValueomitempty Hyper schema Media JSONMedia jsonmediaomitempty ReadOnly bool jsonreadOnlyomitempty PathStart string jsonpathStartomitempty Links JSONLink jsonlinksomitempty Ref string jsonrefomitempty Validation Enum interface jsonenumomitempty Format string jsonformatomitempty Pattern string jsonpatternomitempty Minimum float64 jsonminimumomitempty Maximum float64 jsonmaximumomitempty MinLength int jsonminLengthomitempty MaxLength int jsonmaxLengthomitempty Required string jsonrequiredomitempty AdditionalProperties bool jsonadditionalPropertiesomitempty Union AnyOf JSONSchema jsonanyOfomitempty JSONSchema represents an instance of a JSON schema See httpjsonschemaorgdocumentationhtml func APISchema go func APISchemaapi designAPIDefinition JSONSchema APISchema produces the API JSON hyper schema func NewJSONSchema go func NewJSONSchema JSONSchema NewJSONSchema instantiates a new JSON schema func TypeSchema go func TypeSchemaapi designAPIDefinition t designDataType JSONSchema TypeSchema produces the JSON schema corresponding to the given data type func JSONSchema Dup go func s JSONSchema Dup JSONSchema Dup creates a shallow clone of the given schema func JSONSchema JSON go func s JSONSchema JSON byte error JSON serializes the schema into JSON It makes sure the schema standard field is set if needed prior to delegating to the standard JSON marshaler func JSONSchema Merge go func s JSONSchema Mergeother JSONSchema Merge does a two level deep merge of other into s type JSONType go type JSONType string JSONType is the JSON type enum go const JSONArray represents a JSON array JSONArray JSONType array JSONBoolean represents a JSON boolean JSONBoolean boolean JSONInteger represents a JSON number without a fraction or exponent part JSONInteger integer JSONNumber represents any JSON number Number includes integer JSONNumber number JSONNull represents the JSON null value JSONNull null JSONObject represents a JSON object JSONObject object JSONString represents a JSON string JSONString string Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen/gen_swagger","tags":["godoc","gen_swagger"],"href":"/godoc/goa/goagen/gen_swagger","content":" genswagger import githubcomgoadesigngoagoagengenswagger Package genswagger provides a generator for the JSON swagger controller The swagger controller responds to GET swagger requests with the API JSON Hyperswagger This JSON swagger can be used to generate API documentation ruby and Go API clients See the blog post httpsblogherokucomarchives201418jsonswaggerforherokuplatformapi describing how Heroku leverages the JSON Hyperswagger standard httpjsonswaggerorglatestjsonswaggerhypermediahtml for more information func Generate go func Generateapi designAPIDefinition files string err error Generate is the generator entry point called by the meta generator type Command go type Command struct codegenBaseCommand Command is the goa application code generator command line data structure It implements metaCommand func NewCommand go func NewCommand Command NewCommand instantiates a new command func Command Run go func c Command Run string error Run simply calls the meta generator type ExternalDocs go type ExternalDocs struct Description is a short description of the target documentation GFM syntax can be used for rich text representation Description string jsondescriptionomitempty URL for the target documentation URL string jsonurl ExternalDocs allows referencing an external resource for extended documentation type Generator go type Generator struct Generator is the swagger code generator func Generator Generate go func g Generator Generateapi designAPIDefinition string err error Generate produces the skeleton main type Header go type Header struct Description isa brief description of the parameter GFM syntax can be used for rich text representation Description string jsondescriptionomitempty Type of the header it is limited to simple types that is not an object Type string jsontypeomitempty Format is the extending format for the previously mentioned type Format string jsonformatomitempty Items describes the type of items in the array if type is array Items Items jsonitemsomitempty CollectionFormat determines the format of the array if type array is used Possible values are csv ssv tsv pipes and multi CollectionFormat string jsoncollectionFormatomitempty Default declares the value of the parameter that the server will use if none is provided for example a count to control the number of results per page might default to 100 if not supplied by the client in the request Default interface jsondefaultomitempty Maximum float64 jsonmaximumomitempty ExclusiveMaximum bool jsonexclusiveMaximumomitempty Minimum float64 jsonminimumomitempty ExclusiveMinimum bool jsonexclusiveMinimumomitempty MaxLength int jsonmaxLengthomitempty MinLength int jsonminLengthomitempty Pattern string jsonpatternomitempty MaxItems int jsonmaxItemsomitempty MinItems int jsonminItemsomitempty UniqueItems bool jsonuniqueItemsomitempty Enum interface jsonenumomitempty MultipleOf float64 jsonmultipleOfomitempty Header represents a header parameter type Info go type Info struct Title string jsontitleomitempty Description string jsondescriptionomitempty TermsOfService string jsontermsOfServiceomitempty Contact designContactDefinition jsoncontactomitempty License designLicenseDefinition jsonlicenseomitempty Version string jsonversion Info provides metadata about the API The metadata can be used by the clients if needed and can be presented in the SwaggerUI for convenience type Items go type Items struct Type of the items it is limited to simple types that is not an object Type string jsontypeomitempty Format is the extending format for the previously mentioned type Format string jsonformatomitempty Items describes the type of items in the array if type is array Items Items jsonitemsomitempty CollectionFormat determines the format of the array if type array is used Possible values are csv ssv tsv pipes and multi CollectionFormat string jsoncollectionFormatomitempty Default declares the value of the parameter that the server will use if none is provided for example a count to control the number of results per page might default to 100 if not supplied by the client in the request Default interface jsondefaultomitempty Maximum float64 jsonmaximumomitempty ExclusiveMaximum bool jsonexclusiveMaximumomitempty Minimum float64 jsonminimumomitempty ExclusiveMinimum bool jsonexclusiveMinimumomitempty MaxLength int jsonmaxLengthomitempty MinLength int jsonminLengthomitempty Pattern string jsonpatternomitempty MaxItems int jsonmaxItemsomitempty MinItems int jsonminItemsomitempty UniqueItems bool jsonuniqueItemsomitempty Enum interface jsonenumomitempty MultipleOf float64 jsonmultipleOfomitempty Items is a limited subset of JSONSchemas items object It is used by parameter definitions that are not located in body type Operation go type Operation struct Tags is a list of tags for API documentation control Tags can be used for logical grouping of operations by resources or any other qualifier Tags string jsontagsomitempty Summary is a short summary of what the operation does For maximum readability in the swaggerui this field should be less than 120 characters Summary string jsonsummaryomitempty Description is a verbose explanation of the operation behavior GFM syntax can be used for rich text representation Description string jsondescriptionomitempty ExternalDocs points to additional external documentation for this operation ExternalDocs ExternalDocs jsonexternalDocsomitempty OperationID is a unique string used to identify the operation OperationID string jsonoperationIdomitempty Consumes is a list of MIME types the operation can consume Consumes string jsonconsumesomitempty Produces is a list of MIME types the operation can produce Produces string jsonproducesomitempty Parameters is a list of parameters that are applicable for this operation Parameters Parameter jsonparametersomitempty Responses is the list of possible responses as they are returned from executing this operation Responses mapstringResponse jsonresponsesomitempty Schemes is the transfer protocol for the operation Schemes string jsonschemesomitempty Deprecated declares this operation to be deprecated Deprecated bool jsondeprecatedomitempty Secury is a declaration of which security schemes are applied for this operation Security mapstringstring jsonsecurityomitempty Operation describes a single API operation on a path type Parameter go type Parameter struct Name of the parameter Parameter names are case sensitive Name string jsonname In is the location of the parameter Possible values are query header path formData or body In string jsonin Description isa brief description of the parameter GFM syntax can be used for rich text representation Description string jsondescriptionomitempty Required determines whether this parameter is mandatory Required bool jsonrequired Schema genschemaJSONSchema jsonschemaomitempty Type of the parameter Since the parameter is not located at the request body it is limited to simple types that is not an object Type string jsontypeomitempty Format is the extending format for the previously mentioned type Format string jsonformatomitempty AllowEmptyValue sets the ability to pass emptyvalued parameters This is valid only for either query or formData parameters and allows you to send a parameter with a name only or an empty value Default value is false AllowEmptyValue bool jsonallowEmptyValueomitempty Items describes the type of items in the array if type is array Items Items jsonitemsomitempty CollectionFormat determines the format of the array if type array is used Possible values are csv ssv tsv pipes and multi CollectionFormat string jsoncollectionFormatomitempty Default declares the value of the parameter that the server will use if none is provided for example a count to control the number of results per page might default to 100 if not supplied by the client in the request Default interface jsondefaultomitempty Maximum float64 jsonmaximumomitempty ExclusiveMaximum bool jsonexclusiveMaximumomitempty Minimum float64 jsonminimumomitempty ExclusiveMinimum bool jsonexclusiveMinimumomitempty MaxLength int jsonmaxLengthomitempty MinLength int jsonminLengthomitempty Pattern string jsonpatternomitempty MaxItems int jsonmaxItemsomitempty MinItems int jsonminItemsomitempty UniqueItems bool jsonuniqueItemsomitempty Enum interface jsonenumomitempty MultipleOf float64 jsonmultipleOfomitempty Parameter describes a single operation parameter type Path go type Path struct Ref allows for an external definition of this path item Ref string jsonrefomitempty Get defines a GET operation on this path Get Operation jsongetomitempty Put defines a PUT operation on this path Put Operation jsonputomitempty Post defines a POST operation on this path Post Operation jsonpostomitempty Delete defines a DELETE operation on this path Delete Operation jsondeleteomitempty Options defines a OPTIONS operation on this path Options Operation jsonoptionsomitempty Head defines a HEAD operation on this path Head Operation jsonheadomitempty Patch defines a PATCH operation on this path Patch Operation jsonpatchomitempty Parameters is the list of parameters that are applicable for all the operations described under this path Parameters Parameter jsonparametersomitempty Path holds the relative paths to the individual endpoints type Response go type Response struct Description of the response GFM syntax can be used for rich text representation Description string jsondescriptionomitempty Schema is a definition of the response structure It can be a primitive an array or an object If this field does not exist it means no content is returned as part of the response As an extension to the Schema Object its root type value may also be file Schema genschemaJSONSchema jsonschemaomitempty Headers is a list of headers that are sent with the response Headers mapstringHeader jsonheadersomitempty Ref references a global API response This field is exclusive with the other fields of Response Ref string jsonrefomitempty Response describes an operation response type Scope go type Scope struct Description for scope Description string jsondescriptionomitempty Scope corresponds to an available scope for an OAuth2 security scheme type SecurityDefinition go type SecurityDefinition struct Type of the security scheme Valid values are basic apiKey or oauth2 Type string jsontype Description for security scheme Description string jsondescriptionomitempty Name of the header or query parameter to be used when type is apiKey Name string jsonnameomitempty In is the location of the API key when type is apiKey Valid values are query or header In string jsonin Flow is the flow used by the OAuth2 security scheme when type is oauth2 Valid values are implicit password application or accessCode Flow string jsonflowomitempty The oauth2 authorization URL to be used for this flow AuthorizationURL string jsonauthorizationUrlomitempty TokenURL is the token URL to be used for this flow TokenURL string jsontokenUrlomitempty Scopes list the available scopes for the OAuth2 security scheme Scopes mapstringScope jsonscopesomitempty SecurityDefinition allows the definition of a security scheme that can be used by the operations Supported schemes are basic authentication an API key either as a header or as a query parameter and OAuth2s common flows implicit password application and access code type Swagger go type Swagger struct Swagger string jsonswaggeromitempty Info Info jsoninfoomitempty Host string jsonhostomitempty BasePath string jsonbasePathomitempty Schemes string jsonschemesomitempty Consumes string jsonconsumesomitempty Produces string jsonproducesomitempty Paths mapstringPath jsonpaths Definitions mapstringgenschemaJSONSchema jsondefinitionsomitempty Parameters mapstringParameter jsonparametersomitempty Responses mapstringResponse jsonresponsesomitempty SecurityDefinitions mapstringSecurityDefinition jsonsecurityDefinitionsomitempty Security mapstringstring jsonsecurityomitempty Tags Tag jsontagsomitempty ExternalDocs ExternalDocs jsonexternalDocsomitempty Swagger represents an instance of a swagger object See httpsswaggeriospecification func New go func Newapi designAPIDefinition Swagger error New creates a Swagger spec from an API definition type Tag go type Tag struct Name of the tag Name string jsonnameomitempty Description is a short description of the tag GFM syntax can be used for rich text representation Description string jsondescriptionomitempty ExternalDocs is additional external documentation for this tag ExternalDocs ExternalDocs jsonexternalDocsomitempty Tag allows adding meta data to a single tag that is used by the Operation Object It is not mandatory to have a Tag Object per tag used there Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen/meta","tags":["godoc","meta"],"href":"/godoc/goa/goagen/meta","content":" meta import githubcomgoadesigngoagoagenmeta Package meta is used to bootstrap the code generator That is it contains code which generates Go code that gets compiled together with the user design package The result of that compilation is a tool which generates the final code or documentation consumed by the enduser type Generator go type Generator struct Genfunc contains the name of the generator entry point function The function signature must be func api designAPIDefinition string error where api contains the DSL generated metadata and the returned string array lists the generated filenames Genfunc string Imports list the imports that are specific for that generator that should be added to the main Go file Imports codegenImportSpec Flags is the list of flags to be used when invoking the final generator on the command line Flags mapstringstring Generator generates the code of compiles and runs generators This extra step is necessary to compile in the end user design package so that generator code can iterate through it func NewGenerator go func NewGeneratorgenfunc string imports codegenImportSpec flags mapstringstring Generator NewGenerator returns a meta generator that can run an actual Generator given its factory method and command line flags func Generator Generate go func m Generator Generate string error Generate compiles and runs the generator and returns the generated filenames Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen/utils","tags":["godoc","utils"],"href":"/godoc/goa/goagen/utils","content":" utils import githubcomgoadesigngoagoagenutils func Catch go func Catchsignals osSignal then func Catch signals and invoke then callback Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa/goagen","tags":["godoc","goagen"],"href":"/godoc/goa/goagen","content":" goagen Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"goa","tags":["godoc","goa"],"href":"/godoc/goa","content":" goa import githubcomgoadesigngoa Package goa provides the runtime support for goa web services See also httpgoadesign package design httpsgodocorggithubcomgoadesigngoadesign package dsl httpsgodocorggithubcomgoadesigngoadesigndsl Code Generation goa service development begins with writing the design of a service The design is described using the goa language implemented by the githubcomgoadesigngoadesigndsl package The goagen tool consumes the metadata produced from executing the design language to generate service specific code that glues the underlying HTTP server with action specific code and data structures The goa package contains supporting functionality for the generated code including basic request and response state management through the Context data structure error handling via the service and controller ErrorHandler field middleware support via the Middleware data structure as well as input and output format validation algorithms Request Context The Context data structure provides access to both the request and response state It implements the golangorgxnetContext interface so that deadlines and cancelation signals may also be implemented with it The request state is accessible through the Get GetMany and Payload methods which return the values of the request parameters query strings and request body Action specific contexts wrap Context and expose properly typed fields corresponding to the request parameters and body data structure descriptions appearing in the design The response state can be accessed through the ResponseStatus ResponseLength and Header methods The Context type implements the httpResponseWriter interface and thus action contexts can be used in places httpResponseWriter can Action contexts provide action specific helper methods that write the responses as described in the design optionally taking an instance of the media type for responses that contain a body Here is an example showing an update action corresponding to following design extract Resourcebottle func DefaultMediaBottle Actionupdate func Paramsfunc ParambottleID Integer PayloadUpdateBottlePayload ResponseOK ResponseNotFound The action signature generated by goagen is type BottleController interface goaController UpdateUpdateBottleContext error where UpdateBottleContext is type UpdateBottleContext struct goaContext BottleID int Payload UpdateBottlePayload and implements func ctx UpdateBottleContext OKresp Bottle error func ctx UpdateBottleContext NotFound error The definitions of the Bottle and UpdateBottlePayload data structures are ommitted for brievity Controllers There is one controller interface generated per resource defined via the design language The interface exposes the controller actions as well as methods to set controller specific middleware and error handlers see below User code must provide data structures that implement these interfaces when mounting a controller onto a service The controller data structure should include an anonymous field of type goaApplicationController which takes care of implementing the middleware and error handler handling Error Handling The controller action methods generated by goagen such as the Update method of the BottleController interface shown above all return an error value The controller or servicewide error handler if no controller specific error handler function is invoked whenever the value returned by a controller action is not nil The handler gets both the request context and the error as argument The default handler implementation returns a response with status code 500 containing the error message in the body A different error handler can be specificied using the SetErrorHandler function on either a controller or service wide goa comes with an alternative error handler the TerseErrorHandler which also returns a response with status 500 but does not write the error message to the body of the response Middleware A goa middleware is a function that takes and returns a Handler A Handler is a the low level function which handles incoming HTTP requests goagen generates the handlers code so each handler creates the action specific context and calls the controller action with it Middleware can be added to a goa service or a specific controller using the Service type Use method goa comes with a few stock middleware that handle common needs such as logging panic recovery or using the RequestID header to trace requests across multiple services Validation The goa design language documented in the dsl package makes it possible to attach validations to data structure definitions One specific type of validation consists of defining the format that a data structure string field must follow Example of formats include email data time hostnames etc The ValidateFormat function provides the implementation for the format validation invoked from the code generated by goagen Package goa standardizes on structured error responses a request that fails because of invalid input or unexpected condition produces a response that contains one or more structured errors Each error object has three keys a id number a title and a message The title for a given id is always the same the intent is to provide a human friendly categorization The message is specific to the error occurrence and provides additional details that often include contextual information name of parameters etc The basic data structure backing errors is TypedError which simply contains the id and message Multiple errors not just TypedError instances can be encapsulated in a MultiError Both TypedError and MultiError implement the error interface the Error methods return valid JSON that can be written directly to a response body The code generated by goagen calls the helper functions exposed in this file when it encounters invalid data wrong type validation errors etc such as InvalidParamTypeError InvalidAttributeTypeError etc These methods take and return an error which is a MultiError that gets built over time The final MultiError object then gets serialized into the response and sent back to the client The response status code is inferred from the type wrapping the error object a BadRequestError produces a 400 status code while any other error produce a 500 This behavior can be overridden by setting a custom ErrorHandler in the application Constants go const ErrInvalidParamType is the error produced by the generated code when a request parameter type does not match the design ErrInvalidParamType iota 1 ErrMissingParam is the error produced by the generated code when a required request parameter is missing ErrMissingParam ErrInvalidAttributeType is the error produced by the generated code when a data structure attribute type does not match the design definition ErrInvalidAttributeType ErrMissingAttribute is the error produced by the generated code when a data structure attribute required by the design definition is missing ErrMissingAttribute ErrInvalidEnumValue is the error produced by the generated code when a values does not match one of the values listed in the attribute definition as being valid ie not part of the enum ErrInvalidEnumValue ErrMissingHeader is the error produced by the generated code when a required header is missing ErrMissingHeader ErrInvalidFormat is the error produced by the generated code when a value does not match the format specified in the attribute definition ErrInvalidFormat ErrInvalidPattern is the error produced by the generated code when a value does not match the regular expression specified in the attribute definition ErrInvalidPattern ErrInvalidRange is the error produced by the generated code when a value is less than the minimum specified in the design definition or more than the maximum ErrInvalidRange ErrInvalidLength is the error produced by the generated code when a value is a slice with less elements than the minimum length specified in the design definition or more elements than the maximum length ErrInvalidLength ErrInvalidVersion is the error rendered by the default mux when a request specifies an invalid version ErrInvalidVersion Variables go var Log is the global logger from which other loggers eg request specific loggers are derived Configure it by setting its handler prior to calling New See httpsgodocorggithubcominconshreveablelog15 Log logLogger RootContext is the root context from which all request contexts are derived Set values in the root context prior to starting the server to make these values available to all request handlers goaRootContext goaRootContextWithValuekey value RootContext contextContext go var InterruptSignals osSignal osSignalsyscallSIGINT osSignalsyscallSIGTERM osSignalsyscallSIGQUIT InterruptSignals is the list of signals that initiate graceful shutdown Note that only SIGINT is supported on Windows so this list should be overridden by the caller when running on that platform func Cancel go func Cancel Cancel sends a cancellation signal to all handlers through the action context see httpsgodocorggolangorgxnetcontext for details on how to handle the signal func DefaultErrorHandler go func DefaultErrorHandlerctx Context e error DefaultErrorHandler returns a 400 response for request validation errors instances of BadRequestError and a 500 response for other errors It writes the error message to the response body in both cases func DefaultMissingVersionHandler go func DefaultMissingVersionHandlerctx Context version string DefaultMissingVersionHandler returns a 400 response with a typed error in the body containing the name of the version that was targeted by the request func Fatal go func Fatalmsg string ctx interface Fatal logs a critical message and exits the process with status code 1 This function is meant to be used by initialization code to prevent the application from even starting up when something is obviously wrong In particular this function should probably not be used when serving requests func InvalidAttributeTypeError go func InvalidAttributeTypeErrorctx string val interface expected string err error error InvalidAttributeTypeError appends a typed error of id ErrIncompatibleType to err and returns it func InvalidEnumValueError go func InvalidEnumValueErrorctx string val interface allowed interface err error error InvalidEnumValueError appends a typed error of id ErrInvalidEnumValue to err and returns it func InvalidFormatError go func InvalidFormatErrorctx target string format Format formatError err error error InvalidFormatError appends a typed error of id ErrInvalidFormat to err and returns it func InvalidLengthError go func InvalidLengthErrorctx string target interface ln value int min bool err error error InvalidLengthError appends a typed error of id ErrInvalidLength to err and returns it func InvalidParamTypeError go func InvalidParamTypeErrorname string val interface expected string err error error InvalidParamTypeError appends a typed error of id ErrInvalidParamType to err and returns it func InvalidPatternError go func InvalidPatternErrorctx target string pattern string err error error InvalidPatternError appends a typed error of id ErrInvalidPattern to err and returns it func InvalidRangeError go func InvalidRangeErrorctx string target interface value int min bool err error error InvalidRangeError appends a typed error of id ErrInvalidRange to err and returns it func MissingAttributeError go func MissingAttributeErrorctx name string err error error MissingAttributeError appends a typed error of id ErrMissingAttribute to err and returns it func MissingHeaderError go func MissingHeaderErrorname string err error error MissingHeaderError appends a typed error of id ErrMissingHeader to err and returns it func MissingParamError go func MissingParamErrorname string err error error MissingParamError appends a typed error of id ErrMissingParam to err and returns it func ReportError go func ReportErrorerr error err2 error error ReportError coerces the first argument into a MultiError then appends the second argument and returns the resulting MultiError func TerseErrorHandler go func TerseErrorHandlerctx Context e error TerseErrorHandler behaves like DefaultErrorHandler except that it does not write to the response body for internal errors func ValidateFormat go func ValidateFormatf Format val string error ValidateFormat validates a string against a standard format It returns nil if the string conforms to the format an error otherwise The format specification follows the json schema draft 4 validation extension see httpjsonschemaorglatestjsonschemavalidationhtmlanchor105 Supported formats are datetime RFC3339 date time value email RFC5322 email address hostname RFC1035 Internet host name ipv4 and ipv6 RFC2673 and RFC2373 IP address values uri RFC3986 URI value mac IEEE 802 MAC48 EUI48 or EUI64 MAC address value cidr RFC4632 and RFC4291 CIDR notation IP address value regexp Regular expression syntax accepted by RE2 func ValidatePattern go func ValidatePatternp string val string bool ValidatePattern returns an error if val does not match the regular expression p It makes an effort to minimize the number of times the regular expression needs to be compiled type Application go type Application struct logLogger Application logger contains filtered or unexported fields Application represents a goa application At the basic level an application consists of a set of controllers each implementing a given resource actions goagen generates global functions one per resource that make it possible to mount the corresponding controller onto an application An application contains the middleware logger and error handler shared by all its controllers Setting up an application might look like api goaNewmy api apiUseSomeMiddleware rc NewResourceController rcUseSomeOtherMiddleware appMountResourceControllerapi rc apiListenAndServe80 where NewResourceController returns an object that implements the resource actions as defined by the corresponding interface generated by goagen func Application Decode go func ver Application Decodev interface body ioReader contentType string error Decode uses registered Decoders to unmarshal a body based on the contentType func Application DecodeRequest go func ver Application DecodeRequestctx Context v interface error DecodeRequest retrives the request body and ContentType header and uses Decode to unmarshal into the provided interface func Application EncodeResponse go func ver Application EncodeResponsectx Context v interface error EncodeResponse uses registered Encoders to marshal the response body based on the request Accept header and writes it to the httpResponseWriter func Application ErrorHandler go func app Application ErrorHandler ErrorHandler ErrorHandler returns the currently set error handler func Application ListenAndServe go func app Application ListenAndServeaddr string error ListenAndServe starts a HTTP server and sets up a listener on the given hostport func Application ListenAndServeTLS go func app Application ListenAndServeTLSaddr certFile keyFile string error ListenAndServeTLS starts a HTTPS server and sets up a listener on the given hostport func Application Name go func app Application Name string Name returns the application name func Application NewController go func app Application NewControllerresName string Controller NewController returns a controller for the given resource This method is mainly intended for use by the generated code User code shouldnt have to call it directly func Application ServeFiles go func app Application ServeFilespath filename string error ServeFiles replies to the request with the contents of the named file or directory The logic for what to do when the filename points to a file vs a directory is the same as the standard http package ServeFile function The path may end with a wildcard that matches the rest of the URL eg filepath If it does the matching path is appended to filename to form the full file path so ServeFilesindexhtml wwwdataindexhtml Returns the content of the file wwwdataindexhtml when requests are sent to indexhtml and ServeFilesassetsfilepath wwwdataassets returns the content of the file wwwdataassetsxyz when requests are sent to assetsxyz func Application ServeMux go func app Application ServeMux ServeMux ServeMux returns the top level service mux func Application SetDecoder go func ver Application SetDecoderf DecoderFactory makeDefault bool contentTypes string SetDecoder sets a specific decoder to be used for the specified content types If a decoder is already registered it will be overwritten func Application SetEncoder go func ver Application SetEncoderf EncoderFactory makeDefault bool contentTypes string SetEncoder sets a specific encoder to be used for the specified content types If an encoder is already registered it will be overwritten func Application SetErrorHandler go func app Application SetErrorHandlerhandler ErrorHandler SetErrorHandler defines an application wide error handler The default error handler DefaultErrorHandler responds with a 500 status code and the error message in the response body TerseErrorHandler provides an alternative implementation that does not write the error message to the response body for internal errors eg for production Set it with SetErrorHandlerTerseErrorHandler Controller specific error handlers should be set using the Controller type SetErrorHandler method instead func Application SetMissingVersionHandler go func app Application SetMissingVersionHandlerhandler MissingVersionHandler SetMissingVersionHandler registers the service missing version handler func Application Use go func app Application Usem Middleware Use adds a middleware to the application wide middleware chain See NewMiddleware for wrapping goa and http handlers into goa middleware goa comes with a set of commonly used middleware see middlewarego Controller specific middleware should be mounted using the Controller type Use method instead func Application Version go func app Application Versionname string ServiceVersion Version returns an object that implements ServiceVersion based on the version name If there is no version registered it will instantiate a new version func Application VersionName go func ver Application VersionName string VersionName returns the version name type ApplicationController go type ApplicationController struct logLogger Controller logger contains filtered or unexported fields ApplicationController provides the common state and behavior for generated controllers func ApplicationController ErrorHandler go func ctrl ApplicationController ErrorHandler ErrorHandler ErrorHandler returns the currently set error handler func ApplicationController HandleError go func ctrl ApplicationController HandleErrorctx Context err error HandleError invokes the controller error handler or if there isnt one the service error handler func ApplicationController HandleFunc go func ctrl ApplicationController HandleFuncname string h d Handler HandleFunc HandleFunc wraps al request handler into a HandleFunc The HandleFunc initializes the request context by loading the request state invokes the handler and in case of error invokes the controller if there is one or application error handler This function is intended for the controller generated code User code should not need to call it directly func ApplicationController MiddlewareChain go func ctrl ApplicationController MiddlewareChain Middleware MiddlewareChain returns the controller middleware chain func ApplicationController SetErrorHandler go func ctrl ApplicationController SetErrorHandlerhandler ErrorHandler SetErrorHandler defines a controller specific error handler When a controller action returns an error goa checks whether the controller is equipped with a error handler and if so calls it with the error given as argument If there is no controller error handler then goa calls the application wide error handler instead func ApplicationController Use go func ctrl ApplicationController Usem Middleware Use adds a middleware to the controller See NewMiddleware for wrapping goa and http handlers into goa middleware goa comes with a set of commonly used middleware see middlewarego type BadRequestError go type BadRequestError struct Actual error BadRequestError is the type of errors that result in a response with status code 400 func NewBadRequestError go func NewBadRequestErrorerr error BadRequestError NewBadRequestError wraps the given error into a BadRequestError func BadRequestError Error go func b BadRequestError Error string Error implements error type BasicSigner go type BasicSigner struct Username is the basic auth user Username string Password is err guess what the basic auth password Password string BasicSigner implements basic auth func BasicSigner RegisterFlags go func s BasicSigner RegisterFlagsapp cobraCommand RegisterFlags adds the user and pass flags to the client tool func BasicSigner Sign go func s BasicSigner Signreq httpRequest error Sign adds the basic auth header to the request type Client go type Client struct Logger is the logger used to log client requests log15Logger Client is the underlying http client httpClient Signers contains the ordered list of request signers A signer may add headers cookies etc to a request generally to perform auth Signers Signer Scheme is the HTTP scheme used to make requests to the API host Scheme string Host is the service hostname Host string UserAgent is the user agent set in requests made by the client UserAgent string Dump indicates whether to dump request response Dump bool Client is the command client data structure for all goa service clients func NewClient go func NewClient Client NewClient create a new API client func Client Do go func c Client Doreq httpRequest httpResponse error Do wraps the underlying http client Do method and adds logging type Context go type Context struct contextContext Underlying context logLogger Context logger Context is the object that provides access to the underlying HTTP request and response state Context implements httpResponseWriter and also provides helper methods for writing HTTP responses It also implements the contextContext interface described at httpbloggolangorgcontext func NewContext go func NewContextgctx contextContext service Service req httpRequest rw httpResponseWriter params urlValues Context NewContext builds a goa context from the given contextContext and request state If gctx is nil then contextBackground is used instead func Context AllParams go func ctx Context AllParams urlValues AllParams return all URL and querystring parameters func Context BadRequest go func ctx Context BadRequesterr BadRequestError error BadRequest sends a HTTP response with status code 400 and the given error as body func Context Bug go func ctx Context Bugformat string a interface error Bug sends a HTTP response with status code 500 and the given body The body can be set using a format and substituted values a la fmtPrintf func Context Get go func ctx Context Getname string string Get returns the param or querystring value with the given name func Context GetMany go func ctx Context GetManyname string string GetMany returns the querystring values with the given name or nil if there arent any func Context GetNames go func ctx Context GetNames string GetNames returns all the querystring and URL parameter names func Context Header go func ctx Context Header httpHeader Header returns the response header It implements the httpResponseWriter interface func Context RawPayload go func ctx Context RawPayload interface RawPayload returns the deserialized request body or nil if body is empty func Context Request go func ctx Context Request httpRequest Request returns the underlying HTTP request func Context Respond go func ctx Context Respondcode int body interface error Respond serializes the given body matching the request Accept header against the service encoders It uses the default service encoder if no match is found func Context RespondBytes go func ctx Context RespondBytescode int body byte error RespondBytes writes the given HTTP status code and response body This method should only be called once per request func Context ResponseLength go func ctx Context ResponseLength int ResponseLength returns the response body length in bytes if the response was written to the context via one of the response methods Respond JSON BadRequest Bug 0 otherwise func Context ResponseStatus go func ctx Context ResponseStatus int ResponseStatus returns the response status if it was set via one of the context response methods Respond JSON BadRequest Bug 0 otherwise func Context ResponseWritten go func ctx Context ResponseWritten bool ResponseWritten returns true if an HTTP response was written func Context Service go func ctx Context Service Service Service returns the underlying service func Context SetPayload go func ctx Context SetPayloadpayload interface SetPayload initializes the unmarshaled request body value func Context SetResponseWriter go func ctx Context SetResponseWriterrw httpResponseWriter httpResponseWriter SetResponseWriter overrides the context underlying response writer It returns the response writer that was previously set func Context SetValue go func ctx Context SetValuekey val interface SetValue sets the value associated with key in the context The value can be retrieved using the Value method Note that this changes the underlying contextContext object and thus clients holding a reference to that wont be able to access the new value Its probably a bad idea to hold a reference to the inner context anyway func Context Write go func ctx Context Writebody byte int error Write writes the HTTP response body It implements the httpResponseWriter interface func Context WriteHeader go func ctx Context WriteHeadercode int WriteHeader writes the HTTP status code to the response It implements the httpResponseWriter interface type Controller go type Controller interface logLogger Use adds a middleware to the controller middleware chain It is a convenient method for doing appendctrlMiddlewareChain m UseMiddleware MiddlewareChain returns the controller middleware chain including the servicewide middleware MiddlewareChain Middleware ErrorHandler returns the currently set error handler ErrorHandler ErrorHandler SetErrorHandler sets the controller specific error handler SetErrorHandlerErrorHandler HandleFunc returns a HandleFunc from the given handler name is used solely for logging HandleFuncname string h d Handler HandleFunc Controller is the interface implemented by all goa controllers A controller implements a given resource actions There is a onetoone relationship between designed resources and generated controllers Controllers may override the service wide error handler and be equipped with controller specific middleware type DecodeFunc go type DecodeFunc funcContext ioReadCloser interface error DecodeFunc is the function that initialize the unmarshaled payload from the request body type Decoder go type Decoder interface Decodev interface error A Decoder unmarshals an ioReader into an interface type DecoderFactory go type DecoderFactory interface NewDecoderr ioReader Decoder A DecoderFactory generates custom decoders func GobDecoderFactory go func GobDecoderFactory DecoderFactory GobDecoderFactory returns a struct that can generate new gobDecoders func JSONDecoderFactory go func JSONDecoderFactory DecoderFactory JSONDecoderFactory returns a struct that can generate new jsonDecoders func XMLDecoderFactory go func XMLDecoderFactory DecoderFactory XMLDecoderFactory returns a struct that can generate new xmlDecoders type DefaultMux go type DefaultMux struct SelectVersionFunc SelectVersionFunc contains filtered or unexported fields DefaultMux is the default goa mux It dispatches requests to the appropriate version mux using a SelectVersionFunc The default func is DefaultVersionFunc change it with SelectVersion func DefaultMux Handle go func m DefaultMux Handlemethod path string handle HandleFunc Handle sets the handler for the given verb and path func DefaultMux Lookup go func m DefaultMux Lookupmethod path string HandleFunc Lookup returns the HandleFunc associated with the given method and path func DefaultMux SelectVersion go func m DefaultMux SelectVersionsv SelectVersionFunc SelectVersion sets the func used to compute the API version targetted by a request func DefaultMux ServeHTTP go func m DefaultMux ServeHTTPrw httpResponseWriter req httpRequest ServeHTTP is the function called back by the underlying HTTP server to handle incoming requests type Encoder go type Encoder interface Encodev interface error An Encoder marshals from an interface into an ioWriter type EncoderFactory go type EncoderFactory interface NewEncoderw ioWriter Encoder A EncoderFactory generates custom encoders func GobEncoderFactory go func GobEncoderFactory EncoderFactory GobEncoderFactory returns a struct that can generate new gobEncoders func JSONEncoderFactory go func JSONEncoderFactory EncoderFactory JSONEncoderFactory returns a struct that can generate new jsonEncoders func XMLEncoderFactory go func XMLEncoderFactory EncoderFactory XMLEncoderFactory returns a struct that can generate new xmlEncoders type Encoding go type Encoding interface DecodeRequest uses registered Decoders to unmarshal the request body based on the request ContentType header DecodeRequestctx Context v interface error EncodeResponse uses registered Encoders to marshal the response body based on the request Accept header and writes the result to the httpResponseWriter EncodeResponsectx Context v interface error SetDecoder registers a decoder for the given content types If makeDefault is true then the decoder is used to decode payloads where none of the registered decoders support the request content type SetDecoderf DecoderFactory makeDefault bool contentTypes string SetEncoder registers an encoder for the given content types If makeDefault is true then the encoder is used to encode bodies where none of the registered encoders match the request Accept header SetEncoderf EncoderFactory makeDefault bool contentTypes string Encoding contains the encoding and decoding support type ErrorHandler go type ErrorHandler funcContext error ErrorHandler defines the application error handler signature type ErrorID go type ErrorID int ErrorID is an enum listing the possible types of errors func ErrorID Title go func k ErrorID Title string Title returns a human friendly error title type Format go type Format string Format defines a validation format go const FormatDateTime defines RFC3339 date time values FormatDateTime Format datetime FormatEmail defines RFC5322 email addresses FormatEmail email FormatHostname defines RFC1035 Internet host names FormatHostname hostname FormatIPv4 defines RFC2373 IPv4 address values FormatIPv4 ipv4 FormatIPv6 defines RFC2373 IPv6 address values FormatIPv6 ipv6 FormatURI defines RFC3986 URI values FormatURI uri FormatMAC defines IEEE 802 MAC48 EUI48 or EUI64 MAC address values FormatMAC mac FormatCIDR defines RFC4632 and RFC4291 CIDR notation IP address values FormatCIDR cidr FormatRegexp Regexp defines regular expression syntax accepted by RE2 FormatRegexp regexp type GracefulApplication go type GracefulApplication struct Application syncMutex Interrupted is true if the application is in the process of shutting down Interrupted bool CancelOnShutdown tells whether existing requests should be canceled when shutdown is triggered true or whether to wait until the requests complete false CancelOnShutdown bool contains filtered or unexported fields GracefulApplication is a goa application using a graceful shutdown server When sending any of the signals listed in InterruptSignals to the process GracefulApplication disables keepalive connections closes the listening socket allowing another process to listen on that port immediately calls Cancel signaling all active handlers func GracefulApplication Decode go func ver GracefulApplication Decodev interface body ioReader contentType string error Decode uses registered Decoders to unmarshal a body based on the contentType func GracefulApplication DecodeRequest go func ver GracefulApplication DecodeRequestctx Context v interface error DecodeRequest retrives the request body and ContentType header and uses Decode to unmarshal into the provided interface func GracefulApplication EncodeResponse go func ver GracefulApplication EncodeResponsectx Context v interface error EncodeResponse uses registered Encoders to marshal the response body based on the request Accept header and writes it to the httpResponseWriter func GracefulApplication ListenAndServe go func gapp GracefulApplication ListenAndServeaddr string error ListenAndServe starts the HTTP server and sets up a listener on the given hostport func GracefulApplication ListenAndServeTLS go func gapp GracefulApplication ListenAndServeTLSaddr certFile keyFile string error ListenAndServeTLS starts a HTTPS server and sets up a listener on the given hostport func GracefulApplication SetDecoder go func ver GracefulApplication SetDecoderf DecoderFactory makeDefault bool contentTypes string SetDecoder sets a specific decoder to be used for the specified content types If a decoder is already registered it will be overwritten func GracefulApplication SetEncoder go func ver GracefulApplication SetEncoderf EncoderFactory makeDefault bool contentTypes string SetEncoder sets a specific encoder to be used for the specified content types If an encoder is already registered it will be overwritten func GracefulApplication Shutdown go func gapp GracefulApplication Shutdown bool Shutdown initiates graceful shutdown of the running server once Returns true on initial shutdown and false if already shutting down func GracefulApplication VersionName go func ver GracefulApplication VersionName string VersionName returns the version name type HandleFunc go type HandleFunc funchttpResponseWriter httpRequest urlValues HandleFunc provides the implementation for an API endpoint The values include both the querystring and path parameter values type Handler go type Handler funcContext error Handler defines the controller handler signatures Controller handlers accept a context and return an error The context provides typed access to the request and response state It implements the golangorgxnetcontext package Context interface so that handlers may define deadlines and cancelation signals see the Timeout middleware as an example If a controller handler returns an error then the application error handler is invoked with the request context and the error The error handler is responsible for writing the HTTP response See DefaultErrorHandler and TerseErrorHandler type JWTSigner go type JWTSigner struct Header is the name of the HTTP header which contains the JWT The default is Authentication Header string Format represents the format used to render the JWT The default is Bearer s Format string contains filtered or unexported fields JWTSigner implements JSON Web Token auth func JWTSigner RegisterFlags go func s JWTSigner RegisterFlagsapp cobraCommand RegisterFlags adds the jwt flag to the client tool func JWTSigner Sign go func s JWTSigner Signreq httpRequest error Sign adds the JWT auth header type Middleware go type Middleware funcHandler Handler Middleware represents the canonical goa middleware signature func NewMiddleware go func NewMiddlewarem interface mw Middleware err error NewMiddleware creates a middleware from the given argument The allowed types for the argument are a goa middleware goaMiddleware or funcgoaHandler goaHandler a goa handler goaHandler or funcgoaContext error an http middleware funchttpHandler httpHandler or an http handler httpHandler or funchttpResponseWriter httpRequest An error is returned if the given argument is not one of the types above type MissingVersionHandler go type MissingVersionHandler funcContext string MissingVersionHandler defines the function that handles requests targetting a non existant API version type MultiError go type MultiError error MultiError records multiple errors func MultiError Error go func m MultiError Error string Error summarizes all the underlying error messages in one JSON array type OAuth2Signer go type OAuth2Signer struct RefreshURLFormat is a format that generates the refresh access token URL given a refresh token RefreshURLFormat string RefreshToken contains the OAuth2 refresh token from which access tokens are created RefreshToken string contains filtered or unexported fields OAuth2Signer enables the use of OAuth2 refresh tokens It takes care of creating access tokens given a refresh token and a refresh URL as defined in RFC 6749 Note that this signer does not concern itself with generating the initial refresh token this has to be done prior to using the client Also it assumes the response of the refresh request response is JSON encoded and of the form accesstoken2YotnFZFEjr1zCsicMWpAA expiresin3600 refreshtokentGzv3JOkF0XG5Qx2TlKWIA where the expiresin and refreshtoken properties are optional and additional properties are ignored If the response contains a expiresin property then the signer takes care of making refresh requests prior to the token expiration func OAuth2Signer Refresh go func s OAuth2Signer Refresh error Refresh makes a OAuth2 refresh access token request func OAuth2Signer RegisterFlags go func s OAuth2Signer RegisterFlagsapp cobraCommand RegisterFlags adds the refreshURL and refreshToken flags to the client tool func OAuth2Signer Sign go func s OAuth2Signer Signreq httpRequest error Sign refreshes the access token if needed and adds the OAuth header type ResettableDecoder go type ResettableDecoder interface Decoder Resetr ioReader The ResettableDecoder is used to determine whether or not a Decoder can be reset and thus safely reused in a syncPool type ResettableEncoder go type ResettableEncoder interface Encoder Resetw ioWriter The ResettableEncoder is used to determine whether or not a Encoder can be reset and thus safely reused in a syncPool type SelectVersionFunc go type SelectVersionFunc funchttpRequest string SelectVersionFunc is used by the default goa mux to compute the API version targetted by a given request The default implementation looks for a version as path prefix Alternate implementations can be set using the DefaultMux SelectVersion method func CombineSelectVersionFunc go func CombineSelectVersionFuncfuncs SelectVersionFunc SelectVersionFunc CombineSelectVersionFunc returns a SelectVersionFunc that tries each func passed as argument in order and returns the first nonempty string version func HeaderSelectVersionFunc go func HeaderSelectVersionFuncheader string SelectVersionFunc HeaderSelectVersionFunc returns a SelectVersionFunc that looks for the version in the header with the given name func PathSelectVersionFunc go func PathSelectVersionFuncpattern zeroVersion string SelectVersionFunc PathSelectVersionFunc returns a SelectVersionFunc that uses the given path pattern to extract the version from the request path Use the same path pattern given in the DSL to define the API base path eg apiversion If the pattern matches zeroVersion then the empty version is returned ie the unversioned controller handles the request func QuerySelectVersionFunc go func QuerySelectVersionFuncquery string SelectVersionFunc QuerySelectVersionFunc returns a SelectVersionFunc that looks for the version in the querystring with the given key type ServeMux go type ServeMux interface httpHandler Handle sets the HandleFunc for a given HTTP method and path Handlemethod path string handle HandleFunc Lookup returns the HandleFunc associated with the given HTTP method and path Lookupmethod path string HandleFunc ServeMux is the interface implemented by the service request muxes There is one instance of ServeMux per service version and one for requests targetting no version It implements httpHandler and makes it possible to register request handlers for specific HTTP methods and request path via the Handle method func NewMux go func NewMuxapp Application ServeMux NewMux returns the default service mux implementation type Service go type Service interface Logging methods configure the log handler using the Logger global variable logLogger Encoding manages the service decoders and encoders Encoding Name is the name of the goa application Name string Use adds a middleware to the servicewide middleware chain Usem Middleware ErrorHandler returns the currently set error handler useful for middleware ErrorHandler ErrorHandler SetErrorHandler registers the servicewide error handler SetErrorHandlerErrorHandler SetMissingVersionHandler registers the handler invoked when a request targets a non existant API version SetMissingVersionHandlerMissingVersionHandler ServeMux returns the service mux ServeMux ServeMux ListenAndServe starts a HTTP server on the given port ListenAndServeaddr string error ListenAndServeTLS starts a HTTPS server on the given port ListenAndServeTLSadd certFile keyFile string error ServeFiles replies to the request with the contents of the named file or directory The logic for what to do when the filename points to a file vs a directory is the same as the standard http package ServeFile function The path may end with a wildcard that matches the rest of the URL eg filepath If it does the matching path is appended to filename to form the full file path so ServeFilesindexhtml wwwdataindexhtml Returns the content of the file wwwdataindexhtml when requests are sent to indexhtml and ServeFilesassetsfilepath wwwdataassets returns the content of the file wwwdataassetsxyz when requests are sent to assetsxyz ServeFilespath filename string error Version returns an object that implements ServiceVersion based on the version name If there is no version registered it will instantiate a new version Versionname string ServiceVersion Decode uses registered Decoders to unmarshal a body based on the contentType Decodev interface body ioReader contentType string error NewController returns a controller for the resource with the given name This method is mainly intended for use by generated code NewControllerresName string Controller Service is the interface implemented by all goa services It provides methods for configuring a service and running it func New go func Newname string Service New instantiates an application with the given name and default decodersencoders func NewGraceful go func NewGracefulname string cancelOnShutdown bool Service NewGraceful returns a goa application that uses a graceful shutdown server type ServiceVersion go type ServiceVersion interface Encoding manages the version decoders and encoders Encoding VersionName returns the version name VersionName string ServeMux returns the version request mux ServeMux ServeMux ServiceVersion is the interface for interacting with individual service versions type Signer go type Signer interface Sign adds required headers cookies etc SignhttpRequest error RegisterFlags registers the command line flags that defines the values used to initialize the signer RegisterFlagscmd cobraCommand Signer is the common interface implemented by all signers type TypedError go type TypedError struct ID ErrorID Mesg string TypedError describes an error that can be returned in a HTTP response func TypedError Error go func t TypedError Error string Error builds an error message from the typed error details func TypedError MarshalJSON go func t TypedError MarshalJSON byte error MarshalJSON implements the json marshaler interface Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"gorma/dsl","tags":["godoc","dsl"],"href":"/godoc/gorma/dsl","content":" dsl import githubcomgoadesigngormadsl Package dsl uses the Goa DSL engine to generate a data storage layer for your Goa API Using a few DSL definitions you can extend the Goa API to include database persistence An example var sg StorageGroupMyStorageGroup func DescriptionThis is the global storage group Storemysql gormaMySQL func DescriptionThis is the mysql relational store ModelBottle func BuiltFromBottlePayload RenderToBottle DescriptionThis is the bottle model FieldID gormaPKInteger func DescriptionThis is the ID PK field FieldVintage gormaInteger func SQLTagindex FieldCreatedAt gormaTimestamp func FieldUpdatedAt gormaTimestamp func FieldDeletedAt gormaNullableTimestamp func Gorma uses Gorm httpsgithubcomjinzhugorm for database access Gorm was chosen as the best of the lightORM libraries available for Go It does the mundane work and allows you to do anything manually if you choose The base Gorma definition is a StorageGroup which represents all the storage needs for an application A StorageGroup will contain one or more Store which represends a database or other persistence mechanism Gorma supports all the databases that Gorm supports and it is possible in the future to support others like KeyValue stores Every Store will have one or more Model which maps a Go structure to a table in the database Use the BuiltFrom and RenderTo DSL to tell the model which Goa types will be the payload input and return types A Model will contain one or more fields Gorma will use the BuiltFrom definition to populate a base set of fields Custom DSL is provided to add additional fields Each table will likely want a primary key To add one to your Model create a Field definition with a type of gormaPKInteger or gormaPKBigInteger Gorma will support UUID primary keys at some point in the future FieldID gormaPKInteger func DescriptionThis is the ID PK field Gorma generates all the helpers you need to translate to and from the Goa types media types and payloads This makes wiring up your Goa controllers almost too easy to be considered programming func Alias go func Aliasd string Alias overrides the name of the SQL stores table or field func BelongsTo go func BelongsToparent string BelongsTo signifies a relationship between this model and a Parent The Parent has the child and the Child belongs to the Parent Usage BelongsToUser func BuiltFrom go func BuiltFrombf interface BuiltFrom informs Gorma that this model will be populated from a Goa payload User Type Conversion functions will be generated to convert from the payload to the model Usage BuiltFromSomeGoaPayload func Cached go func Cachedd string Cached caches the models for duration seconds func Description go func Descriptiond string Description sets the definition description Description can be called inside StorageGroup RelationalStore RelationalModel RelationalField func DynamicTableName go func DynamicTableName DynamicTableName sets a boolean flag that causes the generator to generate function definitions in the database models that specify the name of the database table Useful when using multiple tables with different names but same schema eg Users AdminUsers func Field go func Fieldname string args interface Field is a DSL definition for a field in a Relational Model TODO Examples and more docs here later Parameter Options FieldTitle FieldTitle gormaString FieldTitle func other field level dsl FieldTitle gormaString func other field level dsl func HasMany go func HasManyname child string HasMany signifies a relationship between this model and a set of Children The Parent has the children and the Children belong to the Parent The first parameter becomes the name of the field in the model struct the second parameter is the name of the child model The Child model will have a ParentID field appended to the field list The Parent model definition will use the first parameter as the field name in the struct definition Usage HasManyOrders Order Struct field definition Children Child func HasOne go func HasOnechild string HasOne signifies a relationship between this model and another model If this model HasOneOtherModel then OtherModel is expected to have a ThisModelID field as a Foreign Key to this models Primary Key ThisModel will have a field named OtherModel of type OtherModel Usage HasOneProposal func ManyToMany go func ManyToManyother tablename string ManyToMany creates a join table to store the intersection relationship between this model and another model For example in retail an Order can contain many products and a product can belong to many orders To express this relationship use the following syntax ModelOrder func ManyToManyProduct orderlines This specifies that the Order and Product tables have a junction table called orderlines that contains the order and product information The generated model will have a field called Products that will be an array of type productProduct func Model go func Modelname string dsl func Model is the DSL that represents a Relational Model Model name should be Title cased Use RenderTo and BuiltFrom to have Gorma generate conversion helpers for your model Gorma will create appropriate fields for all of your database relationships too using the BelongsTo HasMany HasOne and ManyToMany DSL func NoAutomaticIDFields go func NoAutomaticIDFields NoAutomaticIDFields applies to a Store type It allows you to turn off the default behavior that will automatically create an IDint Primary Key for each model func NoAutomaticSoftDelete go func NoAutomaticSoftDelete NoAutomaticSoftDelete applies to a Store type It allows you to turn off the default behavior that will automatically create a DeletedAt field timeTime that acts as a softdelete filter for your models func NoAutomaticTimestamps go func NoAutomaticTimestamps NoAutomaticTimestamps applies to a Store type It allows you to turn off the default behavior that will automatically create an CreatedAt and UpdatedAt fields for each model func RenderTo go func RenderTort interface RenderTo informs Gorma that this model will need to be rendered to a Goa type Conversion functions will be generated to convert tofrom the model Usage RenderToSomeGoaMediaType func Roler go func Roler Roler sets a boolean flag that cause the generation of a Role function that returns the models Role value Requires a field in the model named Role type String func SQLTag go func SQLTagd string SQLTag sets the models struct tag sql value for indexing and other purposes func SanitizeDBFieldName go func SanitizeDBFieldNamename string string SanitizeDBFieldName is exported for testing purposes func SanitizeFieldName go func SanitizeFieldNamename string string SanitizeFieldName is exported for testing purposes func StorageGroup go func StorageGroupname string dsli func gormaStorageGroupDefinition StorageGroup implements the top level Gorma DSL There should be one StorageGroup per Goa application func Store go func Storename string storeType gormaRelationalStorageType dsl func Store represents a database Gorma lets you specify a database type but its currently not used for any generation logic Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"gorma/example/app","tags":["godoc","app"],"href":"/godoc/gorma/example/app","content":" app import githubcomgoadesigngormaexampleapp func AccountHref go func AccountHrefaccountID interface string AccountHref returns the resource href func BottleHref go func BottleHrefaccountID bottleID interface string BottleHref returns the resource href func MarshalAccount go func MarshalAccountsource Account inErr error target mapstringinterface err error MarshalAccount validates and renders an instance of Account into a interface using view default func MarshalAccountLink go func MarshalAccountLinksource Account inErr error target mapstringinterface err error MarshalAccountLink validates and renders an instance of Account into a interface using view link func MarshalAccountTiny go func MarshalAccountTinysource Account inErr error target mapstringinterface err error MarshalAccountTiny validates and renders an instance of Account into a interface using view tiny func MarshalBottle go func MarshalBottlesource Bottle inErr error target mapstringinterface err error MarshalBottle validates and renders an instance of Bottle into a interface using view default func MarshalBottleCollection go func MarshalBottleCollectionsource BottleCollection inErr error target mapstringinterface err error MarshalBottleCollection validates and renders an instance of BottleCollection into a interface using view default func MarshalBottleCollectionTiny go func MarshalBottleCollectionTinysource BottleCollection inErr error target mapstringinterface err error MarshalBottleCollectionTiny validates and renders an instance of BottleCollection into a interface using view tiny func MarshalBottleFull go func MarshalBottleFullsource Bottle inErr error target mapstringinterface err error MarshalBottleFull validates and renders an instance of Bottle into a interface using view full func MarshalBottlePayload go func MarshalBottlePayloadsource BottlePayload inErr error target mapstringinterface err error MarshalBottlePayload validates and renders an instance of BottlePayload into a interface func MarshalBottleTiny go func MarshalBottleTinysource Bottle inErr error target mapstringinterface err error MarshalBottleTiny validates and renders an instance of Bottle into a interface using view tiny func MountAccountController go func MountAccountControllerservice goaService ctrl AccountController MountAccountController mounts a Account resource controller on the given service func MountBottleController go func MountBottleControllerservice goaService ctrl BottleController MountBottleController mounts a Bottle resource controller on the given service type Account go type Account struct Date of creation CreatedAt string jsoncreatedatomitempty Email of account owner CreatedBy string jsoncreatedbyomitempty API href of account Href string jsonhref ID of account ID int jsonid Name of account Name string jsonname A tenant account Identifier applicationvndaccountjson func Account Dump go func mt Account Dumpview AccountViewEnum res mapstringinterface err error Dump produces raw data from an instance of Account running all the validations See LoadAccount for the definition of raw data func Account Validate go func mt Account Validate err error Validate validates the media type instance type AccountController go type AccountController interface goaController CreateCreateAccountContext error DeleteDeleteAccountContext error ShowShowAccountContext error UpdateUpdateAccountContext error AccountController is the controller interface for the Account actions type AccountViewEnum go type AccountViewEnum string Account views go const Account default view AccountDefaultView AccountViewEnum default Account link view AccountLinkView AccountViewEnum link Account tiny view AccountTinyView AccountViewEnum tiny type Bottle go type Bottle struct Account that owns bottle Account Account jsonaccountomitempty Color string jsoncolor Country string jsoncountryomitempty Date of creation CreatedAt string jsoncreatedatomitempty API href of bottle Href string jsonhref ID of bottle ID int jsonid Name string jsonname Rating of bottle between 1 and 5 Rating int jsonratingomitempty Region string jsonregionomitempty Review string jsonreviewomitempty Sweetness int jsonsweetnessomitempty Date of last update UpdatedAt string jsonupdatedatomitempty Varietal string jsonvarietal Vineyard string jsonvineyard Vintage string jsonvintage VinyardCounty string jsonvinyardcountyomitempty A bottle of wine Identifier applicationvndbottlejson func Bottle Dump go func mt Bottle Dumpview BottleViewEnum res mapstringinterface err error Dump produces raw data from an instance of Bottle running all the validations See LoadBottle for the definition of raw data func Bottle Validate go func mt Bottle Validate err error Validate validates the media type instance type BottleCollection go type BottleCollection Bottle BottleCollection media type Identifier applicationvndbottlejson typecollection func BottleCollection Dump go func mt BottleCollection Dumpview BottleCollectionViewEnum res mapstringinterface err error Dump produces raw data from an instance of BottleCollection running all the validations See LoadBottleCollection for the definition of raw data func BottleCollection Validate go func mt BottleCollection Validate err error Validate validates the media type instance type BottleCollectionViewEnum go type BottleCollectionViewEnum string BottleCollection views go const BottleCollection default view BottleCollectionDefaultView BottleCollectionViewEnum default BottleCollection tiny view BottleCollectionTinyView BottleCollectionViewEnum tiny type BottleController go type BottleController interface goaController CreateCreateBottleContext error DeleteDeleteBottleContext error ListListBottleContext error RateRateBottleContext error ShowShowBottleContext error UpdateUpdateBottleContext error BottleController is the controller interface for the Bottle actions type BottlePayload go type BottlePayload struct Color string jsoncoloromitempty Country string jsoncountryomitempty Myvintage int jsonmyvintageomitempty Name string jsonnameomitempty Region string jsonregionomitempty Review string jsonreviewomitempty Sweetness int jsonsweetnessomitempty Varietal string jsonvarietalomitempty Vineyard string jsonvineyardomitempty VinyardCounty string jsonvinyardcountyomitempty BottlePayload type func BottlePayload Validate go func ut BottlePayload Validate err error Validate validates the type instance type BottleViewEnum go type BottleViewEnum string Bottle views go const Bottle default view BottleDefaultView BottleViewEnum default Bottle full view BottleFullView BottleViewEnum full Bottle tiny view BottleTinyView BottleViewEnum tiny type CreateAccountContext go type CreateAccountContext struct goaContext Payload CreateAccountPayload CreateAccountContext provides the account create action context func NewCreateAccountContext go func NewCreateAccountContextc goaContext CreateAccountContext error NewCreateAccountContext parses the incoming request URL and body performs validations and creates the context used by the account controller create action func CreateAccountContext Created go func ctx CreateAccountContext Created error Created sends a HTTP response with status code 201 type CreateAccountPayload go type CreateAccountPayload struct Name of account Name string jsonname CreateAccountPayload is the account create action payload func CreateAccountPayload Validate go func payload CreateAccountPayload Validate err error Validate runs the validation rules defined in the design type CreateBottleContext go type CreateBottleContext struct goaContext AccountID int Payload CreateBottlePayload CreateBottleContext provides the bottle create action context func NewCreateBottleContext go func NewCreateBottleContextc goaContext CreateBottleContext error NewCreateBottleContext parses the incoming request URL and body performs validations and creates the context used by the bottle controller create action func CreateBottleContext Created go func ctx CreateBottleContext Created error Created sends a HTTP response with status code 201 type CreateBottlePayload go type CreateBottlePayload struct Color string jsoncolor Country string jsoncountryomitempty Myvintage int jsonmyvintage Name string jsonname Region string jsonregionomitempty Review string jsonreviewomitempty Sweetness int jsonsweetnessomitempty Varietal string jsonvarietal Vineyard string jsonvineyard VinyardCounty string jsonvinyardcountyomitempty CreateBottlePayload is the bottle create action payload func CreateBottlePayload Validate go func payload CreateBottlePayload Validate err error Validate runs the validation rules defined in the design type DeleteAccountContext go type DeleteAccountContext struct goaContext AccountID int DeleteAccountContext provides the account delete action context func NewDeleteAccountContext go func NewDeleteAccountContextc goaContext DeleteAccountContext error NewDeleteAccountContext parses the incoming request URL and body performs validations and creates the context used by the account controller delete action func DeleteAccountContext NoContent go func ctx DeleteAccountContext NoContent error NoContent sends a HTTP response with status code 204 func DeleteAccountContext NotFound go func ctx DeleteAccountContext NotFound error NotFound sends a HTTP response with status code 404 type DeleteBottleContext go type DeleteBottleContext struct goaContext AccountID int BottleID int DeleteBottleContext provides the bottle delete action context func NewDeleteBottleContext go func NewDeleteBottleContextc goaContext DeleteBottleContext error NewDeleteBottleContext parses the incoming request URL and body performs validations and creates the context used by the bottle controller delete action func DeleteBottleContext NoContent go func ctx DeleteBottleContext NoContent error NoContent sends a HTTP response with status code 204 func DeleteBottleContext NotFound go func ctx DeleteBottleContext NotFound error NotFound sends a HTTP response with status code 404 type ListBottleContext go type ListBottleContext struct goaContext AccountID int Years int ListBottleContext provides the bottle list action context func NewListBottleContext go func NewListBottleContextc goaContext ListBottleContext error NewListBottleContext parses the incoming request URL and body performs validations and creates the context used by the bottle controller list action func ListBottleContext NotFound go func ctx ListBottleContext NotFound error NotFound sends a HTTP response with status code 404 func ListBottleContext OK go func ctx ListBottleContext OKresp BottleCollection view BottleCollectionViewEnum error OK sends a HTTP response with status code 200 type RateBottleContext go type RateBottleContext struct goaContext AccountID int BottleID int Payload RateBottlePayload RateBottleContext provides the bottle rate action context func NewRateBottleContext go func NewRateBottleContextc goaContext RateBottleContext error NewRateBottleContext parses the incoming request URL and body performs validations and creates the context used by the bottle controller rate action func RateBottleContext NoContent go func ctx RateBottleContext NoContent error NoContent sends a HTTP response with status code 204 func RateBottleContext NotFound go func ctx RateBottleContext NotFound error NotFound sends a HTTP response with status code 404 type RateBottlePayload go type RateBottlePayload struct Rating of bottle between 1 and 5 Rating int jsonrating RateBottlePayload is the bottle rate action payload func RateBottlePayload Validate go func payload RateBottlePayload Validate err error Validate runs the validation rules defined in the design type ShowAccountContext go type ShowAccountContext struct goaContext AccountID int ShowAccountContext provides the account show action context func NewShowAccountContext go func NewShowAccountContextc goaContext ShowAccountContext error NewShowAccountContext parses the incoming request URL and body performs validations and creates the context used by the account controller show action func ShowAccountContext NotFound go func ctx ShowAccountContext NotFound error NotFound sends a HTTP response with status code 404 func ShowAccountContext OK go func ctx ShowAccountContext OKresp Account view AccountViewEnum error OK sends a HTTP response with status code 200 type ShowBottleContext go type ShowBottleContext struct goaContext AccountID int BottleID int ShowBottleContext provides the bottle show action context func NewShowBottleContext go func NewShowBottleContextc goaContext ShowBottleContext error NewShowBottleContext parses the incoming request URL and body performs validations and creates the context used by the bottle controller show action func ShowBottleContext NotFound go func ctx ShowBottleContext NotFound error NotFound sends a HTTP response with status code 404 func ShowBottleContext OK go func ctx ShowBottleContext OKresp Bottle view BottleViewEnum error OK sends a HTTP response with status code 200 type UpdateAccountContext go type UpdateAccountContext struct goaContext AccountID int Payload UpdateAccountPayload UpdateAccountContext provides the account update action context func NewUpdateAccountContext go func NewUpdateAccountContextc goaContext UpdateAccountContext error NewUpdateAccountContext parses the incoming request URL and body performs validations and creates the context used by the account controller update action func UpdateAccountContext NoContent go func ctx UpdateAccountContext NoContent error NoContent sends a HTTP response with status code 204 func UpdateAccountContext NotFound go func ctx UpdateAccountContext NotFound error NotFound sends a HTTP response with status code 404 type UpdateAccountPayload go type UpdateAccountPayload struct Name of account Name string jsonname UpdateAccountPayload is the account update action payload func UpdateAccountPayload Validate go func payload UpdateAccountPayload Validate err error Validate runs the validation rules defined in the design type UpdateBottleContext go type UpdateBottleContext struct goaContext AccountID int BottleID int Payload UpdateBottlePayload UpdateBottleContext provides the bottle update action context func NewUpdateBottleContext go func NewUpdateBottleContextc goaContext UpdateBottleContext error NewUpdateBottleContext parses the incoming request URL and body performs validations and creates the context used by the bottle controller update action func UpdateBottleContext NoContent go func ctx UpdateBottleContext NoContent error NoContent sends a HTTP response with status code 204 func UpdateBottleContext NotFound go func ctx UpdateBottleContext NotFound error NotFound sends a HTTP response with status code 404 type UpdateBottlePayload go type UpdateBottlePayload struct Color string jsoncoloromitempty Country string jsoncountryomitempty Myvintage int jsonmyvintageomitempty Name string jsonnameomitempty Region string jsonregionomitempty Review string jsonreviewomitempty Sweetness int jsonsweetnessomitempty Varietal string jsonvarietalomitempty Vineyard string jsonvineyardomitempty VinyardCounty string jsonvinyardcountyomitempty UpdateBottlePayload is the bottle update action payload func UpdateBottlePayload Validate go func payload UpdateBottlePayload Validate err error Validate runs the validation rules defined in the design Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"gorma/example/client/cellar-cli","tags":["godoc","cellar-cli"],"href":"/godoc/gorma/example/client/cellar-cli","content":" cellarcli Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"gorma/example/client","tags":["godoc","client"],"href":"/godoc/gorma/example/client","content":" client import githubcomgoadesigngormaexampleclient type ActionCommand go type ActionCommand interface Run makes the HTTP request and returns the response Runc Client httpResponse error RegisterFlags defines the command flags RegisterFlagskingpinCmdClause ActionCommand represents a single action command as defined on the command line Each command is associated with a generated client method and contains the logic to call the method passing in arguments computed from the command line type Client go type Client struct goaClient Client is the cellar service client func New go func New Client New instantiates the client func Client CreateAccount go func c Client CreateAccountpath string payload CreateAccountPayload httpResponse error Create new account func Client CreateBottle go func c Client CreateBottlepath string payload CreateBottlePayload httpResponse error Record new bottle func Client DeleteAccount go func c Client DeleteAccountpath string httpResponse error DeleteAccount makes a request to the delete action endpoint of the account resource func Client DeleteBottle go func c Client DeleteBottlepath string httpResponse error DeleteBottle makes a request to the delete action endpoint of the bottle resource func Client ListBottle go func c Client ListBottlepath string years int httpResponse error List all bottles in account optionally filtering by year func Client RateBottle go func c Client RateBottlepath string payload RateBottlePayload httpResponse error RateBottle makes a request to the rate action endpoint of the bottle resource func Client ShowAccount go func c Client ShowAccountpath string httpResponse error Retrieve account with given id func Client ShowBottle go func c Client ShowBottlepath string httpResponse error Retrieve bottle with given id func Client UpdateAccount go func c Client UpdateAccountpath string payload UpdateAccountPayload httpResponse error Change account name func Client UpdateBottle go func c Client UpdateBottlepath string payload UpdateBottlePayload httpResponse error UpdateBottle makes a request to the update action endpoint of the bottle resource type CreateAccountPayload go type CreateAccountPayload struct Name of account Name string CreateAccountPayload is the data structure used to initialize the account create request body type CreateBottlePayload go type CreateBottlePayload struct Color string Country string Name string Region string Review string Sweetness int Varietal string Vineyard string Vintage int CreateBottlePayload is the data structure used to initialize the bottle create request body type RateBottlePayload go type RateBottlePayload struct Rating of bottle between 1 and 5 Rating int RateBottlePayload is the data structure used to initialize the bottle rate request body type UpdateAccountPayload go type UpdateAccountPayload struct Name of account Name string UpdateAccountPayload is the data structure used to initialize the account update request body type UpdateBottlePayload go type UpdateBottlePayload struct Color string Country string Name string Region string Review string Sweetness int Varietal string Vineyard string Vintage int UpdateBottlePayload is the data structure used to initialize the bottle update request body Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"gorma/example/design","tags":["godoc","design"],"href":"/godoc/gorma/example/design","content":" design import githubcomgoadesigngormaexampledesign Variables go var Account MediaTypeapplicationvndaccountjson func DescriptionA tenant account Attributesfunc Attributeid Integer ID of account Attributehref String API href of account Attributename String Name of account Attributecreatedat String Date of creation func Formatdatetime Attributecreatedby String Email of account owner func Formatemail Requiredid href name Viewdefault func Attributeid Attributehref Attributename Attributecreatedat Attributecreatedby Viewtiny func Attributeid Attributehref Attributename Viewlink func Attributeid Attributehref Account is the account resource media type go var Bottle MediaTypeapplicationvndbottlejson func DescriptionA bottle of wine ReferenceBottlePayload Attributesfunc Attributeid Integer ID of bottle Attributehref String API href of bottle Attributerating Integer Rating of bottle between 1 and 5 func Minimum1 Maximum5 Attributeaccount Account Account that owns bottle Attributecreatedat String Date of creation func Formatdatetime Attributeupdatedat String Date of last update func Formatdatetime Attributename Attributevineyard Attributevarietal Attributevintage Attributecolor Attributesweetness Attributecountry Attributeregion Attributereview Attributevinyardcounty Requiredid href name vineyard varietal vintage color Linksfunc Linkaccount Viewdefault func Attributeid Attributehref Attributename Attributerating Attributevineyard Attributevarietal Attributevintage Attributeaccount func Viewtiny Attributelinks Viewtiny func Attributeid Attributehref Attributename Attributerating Attributelinks Viewfull func Attributeid Attributehref Attributename Attributeaccount Attributerating Attributevineyard Attributevinyardcounty Attributevarietal Attributevintage Attributecolor Attributesweetness Attributecountry Attributeregion Attributereview Attributecreatedat Attributeupdatedat Attributelinks Bottle is the bottle resource media type go var BottlePayload TypeBottlePayload func Attributename func MinLength2 Attributevineyard func MinLength2 Attributevarietal func MinLength4 Attributemyvintage Integer func Minimum1900 Maximum2020 Attributevinyardcounty Attributecolor func Enumred white rose yellow sparkling Attributesweetness Integer func Minimum1 Maximum5 Attributecountry func MinLength2 Attributeregion Attributereview func MinLength3 MaxLength300 BottlePayload defines the data structure used in the create bottle request body It is also the base type for the bottle media type used to render bottles Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"gorma/example/genmodels","tags":["godoc","genmodels"],"href":"/godoc/gorma/example/genmodels","content":" genmodels import githubcomgoadesigngormaexamplegenmodels type Bottle go type Bottle struct ID int sqlindex gormprimarykey Color string Country string Myvintage int Name string Region string Review string Sweetness int Varietal string Vineyard string Vintage int sqlindex VinyardCounty string gormcolumnvinyardcounty UpdatedAt timeTime timestamp DeletedAt timeTime nullable timestamp soft delete CreatedAt timeTime timestamp This is the bottle model func Bottle TableName go func m Bottle TableName string TableName overrides the table name settings in Gorm to force a specific table name in the database type BottleDB go type BottleDB struct Db gormDB BottleDB is the implementation of the storage interface for Bottle func NewBottleDB go func NewBottleDBdb gormDB BottleDB NewBottleDB creates a new storage type func BottleDB DB go func m BottleDB DB interface DB returns the underlying database func BottleDB ListBottle go func m BottleDB ListBottlectx contextContext appBottle ListBottle returns an array of view default func BottleDB ListBottleViewFull go func m BottleDB ListBottleViewFullctx contextContext appBottleViewFull ListBottleViewFull returns an array of view full func BottleDB ListBottleViewTiny go func m BottleDB ListBottleViewTinyctx contextContext appBottleViewTiny ListBottleViewTiny returns an array of view tiny func BottleDB TableName go func m BottleDB TableName string TableName overrides the table name settings in Gorm to force a specific table name in the database type BottleStorage go type BottleStorage interface DB interface Listctx contextContext Bottle Onectx contextContext Bottle error Addctx contextContext bottle Bottle Bottle error Updatectx contextContext bottle Bottle error Deletectx contextContext error BottleStorage represents the storage interface Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"gorma/example/swagger","tags":["godoc","swagger"],"href":"/godoc/gorma/example/swagger","content":" swagger import githubcomgoadesigngormaexampleswagger func MountController go func MountControllerservice goaService MountController mounts the swagger spec controller under swaggerjson Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"gorma/example","tags":["godoc","example"],"href":"/godoc/gorma/example","content":" example Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"gorma","tags":["godoc","gorma"],"href":"/godoc/gorma","content":" gorma import githubcomgoadesigngorma Package gorma is a plugin generator for Goa httpgoadesign See the documentation in the dsl package for details on how to create a definition for your API The example folder contains an example Goa design package The modelsgo file is the Gorma definition which is responsible for generating all the files in the examplegenmodels folder Constants go const Gorma is the constant string used as the index in the goa DesignConstructs map Gorma gorma StorageGroup is the constant string used as the index in the GormaConstructs map StorageGroup storagegroup MySQL is the StorageType for MySQL databases MySQL RelationalStorageType mysql Postgres is the StorageType for Postgres Postgres RelationalStorageType postgres Boolean is a bool field type Boolean FieldType bool Integer is an integer field type Integer FieldType integer BigInteger is a large integer field type BigInteger FieldType biginteger AutoInteger is not implemented AutoInteger FieldType autointeger AutoBigInteger is not implemented AutoBigInteger FieldType autobiginteger Decimal is a float field type Decimal FieldType decimal BigDecimal is a large float field type BigDecimal FieldType bigdecimal String is a varchar field type String FieldType string Text is a large string field type Text FieldType text UUID is not implemented yet UUID FieldType uuid PKInteger is a field that will serve as the primary key and store as an integer PKInteger FieldType pkinteger PKBigInteger is a field that will serve as the primary key and store as a large integer PKBigInteger FieldType pkbiginteger PKUUID is not implemented yet PKUUID FieldType pkuuid Timestamp is a datetime field in the database Timestamp FieldType timestamp NullableTimestamp is a timestamp that may not be populated Fields with no value will be null in the database NullableTimestamp FieldType nulltimestamp NotFound is used internally NotFound FieldType notfound HasOne is used internally HasOne FieldType hasone HasOneKey is used internally HasOneKey FieldType hasonekey HasMany is used internally HasMany FieldType hasmany HasManyKey is used internally HasManyKey FieldType hasmanykey BelongsTo is used internally BelongsTo FieldType belongsto Variables go var TargetPackage is the name of the generated Go package TargetPackage string AppPackage is the name of the goagenerated Go app package AppPackage string func AppOutputDir go func AppOutputDir string AppOutputDir returns the directory containing the generated files func AppPackagePath go func AppPackagePath string error AppPackagePath returns the Go package path to the generated package func Generate go func Generateapi designAPIDefinition string error Generate is the generator entry point called by the meta generator func Init go func Init Init creates the necessary data structures for parsing a DSL func ModelOutputDir go func ModelOutputDir string ModelOutputDir returns the directory containing the generated files func ModelPackagePath go func ModelPackagePath string error ModelPackagePath returns the Go package path to the generated package type Command go type Command struct codegenBaseCommand Command is the goa application code generator command line data structure func NewCommand go func NewCommand Command NewCommand instantiates a new command func Command RegisterFlags go func c Command RegisterFlagsr codegenFlagRegistry RegisterFlags registers the command line flags with the given registry func Command Run go func c Command Run string error Run simply calls the meta generator type FieldIterator go type FieldIterator funcm RelationalFieldDefinition error FieldIterator is a function that iterates over Fields in a RelationalModel type FieldType go type FieldType string FieldType is the storage data type for a database field type Generator go type Generator struct contains filtered or unexported fields Generator is the application code generator func NewGenerator go func NewGenerator Generator error NewGenerator returns the application code generator func Generator Cleanup go func g Generator Cleanup Cleanup removes the entire app directory if it was created by this generator func Generator Generate go func g Generator Generateapi designAPIDefinition string err error Generate the application code implement codegenGenerator type ManyToManyDefinition go type ManyToManyDefinition struct designDefinition DefinitionDSL func Left RelationalModelDefinition Right RelationalModelDefinition RelationshipName string DatabaseField string ManyToManyDefinition stores information about a ManyToMany relationship between two domain objects func ManyToManyDefinition LeftName go func m ManyToManyDefinition LeftName string func ManyToManyDefinition LeftNamePlural go func m ManyToManyDefinition LeftNamePlural string func ManyToManyDefinition LowerLeftName go func m ManyToManyDefinition LowerLeftName string func ManyToManyDefinition LowerRightName go func m ManyToManyDefinition LowerRightName string func ManyToManyDefinition RightName go func m ManyToManyDefinition RightName string func ManyToManyDefinition RightNamePlural go func m ManyToManyDefinition RightNamePlural string type MediaTypeAdapterDefinition go type MediaTypeAdapterDefinition struct designDefinition DefinitionDSL func Name string Description string Left designMediaTypeDefinition Right RelationalModelDefinition MediaTypeAdapterDefinition represents the transformation of a Goa media type into a Gorma Model Unimplemented at this time type ModelIterator go type ModelIterator funcm RelationalModelDefinition error ModelIterator is a function that iterates over Models in a RelationalStore type PayloadAdapterDefinition go type PayloadAdapterDefinition struct designDefinition DefinitionDSL func Name string Description string Left designUserTypeDefinition Right RelationalModelDefinition PayloadAdapterDefinition represents the transformation of a Goa Payload which is really a UserTypeDefinition into a Gorma model Unimplemented at this time type RelationalFieldDefinition go type RelationalFieldDefinition struct designDefinition DefinitionDSL func Parent RelationalModelDefinition Name string BuiltFrom string RenderTo string Datatype FieldType SQLTag string DatabaseFieldName string Description string Nullable bool PrimaryKey bool Timestamp bool Size int string field size Alias string gormcolumn BelongsTo string HasOne string HasMany string Many2Many string contains filtered or unexported fields RelationalFieldDefinition represents a field in a relational database func RelationalFieldDefinition Children go func f RelationalFieldDefinition Children designDefinition Children returnsa slice of this objects children func RelationalFieldDefinition Context go func f RelationalFieldDefinition Context string Context returns the generic definition name used in error messages func RelationalFieldDefinition DSL go func f RelationalFieldDefinition DSL func DSL returns this objects DSL func RelationalFieldDefinition FieldDefinition go func f RelationalFieldDefinition FieldDefinition string FieldDefinition returns the fields struct definition func RelationalFieldDefinition LowerName go func f RelationalFieldDefinition LowerName string LowerName returns the field name as a lowercase string func RelationalFieldDefinition Tags go func f RelationalFieldDefinition Tags string Tags returns the sql and gorm struct tags for the Definition func RelationalFieldDefinition Underscore go func f RelationalFieldDefinition Underscore string Underscore returns the field name as a lowercase string in snake case func RelationalFieldDefinition Validate go func field RelationalFieldDefinition Validate designValidationErrors Validate tests whether the RelationalField definition is consistent type RelationalModelDefinition go type RelationalModelDefinition struct designDefinition DefinitionDSL func Name string Description string Parent RelationalStoreDefinition BuiltFrom designUserTypeDefinition RenderTo designMediaTypeDefinition BelongsTo mapstringRelationalModelDefinition HasMany mapstringRelationalModelDefinition HasOne mapstringRelationalModelDefinition ManyToMany mapstringManyToManyDefinition Adapters mapstringfunc Alias string gormtablename Cached bool CacheDuration int Roler bool DynamicTableName bool SQLTag string RelationalFields mapstringRelationalFieldDefinition PrimaryKeys RelationalFieldDefinition contains filtered or unexported fields RelationalModelDefinition implements the storage of a domain model into a table in a relational database func RelationalModelDefinition Children go func f RelationalModelDefinition Children designDefinition Children returns a slice of this objects children func RelationalModelDefinition Context go func f RelationalModelDefinition Context string Context returns the generic definition name used in error messages func RelationalModelDefinition DSL go func f RelationalModelDefinition DSL func DSL returns this objects DSL func RelationalModelDefinition IterateFields go func f RelationalModelDefinition IterateFieldsit FieldIterator error IterateFields returns an iterator function useful for iterating through this models field list func RelationalModelDefinition LowerName go func f RelationalModelDefinition LowerName string LowerName returns the model name as a lowercase string func RelationalModelDefinition PKAttributes go func f RelationalModelDefinition PKAttributes string PKAttributes constructs a pair of field definition strings useful for method parameters func RelationalModelDefinition PKUpdateFields go func f RelationalModelDefinition PKUpdateFieldsmodelname string string PKUpdateFields returns something This function doesnt look useful in current form Perhaps it isnt func RelationalModelDefinition PKWhere go func f RelationalModelDefinition PKWhere string PKWhere returns an array of strings representing the where clause of a retrieval by primary keys x and y func RelationalModelDefinition PKWhereFields go func f RelationalModelDefinition PKWhereFields string PKWhereFields returns the fields for a where clause for the primary keys of a model func RelationalModelDefinition PopulateFromModeledType go func f RelationalModelDefinition PopulateFromModeledType PopulateFromModeledType creates fields for the model based on the goa UserTypeDefinition it models This happens before fields are processed so its ok to just assign without testing func RelationalModelDefinition StructDefinition go func f RelationalModelDefinition StructDefinition string StructDefinition returns the struct definition for the model func RelationalModelDefinition TableName go func f RelationalModelDefinition TableName string TableName returns the table name for this model func RelationalModelDefinition Validate go func a RelationalModelDefinition Validate designValidationErrors Validate tests whether the RelationalModel definition is consistent type RelationalStorageType go type RelationalStorageType string RelationalStorageType is the type of database type RelationalStoreDefinition go type RelationalStoreDefinition struct designDefinition DefinitionDSL func Name string Description string Parent StorageGroupDefinition Type RelationalStorageType RelationalModels mapstringRelationalModelDefinition NoAutoIDFields bool NoAutoTimestamps bool NoAutoSoftDelete bool RelationalStoreDefinition is the parent configuration structure for Gorm relational model definitions func RelationalStoreDefinition Children go func sd RelationalStoreDefinition Children designDefinition Children returns a slice of this objects children func RelationalStoreDefinition Context go func sd RelationalStoreDefinition Context string Context returns the generic definition name used in error messages func RelationalStoreDefinition DSL go func sd RelationalStoreDefinition DSL func DSL returns this objects DSL func RelationalStoreDefinition IterateModels go func sd RelationalStoreDefinition IterateModelsit ModelIterator error IterateModels runs an iterator function once per Model in the Stores model list func RelationalStoreDefinition Validate go func a RelationalStoreDefinition Validate designValidationErrors Validate tests whether the RelationalStore definition is consistent type StorageGroupDefinition go type StorageGroupDefinition struct designDefinition DefinitionDSL func Name string Description string RelationalStores mapstringRelationalStoreDefinition StorageGroupDefinition is the parent configuration structure for Gorma definitions go var GormaDesign StorageGroupDefinition GormaDesign is the root definition for Gorma func StorageGroupDefinition Children go func sd StorageGroupDefinition Children designDefinition Children returns a slice of this objects children func StorageGroupDefinition Context go func sd StorageGroupDefinition Context string Context returns the generic definition name used in error messages func StorageGroupDefinition DSL go func sd StorageGroupDefinition DSL func DSL returns this objects DSL func StorageGroupDefinition IterateSets go func sd StorageGroupDefinition IterateSetsiterator designSetIterator IterateSets goes over all the definition sets of the StorageGroup the StorageGroup definition itself each store definition models and fields func StorageGroupDefinition IterateStores go func sd StorageGroupDefinition IterateStoresit StoreIterator error IterateStores runs an iterator function once per Relational Store in the StorageGroups Store list func StorageGroupDefinition Validate go func a StorageGroupDefinition Validate designValidationErrors Validate tests whether the StorageGroup definition is consistent type StoreIterator go type StoreIterator funcm RelationalStoreDefinition error StoreIterator is a function that iterates over Relational Stores in a StorageGroup type UserTypeAdapterDefinition go type UserTypeAdapterDefinition struct designDefinition DefinitionDSL func Name string Description string Left RelationalModelDefinition Right RelationalModelDefinition UserTypeAdapterDefinition represents the transformation of a Goa user type into a Gorma Model Unimplemented at this time type UserTypeTemplateData go type UserTypeTemplateData struct APIDefinition designAPIDefinition UserType RelationalModelDefinition DefaultPkg string AppPkg string UserTypeTemplateData contains all the information used by the template to redner the media types code type UserTypesWriter go type UserTypesWriter struct codegenSourceFile UserTypeTmpl templateTemplate UserTypesWriter generate code for a goa application user types User types are data structures defined in the DSL with Type func NewUserTypesWriter go func NewUserTypesWriterfilename string UserTypesWriter error NewUserTypesWriter returns a contexts code writer User types contain custom data structured defined in the DSL with Type func UserTypesWriter Execute go func w UserTypesWriter Executedata UserTypeTemplateData error Execute writes the code for the context types to the writer Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"middleware/cors","tags":["godoc","cors"],"href":"/godoc/middleware/cors","content":" cors import githubcomgoadesignmiddlewarecors Package cors provides a goa middleware that implements the CrossOrigin Resource Sharing CORS standard as defined by W3C httpwwww3orgTRaccesscontrol CORS implements a mechanism to enable clientside crossorigin requests Middleware DSL This package implements a DSL that allows goa applications to define precisely all aspects of CORS request handling The DSL makes it possible to define the set of CORS resources exposed to given origins For each CORS resource it is possible to specify the allowed CORS request HTTP methods and headers and all other CORS response properties Additionnally CORS resources may be equipped with a Check function which gets invoked by the middleware prior to handling a CORS request If this function returns false then the entire middleware is bypassed Here is an example of a CORS specification Newfunc Originhttpsgoadesign func This function defines CORS resources for the httpsgoadesign origin Resourceprivate func private is the path of the CORS resource HeadersXSharedSecret One or more authorized headers MethodsGET POST One or more authorized HTTP methods ExposeXTime One or more headers exposed to clients MaxAge600 How long to cache a prefligh request response Credentialstrue Sets AccessControlAllowCredentials header VaryHttpOrigin Sets Vary header Checkfuncctx Context bool Optional function that causes the middleware to be bypassed when returning false if ctxRequestHeaderGetXClient api return false return true Origins can be defined using regular expression with OriginRegex OrignRegexregexpMustCompilehttpsgoadesign func Resourcepublic func MethodsGET Each origin may expose any number of CORS resources Resourcepublicactions func MethodsGET POST PUT DELETE CORS Middleware and the Vary HTTP Header The middleware automatically sets the Vary header to Origin unless the DSL defines a custom value for it The idea is to prevent caching of responses coming from different origins Ideally the application should make an effort at normalizing the value used in the Vary header See httpswwwfastlycomblogbestpracticesforusingthevaryheader CORS Usage in goa A goa service wanting to leverage this package to add support for CORS requests needs to do two things First the service should mount the CORS middleware using for example spec corsNewfunc CORS DSL goes here serviceUsecorsMiddlewarespec Secondly the service should mount the preflight controller This controller takes care of handling CORS preflight requests It should be mounted last to avoid collisions in the low level router between the service OPTIONS handler and the preflight controller handlers corsMountPreflightControllerservice spec func Check go func Checkcheck CheckFunc Check sets a function that must return true if the request is to be treated as a valid CORS request func Credentials go func Credentialsval bool Credentials sets the AccessControlAllowCredentials response header func Expose go func Exposeheaders string Expose defines the HTTP headers in the resource response that can be exposed to the client func Headers go func Headersheaders string Headers defines the HTTP headers that will be allowed in the CORS resource request Use to allow for any headerResources in the actual request func MaxAge go func MaxAgeage int MaxAge sets the AccessControlMaxAge response header func Methods go func Methodsmethods string Methods defines the HTTP methods allowed for the resource func Middleware go func Middlewarespec Specification goaMiddleware Middleware returns a goa middleware which implements the given CORS specification func MountPreflightController go func MountPreflightControllerservice goaService spec Specification MountPreflightController mounts the handlers for the CORS preflight requests onto service func Origin go func Originorigin string dsl func Origin defines a group of CORS resources for the given origin func OriginRegex go func OriginRegexorigin regexpRegexp dsl func OriginRegex defines a group of CORS resources for the origins matching the given regex func Resource go func Resourcepath string dsl func Resource defines a resource subject to CORS requests The resource is defined using its URL path The path can finish with the wildcard character to indicate that all path under the given prefix target the resource func Vary go func Varyheaders string Vary is a list of HTTP headers to add to the Vary header type CheckFunc go type CheckFunc funcgoaContext bool CheckFunc is the signature of the user provided function invoked by the middleware to check whether to handle CORS headers type ResourceDefinition go type ResourceDefinition struct Origin defines the origin that may access the CORS resource One and only one of Origin or OriginRegexp must be set Origin string OriginRegexp defines the origins that may access the CORS resource One and only one of Origin or OriginRegexp must be set OriginRegexp regexpRegexp Path is the resource URL path Path string IsPathPrefix is true if Path is a path prefix false if its an exact match IsPathPrefix bool Headers contains the allowed CORS request headers Headers string Methods contains the allowed CORS request methods Methods string Expose contains the headers that should be exposed to clients Expose string MaxAge defines the value of the AccessControlMaxAge header CORS requeets response header MaxAge int Credentials defines the value of the AccessControlAllowCredentials CORS requests response header Credentials bool Vary defines the value of the Vary response header See httpswwwfastlycomblogbestpracticesforusingthevaryheader Vary string Check is an optional user provided functions that causes CORS handling to be bypassed when it return false Check CheckFunc ResourceDefinition represents a CORS resource as defined by its path or path prefix func ResourceDefinition FillHeaders go func res ResourceDefinition FillHeadersorigin string header httpHeader FillHeaders initializes the given header with the resource CORS headers origin is the request origin func ResourceDefinition OriginAllowed go func res ResourceDefinition OriginAllowedorigin string bool OriginAllowed returns true if the resource is accessible to the given origin func ResourceDefinition PathMatches go func res ResourceDefinition PathMatchespath string bool PathMatches returns true if the resource lives under the given path type Specification go type Specification ResourceDefinition Specification contains the information needed to handle CORS requests func New go func Newdsl func Specification error New runs the given CORS specification DSL and returns the builtup data structure func Specification PathResource go func v Specification PathResourcepath string ResourceDefinition PathResource returns the resource under the given path if any func Specification RequestResource go func v Specification RequestResourcectx goaContext origin string ResourceDefinition RequestResource returns the resource targeted by the CORS request defined in ctx func Specification String go func v Specification String string String returns a human friendly representation of the CORS specification Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"middleware/encoding/binc","tags":["godoc","binc"],"href":"/godoc/middleware/encoding/binc","content":" binc import githubcomgoadesignmiddlewareencodingbinc func DecoderFactory go func DecoderFactory goaEncoderFactory DecoderFactory is the default factory used by the goa Consumes DSL func EncoderFactory go func EncoderFactory goaEncoderFactory EncoderFactory is the default factory used by the goa Produces DSL type Factory go type Factory struct Factory uses githubcomugorjigocodec to act as an DecoderFactory and EncoderFactory func Factory NewDecoder go func f Factory NewDecoderr ioReader goaDecoder NewDecoder returns a new jsonDecoder that satisfies goaDecoder The built in codecDecoder has a compatible Reset func func Factory NewEncoder go func f Factory NewEncoderw ioWriter goaEncoder NewEncoder returns a new jsonEncoder that satisfies goaEncoder The built in codecEncoder has a compatible Reset func Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"middleware/encoding/cbor","tags":["godoc","cbor"],"href":"/godoc/middleware/encoding/cbor","content":" cbor import githubcomgoadesignmiddlewareencodingcbor func DecoderFactory go func DecoderFactory goaEncoderFactory DecoderFactory is the default factory used by the goa Consumes DSL func EncoderFactory go func EncoderFactory goaEncoderFactory EncoderFactory is the default factory used by the goa Produces DSL type Factory go type Factory struct Factory uses githubcomugorjigocodec to act as an DecoderFactory and EncoderFactory func Factory NewDecoder go func f Factory NewDecoderr ioReader goaDecoder NewDecoder returns a new jsonDecoder that satisfies goaDecoder The built in codecDecoder has a compatible Reset func func Factory NewEncoder go func f Factory NewEncoderw ioWriter goaEncoder NewEncoder returns a new jsonEncoder that satisfies goaEncoder The built in codecEncoder has a compatible Reset func Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"middleware/encoding/gogoprotobuf","tags":["godoc","gogoprotobuf"],"href":"/godoc/middleware/encoding/gogoprotobuf","content":" gogoprotobuf import githubcomgoadesignmiddlewareencodinggogoprotobuf func DecoderFactory go func DecoderFactory goaEncoderFactory DecoderFactory is the default factory used by the goa Consumes DSL func EncoderFactory go func EncoderFactory goaEncoderFactory EncoderFactory is the default factory used by the goa Produces DSL type Factory go type Factory struct Factory uses githubcomugorjigocodec to act as an DecoderFactory and EncoderFactory func Factory NewDecoder go func f Factory NewDecoderr ioReader goaDecoder NewDecoder returns a new jsonDecoder that satisfies goaDecoder The built in codecDecoder has a compatible Reset func func Factory NewEncoder go func f Factory NewEncoderw ioWriter goaEncoder NewEncoder returns a new jsonEncoder that satisfies goaEncoder The built in codecEncoder has a compatible Reset func type ProtoDecoder go type ProtoDecoder struct contains filtered or unexported fields ProtoDecoder stores state between Reset and Decode func ProtoDecoder Decode go func dec ProtoDecoder Decodev interface error Decode unmarshals an ioReader into protoMessage v func ProtoDecoder Reset go func dec ProtoDecoder Resetr ioReader Reset stores the new reader and resets its bytesBuffer and protoBuffer type ProtoEncoder go type ProtoEncoder struct contains filtered or unexported fields ProtoEncoder stores state between Reset and Encode func ProtoEncoder Encode go func enc ProtoEncoder Encodev interface error Encode marshals a protoMessage and writes it to an ioWriter func ProtoEncoder Reset go func enc ProtoEncoder Resetw ioWriter Reset stores the new writer and resets its protoBuffer Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"middleware/encoding/json","tags":["godoc","json"],"href":"/godoc/middleware/encoding/json","content":" json import githubcomgoadesignmiddlewareencodingjson func DecoderFactory go func DecoderFactory goaEncoderFactory DecoderFactory is the default factory used by the goa Consumes DSL func EncoderFactory go func EncoderFactory goaEncoderFactory EncoderFactory is the default factory used by the goa Produces DSL type Factory go type Factory struct Factory uses githubcomugorjigocodec to act as an DecoderFactory and EncoderFactory func Factory NewDecoder go func f Factory NewDecoderr ioReader goaDecoder NewDecoder returns a new jsonDecoder that satisfies goaDecoder The built in codecDecoder has a compatible Reset func func Factory NewEncoder go func f Factory NewEncoderw ioWriter goaEncoder NewEncoder returns a new jsonEncoder that satisfies goaEncoder The built in codecEncoder has a compatible Reset func Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"middleware/encoding/msgpack","tags":["godoc","msgpack"],"href":"/godoc/middleware/encoding/msgpack","content":" msgpack import githubcomgoadesignmiddlewareencodingmsgpack func DecoderFactory go func DecoderFactory goaEncoderFactory DecoderFactory is the default factory used by the goa Consumes DSL func EncoderFactory go func EncoderFactory goaEncoderFactory EncoderFactory is the default factory used by the goa Produces DSL type Factory go type Factory struct Factory uses githubcomugorjigocodec to act as an DecoderFactory and EncoderFactory func Factory NewDecoder go func f Factory NewDecoderr ioReader goaDecoder NewDecoder returns a new jsonDecoder that satisfies goaDecoder The built in codecDecoder has a compatible Reset func func Factory NewEncoder go func f Factory NewEncoderw ioWriter goaEncoder NewEncoder returns a new jsonEncoder that satisfies goaEncoder The built in codecEncoder has a compatible Reset func Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"middleware/gzip","tags":["godoc","gzip"],"href":"/godoc/middleware/gzip","content":" gzip import githubcomgoadesignmiddlewaregzip func Middleware go func Middlewarelevel int goaMiddleware Middleware encodes the response using Gzip encoding and sets all the appropriate headers If the ContentType is not set it will be set by calling httpDetectContentType on the data being written Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"middleware/jwt","tags":["godoc","jwt"],"href":"/godoc/middleware/jwt","content":" jwt import githubcomgoadesignmiddlewarejwt Package jwt makes it possible to authorize API requests using JSON Web Tokens see httpsjwtiointroduction Middleware The package provides a middleware that can be mounted on controllers that require authentication The JWT middleware is instantiated using the package Middleware function This function accepts a specification that describes the various properties used by the JWT signature and validation algorithms spec jwtSpecification AllowParam false Pass tokens in headers only AuthOptions false Do not authorize OPTIONS requests TTLMinutes 1440 Tokens are valid for 24 hours Issuer mecom mecom issued the token KeySigningMethod jwtRSA256 Use the RSA256 hashing algorithm to sign tokens SigningKeyFunc privateKey privateKey returns the key used to sign tokens ValidationFunc pubKey pubKey returns the key used to validate tokens authorizedControllerUsejwtMiddlewarespec Token Manager The package also exposes a token manager that creates the JWT tokens The manager is instantiated using the same specification used to create the middleware var tm jwtTokenManager jwtNewTokenManagerspec func Loginctx goaContext error Authorize request using ctx initialize tenant id if necessary etc claims mapstringinterface accountID accountID token err tmCreateclaims if err nil return err return ctxRespond200 token Youll probably need something different here Constants go const JWTHeader Authorization JWTHeader is the name of the header used to transmit the JWT token go const JWTKey middlewareKey 0 JWTKey is the JWT middleware key used to store the token in the context go const TokenManagerKey middlewareKey 1 TokenManagerKey is the JWT middleware key used to store the token manager in the context func GetToken go func GetTokenctx goaContext spec Specification token jwtToken err error GetToken extracts the JWT token from the request if there is one func Middleware go func Middlewarespec Specification goaMiddleware Middleware is a middleware that retrieves a JWT token from the request if present and injects it into the context It checks for the token in the HTTP Headers first then the querystring if the specification AllowParam is true Retrieve it using ctxValueJWTKey type KeyFunc go type KeyFunc func interface error KeyFunc is a function that returns the key to sign a token It should return a byte for all or a rsaPrivateKey or ecdsaPrivateKey type SigningMethod go type SigningMethod int SigningMethod is the enum that lists the supported token signature hashing algorithms go const RSA256 signing algorithm RSA256 SigningMethod iota 1 RSA384 signing algorithm RSA384 RSA512 signing algorithm RSA512 HMAC256 signing algorithm HMAC256 HMAC384 signing algorithm HMAC384 HMAC512 signing algorithm HMAC512 ECDSA256 signing algorithm ECDSA256 ECDSA384 signing algorithm ECDSA384 ECDSA512 signing algorithm ECDSA512 type Specification go type Specification struct TokenHeader is the HTTP header to search for the JWT Token Defaults to Authorization TokenHeader string TokenParam is the request parameter to parse for the JWT Token Defaults to token TokenParam string AllowParam is a flag that determines whether it is allowable to parse tokens from the querystring Defaults to false AllowParam bool ValidationFunc is a function that returns the key to validate the JWT Required no default ValidationFunc ValidationKeyfunc AuthOptions is a flag that determines whether a token is required on OPTIONS requests AuthOptions bool TTLMinutes is the TTL for tokens that are generated TTLMinutes int RefreshTTLMinutes is the TTL for refresh tokens that are generated and should generally be much longer than TTLMinutes RefreshTTLMinutes int Issuer is the name of the issuer that will be inserted into the generated tokens claims Issuer string KeySigningMethod determines the type of key that will be used to sign Tokens KeySigningMethod SigningMethod SigningKeyFunc is a function that returns the key used to sign the token SigningKeyFunc KeyFunc CommonClaims is a list of claims added to all tokens issued CommonClaims mapstringinterface Specification describes the JWT authorization properties It is used to both instantiate a middleware and a token manager The middleware uses the specification properties to authorize the incoming request while the token manager uses it to create authorization tokens type TokenManager go type TokenManager struct contains filtered or unexported fields TokenManager provides for the creation of access and refresh JWT Tokens func NewTokenManager go func NewTokenManagerspec Specification TokenManager NewTokenManager returns a TokenManager If TTLMinutes isnt specified it will default to 5 minutes Use the same Specification as you use for Middleware to ensure your tokens are compatible func TokenManager Create go func tm TokenManager Createclaims mapstringinterface string error Create makes a new token adding the claims provided It returns a token as a string type ValidationKeyfunc go type ValidationKeyfunc funcjwtToken interface error ValidationKeyfunc is a function that takes a token and returns the key to validate that token which allows it to use inforamtion from the key itself to choose the key to return Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"middleware","tags":["godoc","middleware"],"href":"/godoc/middleware","content":" middleware import githubcomgoadesignmiddleware Constants go const ReqIDKey middlewareKey 1 ReqIDKey is the context key used by the RequestID middleware to store the request ID value go const RequestIDHeader XRequestId RequestIDHeader is the name of the header used to transmit the request ID func LogRequest go func LogRequest goaMiddleware LogRequest creates a request logger middleware This middleware is aware of the RequestID middleware and if registered after it leverages the request ID for logging func LogResponse go func LogResponse goaMiddleware LogResponse creates a response logger middleware Only Logs the raw response data without accumulating any statistics func Recover go func Recover goaMiddleware Recover is a middleware that recovers panics and returns an internal error response func RequestID go func RequestID goaMiddleware RequestID is a middleware that injects a request ID into the context of each request Retrieve it using ctxValueReqIDKey If the incoming request has a RequestIDHeader header then that value is used else a random value is generated func RequireHeader go func RequireHeader pathPattern regexpRegexp requiredHeaderName string requiredHeaderValue regexpRegexp failureStatus int goaMiddleware RequireHeader requires a request header to match a value pattern If the header is missing or does not match then the failureStatus is the response eg httpStatusUnauthorized If pathPattern is nil then any path is included If requiredHeaderValue is nil then any value is accepted so long as the header is nonempty func Timeout go func Timeouttimeout timeDuration goaMiddleware Timeout sets a global timeout for all controller actions The timeout notification is made through the context it is the responsability of the request handler to handle it For example func ctrl Controller DoLongRunningActionctx DoLongRunningActionContext error action NewLongRunning setup long running action c makechan error 1 create return channel go func c actionRun Launch long running action goroutine select case ctxDone timeout triggered actionCancel cancel long running action c wait for Run to return return ctxErr retrieve cancel reason case err c action finished on time return err forward its return value Package golangorgxnetcontextctxhttp contains an implementation of an HTTP client which is contextaware func ctrl Controller HttpActionctx HttpActionContext error req err httpNewRequestGET httpiamaslowservicecom nil resp err ctxhttpDoctx nil req returns if timeout triggers Controller actions can check if a timeout is set by calling the context Deadline method Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"JWT","tags":["auth","jwt"],"href":"/middleware/jwt","content":"Getting Started Guide Here JWT"},{"title":"gorma","tags":["orm","gorm","database"],"href":"/plugins/gorma","content":"hello gorma"},{"title":"Hello Goa!","tags":["help"],"href":"/tutorials/hello-goa","content":"my first goa api post"}]