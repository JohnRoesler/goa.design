<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>goa</title>
    <link>http://goa.design/</link>
    <description>Recent content on goa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Jan 2016 13:13:20 -0500</lastBuildDate>
    <atom:link href="http://goa.design/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>about</title>
      <link>http://goa.design/about/</link>
      <pubDate>Sat, 30 Jan 2016 13:13:20 -0500</pubDate>
      
      <guid>http://goa.design/about/</guid>
      <description>&lt;p&gt;hello about!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goa DSL Engine</title>
      <link>http://goa.design/components/engine/</link>
      <pubDate>Sat, 30 Jan 2016 11:01:06 -0500</pubDate>
      
      <guid>http://goa.design/components/engine/</guid>
      <description>&lt;p&gt;&lt;p&gt;
                                &lt;code&gt;goagen&lt;/code&gt; is a tool that generates various artifacts from a goa design package.&lt;br/&gt; Install it with:
                                &lt;code class=&#34;bash&#34;&gt;go get github.com/goadesign/goa/goagen&lt;/code&gt;&lt;br/&gt;
                                goagen relies on &lt;code&gt;goimports&lt;/code&gt;:&lt;br/&gt;
                                &lt;code class=&#34;bash&#34;&gt;go get golang.org/x/tools/cmd/goimports&lt;/code&gt;
                        &lt;/p&gt;
                        &lt;p&gt;
                                Each type of artifact is associated with a &lt;code&gt;goagen&lt;/code&gt; command that exposes it own set of flags.
                                Internally these commands map to &amp;ldquo;generators&amp;rdquo; that contain the logic for generating the artifacts.
                                It works something like this:
                        &lt;/p&gt;
                        &lt;ol&gt;
                                &lt;li&gt;
                                        goagen parses the command line to determine the type of output desired and invokes the appropriate generator.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The generator writes the code of the tool that will produce the final output to a temporary Go workspace.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The tool composed of the design language package and the output producing code is compiled in the temporary workspace.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;goagen&lt;/code&gt; then runs the tool which evaluates the design functions and traverses the resulting in-memory data
                                        structures to write the output.
                                &lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;p&gt;
                                Each generator registers a command with the &lt;code&gt;goagen&lt;/code&gt; tool, &lt;code&gt;goagen &amp;ndash;help&lt;/code&gt; lists all the available
                                commands. These are:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;app&lt;/code&gt;: generates the service boilerplate code including controllers, contexts, media types and user types.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;main&lt;/code&gt;: generates a skeleton file for each resource controller as well as a default &lt;code&gt;main&lt;/code&gt;.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;client&lt;/code&gt;: generates an API client Go package and tool.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;swagger&lt;/code&gt;: generates the API Swagger specification.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;js&lt;/code&gt;: generates a JavaScript API client.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;schema&lt;/code&gt;: generates the API Hyper-schema JSON.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;gen&lt;/code&gt;: invokes a third party generator.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;bootstrap&lt;/code&gt;: invokes the &lt;code&gt;app&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;swagger&lt;/code&gt;
                                        generators.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                The command &lt;code&gt;goagen &amp;ndash;help-long&lt;/code&gt; lists all the supported commands and their flags.
                        &lt;/p&gt;
                        &lt;h2&gt;Common flags&lt;/h2&gt;
                        &lt;p&gt;
                                The following flags apply to all the &lt;code&gt;goagen&lt;/code&gt; commands:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;design|-d=DESIGN&lt;/code&gt; defines the Go package path to the service design package.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;out|-o=OUT&lt;/code&gt; specifies where to generate the files, defaults to the current directory.
                                &lt;/li&gt;
                                        &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;debug&lt;/code&gt; enables &lt;code&gt;goagen&lt;/code&gt; debug. This causes &lt;code&gt;goagen&lt;/code&gt; to print the content of the temporary
                                        files and to leave them around.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;help|&amp;ndash;help-long|&amp;ndash;help-man&lt;/code&gt; prints contextual help.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen app&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;app&lt;/code&gt; command is arguably the most critical. It generates all the supporting code for the
                                goa service. This command supports an additional flag:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg=app&lt;/code&gt; specifies the name of the generated Go package, defaults to &lt;code&gt;app&lt;/code&gt;. That&amp;rsquo;s also the
                                        name of the subdirectory that gets created to store the generated Go files.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                This command always deletes and re-creates any pre-existing directory with the same name. The idea
                                being that these files should never be edited.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen main&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;main&lt;/code&gt; command helps bootstrap a new goa service by generating a default &lt;code&gt;main.go&lt;/code&gt; as
                                well as a default (empty) implementation for each resource controller defined in the design package. By default
                                this command only generates the files if they don&amp;rsquo;t exist yet in the output directory. This
                                command accepts two additional flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;force&lt;/code&gt; causes the files to be generated even if files with the same name already exist (in
                                        which case they get overwritten).
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;name=API&lt;/code&gt; specifies the name of the service to be used in the generated call to &lt;code&gt;goa.New&lt;/code&gt;.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen client&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;client&lt;/code&gt; command generates both an API client package and tool. The client package implements a &lt;code&gt;Client&lt;/code&gt;
                                object that exposes one method for each resource action. The generated code of the CLI tool leverages the package to
                                make the API requests to the service.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The &lt;code&gt;Client&lt;/code&gt; object can be configured to use request signers that get invoked prior to sending the
                                request. The signers modify the request to include auth headers for example. goa comes with signers that implement
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#BasicSigner&#34;&gt;basic auth&lt;/a&gt;,
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#JWTSigner&#34;&gt;JWT auth&lt;/a&gt; and a subset of
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#OAuth2Signer&#34;&gt;OAuth2&lt;/a&gt;. Custom signers my be used as well, they must
                                implement the &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#Signer&#34;&gt;Signer&lt;/a&gt; interface.
                                This command accepts three additional flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;version&lt;/code&gt; specifies the CLI tool version.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;signer&lt;/code&gt; specifies a signer object supported by the API. Signer objects generally perform auth.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;signerPkg&lt;/code&gt; specifies the path to the package implementing the signer objects if not goa.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen js&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;js&lt;/code&gt; command generates a JavaScript API client suitable for both client-side and server-side
                                applications. The generated code defines an anonymous AMD module and relies on the &lt;a href=&#34;https://github.com/mzabriskie/axios&#34;&gt;axios&lt;/a&gt;
                                promised-based JavaScript library for making the actual HTTP requests.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The generated module wraps the &lt;code&gt;axios&lt;/code&gt; client and adds API specific functions, for example:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// List all bottles in account optionally filtering by year
// path is the request path, the format is &amp;ldquo;/cellar/accounts/:accountID/bottles&amp;rdquo;
// years is used to build the request query string.
// config is an optional object to be merged into the config built by the function prior to making the request.
// The content of the config object is described here: &lt;a href=&#34;https://github.com/mzabriskie/axios#request-api&#34;&gt;https://github.com/mzabriskie/axios#request-api&lt;/a&gt;
// This function returns a promise which raises an error if the HTTP response is a 4xx or 5xx.
client.listBottle = function (path, years, config) {
  cfg = {
    timeout: timeout,
    url: urlPrefix + path,
    method: &amp;lsquo;get&amp;rsquo;,
    params: {
      years: years
    },
    responseType: &amp;lsquo;json&amp;rsquo;
  };
  if (config) {
    cfg = utils.merge(cfg, config);
  }
  return client(cfg);
}&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The generated client module can be loaded using &lt;code&gt;requirejs&lt;/code&gt;:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;requirejs.config({
  paths: {
    axios: &amp;lsquo;/js/axios.min&amp;rsquo;,
    client: &amp;lsquo;/js/client&amp;rsquo;
  }
});
requirejs([&amp;lsquo;client&amp;rsquo;], function (client) {
  client().listBottle (&amp;ldquo;/cellar/accounts/440/bottles&amp;rdquo;, 317)
    .then(function (resp) {
      // All good, use resp
    })
    .catch(function (resp) {
      // Woops, request failed or returned 4xx or 5xx.
    });
});&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The code above assumes that the generated files &lt;code&gt;client.js&lt;/code&gt; and &lt;code&gt;axios.min.js&lt;/code&gt; are both
                                served from &lt;code&gt;/js&lt;/code&gt;. The &lt;code&gt;resp&lt;/code&gt; value returned to the promise is an object with the following
                                fields:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code language=&#34;javascript&#34;&gt;{
  // &lt;code&gt;data&lt;/code&gt; is the response that was provided by the server
  data: {},&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;status&lt;/code&gt; is the HTTP status code from the server response
  status: 200,&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;statusText&lt;/code&gt; is the HTTP status message from the server response
  statusText: &amp;lsquo;OK&amp;rsquo;,&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;headers&lt;/code&gt; the headers that the server responded with
  headers: {},&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;config&lt;/code&gt; is the config that was provided to &lt;code&gt;axios&lt;/code&gt; for the request
  config: {}
}&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The generator also produces an example HTML and controller that can be mounted on a
                                goa service to quickly test the JavaScript. Simply import the &lt;code&gt;js&lt;/code&gt; Go
                                package in your service main and mount the controller. The example HTML is served
                                under &lt;code&gt;/js&lt;/code&gt; so that loading this path in a browser will trigger the generated
                                JavaScript.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen swagger&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;swagger&lt;/code&gt; command generates a &lt;a href=&#34;http://swagger.io&#34;&gt;Swagger&lt;/a&gt; specification of the API.
                                The command does not accept additional flags. It generates both the Swagger JSON as well as a controller that
                                can be mounted on the goa service to serve it under &lt;code&gt;/swagger.json&lt;/code&gt;.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen schema&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;schema&lt;/code&gt; command generates a &lt;a href=&#34;https://blog.heroku.com/archives/2014/1/8/json_schema_for_heroku_platform_api&#34;&gt;Heroku-like&lt;/a&gt;
                                JSON hyper-schema representation of the API. It generates both the JSON as well as a controller that
                                can be mounted on the goa service to serve it under &lt;code&gt;/schema.json&lt;/code&gt;. The command accepts an additional flag:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;url|-u=URL&lt;/code&gt; specifies the base URL used to build the JSON schema ID.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen gen&lt;/code&gt;: goagen Plugins&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;gen&lt;/code&gt; command makes it possible to invoke &lt;code&gt;goagen&lt;/code&gt; plugins.
                                This command accepts two flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg-path=PKG-PATH&lt;/code&gt; specifies the Go package path to the plugin package.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg-name=PKG-NAME&lt;/code&gt; specifies the Go package name of the plugin package. It defaults to the
                                        name of the inner most directory in the Go package path.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                A plugin consists of a Go package which exposes a &lt;code&gt;Generate&lt;/code&gt; function with the following
                                signature:
                        &lt;p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func Generate(api *design.APIDefinition) ([]string, error)
&lt;/pre&gt;&lt;/code&gt;
                        &lt;p&gt;
                                 where api is the API definition computed from the design package. On success &lt;code&gt;Generate&lt;/code&gt; should return
                                 the path to the generated files. On error the error message gets displayed to the user (and
                                 goagen exist with status 1).
                        &lt;/p&gt;
                        &lt;p&gt;
                                 The &lt;code&gt;Generate&lt;/code&gt; method should take advantage of the &lt;code&gt;APIDefinition&lt;/code&gt; &lt;code&gt;IterateXXX&lt;/code&gt; methods to iterate
                                 through the API resources, media types and types to guarantee that the order doesn&amp;rsquo;t change
                                 between two invokation of the function (thereby generating different output even if the design
                                 hasn&amp;rsquo;t changed).
                        &lt;/p&gt;
                        &lt;p&gt;
                                 They may also take advantage of Metadata. The goa design language allows defining Metadata on a
                                 number of definitions: API, Resource, Action, Response and Attribute (which means Type and
                                 MediaType as well since these definitions are attributes). A metadata field consists of a
                                 key/value pair where both are simple strings. The generator can use these key/value pairs to
                                 produce different results, see example below. Metadata has no effect on the buit-in generators.
                                 The Output directory is available through the codegen.OutputDir global variable.
                        &lt;/p&gt;
                        &lt;p&gt;
                                 Package genresnames is an example of a goagen plugin. It creates a file &amp;ldquo;names.txt&amp;rdquo; containing
                                 the names of the API resources sorted in alphabetical order. If a resource has a
                                 metadata pair with the key &amp;ldquo;genresnames/name&amp;rdquo; then the plugin uses the metadata value instead.
                        &lt;/p&gt;
                        &lt;p&gt;
                                 Invoke the plugin with:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code&gt;
                                 goagen gen -d &lt;Go package path to design package&gt; &amp;ndash;pkg-path=&lt;Go package path to genresnames&gt;
                        &lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                 Source code:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;
package genresnames&lt;/p&gt;

&lt;p&gt;import (
        &amp;ldquo;io/ioutil&amp;rdquo;
        &amp;ldquo;os&amp;rdquo;
        &amp;ldquo;path/filepath&amp;rdquo;
        &amp;ldquo;strings&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;gopkg.in/alecthomas/kingpin.v2&amp;quot;

    &amp;quot;github.com/goadesign/goa/design&amp;quot;
    &amp;quot;github.com/goadesign/goa/goagen/codegen&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;)&lt;/p&gt;

&lt;p&gt;// Generate is the function called by goagen to generate the names file.
func Generate(api *design.APIDefinition) ([]string, error) {
        // Make sure to parse the common flags so that codegen.OutputDir gets properly
        // initialized.
        app := kingpin.New(&amp;ldquo;Resource names&amp;rdquo;, &amp;ldquo;Resource name generator&amp;rdquo;)
        codegen.RegisterFlags(app)
        if _, err := app.Parse(os.Args[1:]); err != nil {
                panic(err)
        }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // Now iterate through the resources to gather their names
    names := make([]string, len(api.Resources))
    i := 0
    api.IterateResources(func(res *design.ResourceDefinition) error {
            if n, ok := res.Metadata[&amp;quot;genresnames/name&amp;quot;]; ok {
                    names[i] = n
            } else {
                    names[i] = res.Name
            }
            i++
            return nil
    })
    content := strings.Join(names, &amp;quot;\n&amp;quot;)

    // Write the output file and return its name
    outputFile := filepath.Join(codegen.OutputDir, &amp;quot;names.txt&amp;quot;)
    ioutil.WriteFile(outputFile, []byte(content), 0755)
    return []string{outputFile}, nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>http://goa.design/middleware/jwt/</link>
      <pubDate>Sat, 30 Jan 2016 11:01:06 -0500</pubDate>
      
      <guid>http://goa.design/middleware/jwt/</guid>
      <description>&lt;p&gt;Getting Started Guide Here
JWT&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>goagen</title>
      <link>http://goa.design/components/goagen/</link>
      <pubDate>Sat, 30 Jan 2016 11:01:06 -0500</pubDate>
      
      <guid>http://goa.design/components/goagen/</guid>
      <description>&lt;p&gt;&lt;p&gt;
                                &lt;code&gt;goagen&lt;/code&gt; is a tool that generates various artifacts from a goa design package.&lt;br/&gt; Install it with:
                                &lt;code class=&#34;bash&#34;&gt;go get github.com/goadesign/goa/goagen&lt;/code&gt;&lt;br/&gt;
                                goagen relies on &lt;code&gt;goimports&lt;/code&gt;:&lt;br/&gt;
                                &lt;code class=&#34;bash&#34;&gt;go get golang.org/x/tools/cmd/goimports&lt;/code&gt;
                        &lt;/p&gt;
                        &lt;p&gt;
                                Each type of artifact is associated with a &lt;code&gt;goagen&lt;/code&gt; command that exposes it own set of flags.
                                Internally these commands map to &amp;ldquo;generators&amp;rdquo; that contain the logic for generating the artifacts.
                                It works something like this:
                        &lt;/p&gt;
                        &lt;ol&gt;
                                &lt;li&gt;
                                        goagen parses the command line to determine the type of output desired and invokes the appropriate generator.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The generator writes the code of the tool that will produce the final output to a temporary Go workspace.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The tool composed of the design language package and the output producing code is compiled in the temporary workspace.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;goagen&lt;/code&gt; then runs the tool which evaluates the design functions and traverses the resulting in-memory data
                                        structures to write the output.
                                &lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;p&gt;
                                Each generator registers a command with the &lt;code&gt;goagen&lt;/code&gt; tool, &lt;code&gt;goagen &amp;ndash;help&lt;/code&gt; lists all the available
                                commands. These are:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;app&lt;/code&gt;: generates the service boilerplate code including controllers, contexts, media types and user types.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;main&lt;/code&gt;: generates a skeleton file for each resource controller as well as a default &lt;code&gt;main&lt;/code&gt;.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;client&lt;/code&gt;: generates an API client Go package and tool.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;swagger&lt;/code&gt;: generates the API Swagger specification.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;js&lt;/code&gt;: generates a JavaScript API client.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;schema&lt;/code&gt;: generates the API Hyper-schema JSON.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;gen&lt;/code&gt;: invokes a third party generator.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;bootstrap&lt;/code&gt;: invokes the &lt;code&gt;app&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;swagger&lt;/code&gt;
                                        generators.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                The command &lt;code&gt;goagen &amp;ndash;help-long&lt;/code&gt; lists all the supported commands and their flags.
                        &lt;/p&gt;
                        &lt;h2&gt;Common flags&lt;/h2&gt;
                        &lt;p&gt;
                                The following flags apply to all the &lt;code&gt;goagen&lt;/code&gt; commands:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;design|-d=DESIGN&lt;/code&gt; defines the Go package path to the service design package.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;out|-o=OUT&lt;/code&gt; specifies where to generate the files, defaults to the current directory.
                                &lt;/li&gt;
                                        &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;debug&lt;/code&gt; enables &lt;code&gt;goagen&lt;/code&gt; debug. This causes &lt;code&gt;goagen&lt;/code&gt; to print the content of the temporary
                                        files and to leave them around.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;help|&amp;ndash;help-long|&amp;ndash;help-man&lt;/code&gt; prints contextual help.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen app&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;app&lt;/code&gt; command is arguably the most critical. It generates all the supporting code for the
                                goa service. This command supports an additional flag:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg=app&lt;/code&gt; specifies the name of the generated Go package, defaults to &lt;code&gt;app&lt;/code&gt;. That&amp;rsquo;s also the
                                        name of the subdirectory that gets created to store the generated Go files.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                This command always deletes and re-creates any pre-existing directory with the same name. The idea
                                being that these files should never be edited.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen main&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;main&lt;/code&gt; command helps bootstrap a new goa service by generating a default &lt;code&gt;main.go&lt;/code&gt; as
                                well as a default (empty) implementation for each resource controller defined in the design package. By default
                                this command only generates the files if they don&amp;rsquo;t exist yet in the output directory. This
                                command accepts two additional flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;force&lt;/code&gt; causes the files to be generated even if files with the same name already exist (in
                                        which case they get overwritten).
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;name=API&lt;/code&gt; specifies the name of the service to be used in the generated call to &lt;code&gt;goa.New&lt;/code&gt;.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen client&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;client&lt;/code&gt; command generates both an API client package and tool. The client package implements a &lt;code&gt;Client&lt;/code&gt;
                                object that exposes one method for each resource action. The generated code of the CLI tool leverages the package to
                                make the API requests to the service.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The &lt;code&gt;Client&lt;/code&gt; object can be configured to use request signers that get invoked prior to sending the
                                request. The signers modify the request to include auth headers for example. goa comes with signers that implement
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#BasicSigner&#34;&gt;basic auth&lt;/a&gt;,
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#JWTSigner&#34;&gt;JWT auth&lt;/a&gt; and a subset of
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#OAuth2Signer&#34;&gt;OAuth2&lt;/a&gt;. Custom signers my be used as well, they must
                                implement the &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#Signer&#34;&gt;Signer&lt;/a&gt; interface.
                                This command accepts three additional flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;version&lt;/code&gt; specifies the CLI tool version.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;signer&lt;/code&gt; specifies a signer object supported by the API. Signer objects generally perform auth.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;signerPkg&lt;/code&gt; specifies the path to the package implementing the signer objects if not goa.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen js&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;js&lt;/code&gt; command generates a JavaScript API client suitable for both client-side and server-side
                                applications. The generated code defines an anonymous AMD module and relies on the &lt;a href=&#34;https://github.com/mzabriskie/axios&#34;&gt;axios&lt;/a&gt;
                                promised-based JavaScript library for making the actual HTTP requests.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The generated module wraps the &lt;code&gt;axios&lt;/code&gt; client and adds API specific functions, for example:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// List all bottles in account optionally filtering by year
// path is the request path, the format is &amp;ldquo;/cellar/accounts/:accountID/bottles&amp;rdquo;
// years is used to build the request query string.
// config is an optional object to be merged into the config built by the function prior to making the request.
// The content of the config object is described here: &lt;a href=&#34;https://github.com/mzabriskie/axios#request-api&#34;&gt;https://github.com/mzabriskie/axios#request-api&lt;/a&gt;
// This function returns a promise which raises an error if the HTTP response is a 4xx or 5xx.
client.listBottle = function (path, years, config) {
  cfg = {
    timeout: timeout,
    url: urlPrefix + path,
    method: &amp;lsquo;get&amp;rsquo;,
    params: {
      years: years
    },
    responseType: &amp;lsquo;json&amp;rsquo;
  };
  if (config) {
    cfg = utils.merge(cfg, config);
  }
  return client(cfg);
}&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The generated client module can be loaded using &lt;code&gt;requirejs&lt;/code&gt;:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;requirejs.config({
  paths: {
    axios: &amp;lsquo;/js/axios.min&amp;rsquo;,
    client: &amp;lsquo;/js/client&amp;rsquo;
  }
});
requirejs([&amp;lsquo;client&amp;rsquo;], function (client) {
  client().listBottle (&amp;ldquo;/cellar/accounts/440/bottles&amp;rdquo;, 317)
    .then(function (resp) {
      // All good, use resp
    })
    .catch(function (resp) {
      // Woops, request failed or returned 4xx or 5xx.
    });
});&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The code above assumes that the generated files &lt;code&gt;client.js&lt;/code&gt; and &lt;code&gt;axios.min.js&lt;/code&gt; are both
                                served from &lt;code&gt;/js&lt;/code&gt;. The &lt;code&gt;resp&lt;/code&gt; value returned to the promise is an object with the following
                                fields:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code language=&#34;javascript&#34;&gt;{
  // &lt;code&gt;data&lt;/code&gt; is the response that was provided by the server
  data: {},&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;status&lt;/code&gt; is the HTTP status code from the server response
  status: 200,&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;statusText&lt;/code&gt; is the HTTP status message from the server response
  statusText: &amp;lsquo;OK&amp;rsquo;,&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;headers&lt;/code&gt; the headers that the server responded with
  headers: {},&lt;/p&gt;

&lt;p&gt;// &lt;code&gt;config&lt;/code&gt; is the config that was provided to &lt;code&gt;axios&lt;/code&gt; for the request
  config: {}
}&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                The generator also produces an example HTML and controller that can be mounted on a
                                goa service to quickly test the JavaScript. Simply import the &lt;code&gt;js&lt;/code&gt; Go
                                package in your service main and mount the controller. The example HTML is served
                                under &lt;code&gt;/js&lt;/code&gt; so that loading this path in a browser will trigger the generated
                                JavaScript.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen swagger&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;swagger&lt;/code&gt; command generates a &lt;a href=&#34;http://swagger.io&#34;&gt;Swagger&lt;/a&gt; specification of the API.
                                The command does not accept additional flags. It generates both the Swagger JSON as well as a controller that
                                can be mounted on the goa service to serve it under &lt;code&gt;/swagger.json&lt;/code&gt;.
                        &lt;/p&gt;
                        &lt;h2&gt;&lt;code&gt;goagen schema&lt;/code&gt;&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;schema&lt;/code&gt; command generates a &lt;a href=&#34;https://blog.heroku.com/archives/2014/1/8/json_schema_for_heroku_platform_api&#34;&gt;Heroku-like&lt;/a&gt;
                                JSON hyper-schema representation of the API. It generates both the JSON as well as a controller that
                                can be mounted on the goa service to serve it under &lt;code&gt;/schema.json&lt;/code&gt;. The command accepts an additional flag:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;url|-u=URL&lt;/code&gt; specifies the base URL used to build the JSON schema ID.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;h2&gt;&lt;code&gt;goagen gen&lt;/code&gt;: goagen Plugins&lt;/h2&gt;
                        &lt;p&gt;
                                The &lt;code&gt;gen&lt;/code&gt; command makes it possible to invoke &lt;code&gt;goagen&lt;/code&gt; plugins.
                                This command accepts two flags:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg-path=PKG-PATH&lt;/code&gt; specifies the Go package path to the plugin package.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        &lt;code&gt;&amp;ndash;pkg-name=PKG-NAME&lt;/code&gt; specifies the Go package name of the plugin package. It defaults to the
                                        name of the inner most directory in the Go package path.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                A plugin consists of a Go package which exposes a &lt;code&gt;Generate&lt;/code&gt; function with the following
                                signature:
                        &lt;p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func Generate(api *design.APIDefinition) ([]string, error)
&lt;/pre&gt;&lt;/code&gt;
                        &lt;p&gt;
                                 where api is the API definition computed from the design package. On success &lt;code&gt;Generate&lt;/code&gt; should return
                                 the path to the generated files. On error the error message gets displayed to the user (and
                                 goagen exist with status 1).
                        &lt;/p&gt;
                        &lt;p&gt;
                                 The &lt;code&gt;Generate&lt;/code&gt; method should take advantage of the &lt;code&gt;APIDefinition&lt;/code&gt; &lt;code&gt;IterateXXX&lt;/code&gt; methods to iterate
                                 through the API resources, media types and types to guarantee that the order doesn&amp;rsquo;t change
                                 between two invokation of the function (thereby generating different output even if the design
                                 hasn&amp;rsquo;t changed).
                        &lt;/p&gt;
                        &lt;p&gt;
                                 They may also take advantage of Metadata. The goa design language allows defining Metadata on a
                                 number of definitions: API, Resource, Action, Response and Attribute (which means Type and
                                 MediaType as well since these definitions are attributes). A metadata field consists of a
                                 key/value pair where both are simple strings. The generator can use these key/value pairs to
                                 produce different results, see example below. Metadata has no effect on the buit-in generators.
                                 The Output directory is available through the codegen.OutputDir global variable.
                        &lt;/p&gt;
                        &lt;p&gt;
                                 Package genresnames is an example of a goagen plugin. It creates a file &amp;ldquo;names.txt&amp;rdquo; containing
                                 the names of the API resources sorted in alphabetical order. If a resource has a
                                 metadata pair with the key &amp;ldquo;genresnames/name&amp;rdquo; then the plugin uses the metadata value instead.
                        &lt;/p&gt;
                        &lt;p&gt;
                                 Invoke the plugin with:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code&gt;
                                 goagen gen -d &lt;Go package path to design package&gt; &amp;ndash;pkg-path=&lt;Go package path to genresnames&gt;
                        &lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                 Source code:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;
package genresnames&lt;/p&gt;

&lt;p&gt;import (
        &amp;ldquo;io/ioutil&amp;rdquo;
        &amp;ldquo;os&amp;rdquo;
        &amp;ldquo;path/filepath&amp;rdquo;
        &amp;ldquo;strings&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;gopkg.in/alecthomas/kingpin.v2&amp;quot;

    &amp;quot;github.com/goadesign/goa/design&amp;quot;
    &amp;quot;github.com/goadesign/goa/goagen/codegen&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;)&lt;/p&gt;

&lt;p&gt;// Generate is the function called by goagen to generate the names file.
func Generate(api *design.APIDefinition) ([]string, error) {
        // Make sure to parse the common flags so that codegen.OutputDir gets properly
        // initialized.
        app := kingpin.New(&amp;ldquo;Resource names&amp;rdquo;, &amp;ldquo;Resource name generator&amp;rdquo;)
        codegen.RegisterFlags(app)
        if _, err := app.Parse(os.Args[1:]); err != nil {
                panic(err)
        }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // Now iterate through the resources to gather their names
    names := make([]string, len(api.Resources))
    i := 0
    api.IterateResources(func(res *design.ResourceDefinition) error {
            if n, ok := res.Metadata[&amp;quot;genresnames/name&amp;quot;]; ok {
                    names[i] = n
            } else {
                    names[i] = res.Name
            }
            i++
            return nil
    })
    content := strings.Join(names, &amp;quot;\n&amp;quot;)

    // Write the output file and return its name
    outputFile := filepath.Join(codegen.OutputDir, &amp;quot;names.txt&amp;quot;)
    ioutil.WriteFile(outputFile, []byte(content), 0755)
    return []string{outputFile}, nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>runtime</title>
      <link>http://goa.design/components/runtime/</link>
      <pubDate>Sat, 30 Jan 2016 11:01:06 -0500</pubDate>
      
      <guid>http://goa.design/components/runtime/</guid>
      <description>&lt;p&gt;
                                The goa runtime is implemented by the goa package. It includes the
                                implementation of the goa action context which provides the means
                                to access the request state and write the response. The package
                                also contains a number of data structures and algorithms
                                that provide supporting functionality to the service. These include
                                logging, error handling, versioning support etc.
                                goa follows the &#34;battery included&#34; model for the supporting
                                functionality letting you customize all aspects if the provided
                                default is not sufficient.
                        &lt;/p&gt;
                        &lt;h3&gt;The goa Action Context&lt;/h3&gt;
                        &lt;p&gt;
                                The action context is a data structure that is provided to all goa
                                controller action implementations as first parameter. It leverages the
                                &lt;a href=&#34;https://blog.golang.org/context&#34;&gt;work done&lt;/a&gt; at Google
                                around passing contexts across interface boundaries and adds to it
                                by providing additional methods tailored to the goa use case.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The context exposes methods to access the request state and write
                                the response in a generic way like many other Go web frameworks. For
                                example path parameters or querystring values can be accessed using
                                the method &lt;code&gt;Get&lt;/code&gt; which returns a string. However goa goes
                                one step further and leverages the code generation provided by `goagen`
                                to define &lt;i&gt;action specific&lt;/i&gt; fields that provide access to the
                                same state using &#34;typed&#34; methods. So for example if a path parameter
                                called &lt;code&gt;ID&lt;/code&gt; is defined in the design as being of type
                                &lt;code&gt;Integer&lt;/code&gt; the corresponding controller action method
                                accepts a context data structure which exposes a field named &lt;code&gt;ID&lt;/code&gt;
                                of type &lt;code&gt;int&lt;/code&gt;. The same goes for the request payload so that
                                accessing the &lt;code&gt;Payload&lt;/code&gt; field of an action context returns
                                a data structure that is specific to that action as described in the
                                design. This alleviates the need for reflection or otherwise &#34;binding&#34;
                                the context to a struct.&lt;br/&gt;
                                &lt;br/&gt;
                                The same goes for writing responses: while the underlying http
                                ResponseWriter is available to write the response, the action context
                                also provides action specific methods for writing the responses
                                described in the design. These generated methods take care of writing
                                the correct status code and content-type header for example. They
                                also make it possible to specificy the response payload using custom
                                data structures generated from the media type described in the design.
                        &lt;/p&gt;
                        &lt;p&gt;
                                As mentioned earlier each controller action context wraps a golang
                                package context. This means that deadlines and cancelation signals
                                are available to all action implemetations. The built-in
                                &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa#Timeout&#34;&gt;Timeout&lt;/a&gt; middleware
                                takes advantage of this ability to let services or controllers
                                define a timeout value for all requests.
                        &lt;/p&gt;
                        &lt;h3&gt;Supporting Functionality&lt;/h3&gt;
                        &lt;h4&gt;Service Mux&lt;/h4&gt;
                        &lt;p&gt;
                                The goa HTTP request mux is in charge of dispatching incoming requests
                                to the correct controller action. It implements the &lt;code&gt;ServeMux&lt;/code&gt;
                                interface which on top of the usual binding of HTTP method and path
                                to handler also provides support for API versioning.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The &lt;code&gt;ServeMux&lt;/code&gt; interface &lt;code&gt;Handle&lt;/code&gt; method associates
                                a request HTTP method and path to a HandleFunc which is a function
                                that accepts a http ResponseWriter and Request as well as a instance
                                of url Values that contain all the path and querystring parameters.&lt;br/&gt;
                                &lt;br/&gt;
                                The interface also exposes a &lt;code&gt;Version&lt;/code&gt; method that gives
                                access to version specific muxes. This makes it possible to define
                                different controller actions for the same request HTTP method and
                                path but different API versions. The actual algorithm used to
                                compute the targeted API version is provided via an instance of
                                &lt;code&gt;SelectVersionFunc&lt;/code&gt;. goa comes with several implementations
                                of SelectVersionFunc:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;PathSelectVersionFunc&lt;/code&gt; function creates a
                                        &lt;code&gt;SelectVersionFunc&lt;/code&gt; that extracts the version from the request
                                        path.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;HeaderSelectVersionFunc&lt;/code&gt; function creates a
                                        &lt;code&gt;SelectVersionFunc&lt;/code&gt; that extracts the version from the given
                                        HTTP request header.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;QuerySelectVersionFunc&lt;/code&gt; function creates a
                                        &lt;code&gt;SelectVersionFunc&lt;/code&gt; that extracts the version from
                                        the given querystring value.
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                The function &lt;code&gt;CombineSelectVersionFunc&lt;/code&gt; makes it possible to
                                combine any number of &lt;code&gt;SelectionVersionFunc&lt;/code&gt; to produce
                                arbitrarily complex lookup algorithms.
                        &lt;/p&gt;
                        &lt;h4&gt;Middleware&lt;/h4&gt;
                        &lt;p&gt;
                                goa defines its own type of middleware but also supports &#34;raw&#34; http
                                middleware. The &lt;a href=&#34;https://github.com/goadesign/goa-middleware&#34;&gt;goa-middleware&lt;/a&gt;
                                repo contains a number of goa middlewares.
                        &lt;/p&gt;
                        &lt;h4&gt;Logging&lt;/h4&gt;
                        &lt;p&gt;
                                goa uses structured logging so that logs created at each level contain
                                all the contextual information. The root logger is the service-level
                                &lt;code&gt;Logger&lt;/code&gt; field. Loggers are derived from it for each
                                controller and for each action. Finally a logger is also created for
                                each request so that log entries created inside a request contain
                                the full context: service name, controller name, action name and
                                unique request ID.
                        &lt;p&gt;
                        &lt;h4&gt;Error Handling&lt;/h4&gt;
                        &lt;p&gt;
                                All goa actions return an error. Error handlers can be defined at the 
                                controller or service level. If an action returns a non-nil error
                                then the controller error handler is invoked. If the controller does
                                not define a error handler then the service-wide error handler is
                                invoked instead. The default goa error handler simply returns a 500
                                response containing the error details in the body.
                        &lt;p&gt;
                        &lt;h4&gt;Graceful Shutdown&lt;/h4&gt;
                        &lt;p&gt;
                                A goa service can be instantiated via `NewGraceful` in which case the
                                http server is implemented by the &lt;a href=&#34;https://godoc.org/github.com/tylerb/graceful&#34;&gt;graceful package&lt;/a&gt;
                                which provides graceful shutdown behavior where upon receving a
                                shutdown signal the service waits until all pending requests are
                                completed before terminating.
                        &lt;/p&gt;
                        &lt;h3&gt;Swapping the Batteries&lt;/h3&gt;
                        &lt;h4&gt;Error Handling&lt;/h4&gt;
                        &lt;p&gt;
                                The service interface exposes a &lt;code&gt;SetHandler&lt;/code&gt; method which
                                allows overriding the default service error handler. goa comes with
                                two built-in error handlers:
                        &lt;/p&gt;
                        &lt;ul&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;DefaultErrorHandler&lt;/code&gt; returns a 400 if the error
                                        is an instance of &lt;code&gt;BadRequestError&lt;/code&gt;, 500 otherwise.
                                        It also always writes the error message to the response body.
                                &lt;/li&gt;
                                &lt;li&gt;
                                        The &lt;code&gt;TerseErrorHandler&lt;/code&gt; behaves identically to the
                                        default error handler with the exception that it does not write
                                        the error message to the response body for internal errors
                                        (i.e. errors that are not instances of &lt;code&gt;BadRequestError&lt;/code&gt;).
                                &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;
                                Custom error handlers can be easily swapped in, they consist of a
                                function that accepts an instance of an action context and of an 
                                error.
                        &lt;/p&gt;
                        &lt;h4&gt;Request Mux and Versioning&lt;/h4&gt;
                        &lt;p&gt;
                                As mentioned above the goa mux supports defining version specific
                                muxes. Different versions can be defined in the design using the 
                                &lt;code&gt;Version&lt;/code&gt; DSL:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package design

import (
        . &#34;github.com/goadesign/goa/design&#34;
        . &#34;github.com/goadesign/goa/design/apidsl&#34;
)

var _ = API(&#34;cellar&#34;, func() {
        Description(&#34;A basic example of an API implemented with goa&#34;)
        Scheme(&#34;http&#34;)
        Host(&#34;localhost:8080&#34;)
})

var _ = Version(&#34;1.0&#34;, func() {
        Title(&#34;The virtual winecellar v1.0 API&#34;)
        // ... other API level properties
})

var _ = Version(&#34;2.0&#34;, func() {
        Title(&#34;The virtual winecellar v2.0 API&#34;)
        // ... other API level properties
})

var _ = Resource(&#34;bottle&#34;, func() {
        BasePath(&#34;/bottles&#34;)
        Version(&#34;1.0&#34;)
        Version(&#34;2.0&#34;)
        // ... other resource properties
})

var _ = Resource(&#34;bottle&#34;, func() {
        BasePath(&#34;/bottles&#34;)
        Version(&#34;3.0&#34;)
        // ... other resource properties
})
&lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                When &lt;code&gt;goagen&lt;/code&gt; sees that the design defines versions it
                                produces code that leverages the ServeMux interface Version method
                                to mount controllers onto the appropriate version mux:
                        &lt;/p&gt;
                        &lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func MountBottleV1Controller(service goa.Service, ctrl v1.BottleController) {
                                // ...
                        &lt;/code&gt;&lt;/pre&gt;
                        &lt;p&gt;
                                Each version defined in the design produces a different package containing
                                the corresponding generated controllers.
                        &lt;/p&gt;
                        &lt;p&gt;
                                The generated code relies on the &lt;code&gt;ServeMux&lt;/code&gt; method exposed
                                by the service to retrieve the top-level mux. The goa default mux
                                implementation relies on the &lt;a href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;httprouter&lt;/a&gt;
                                package to implement the low level dispatch. Other low level routers
                                can easily be subsituted by providing an implementation of the
                                ServeMux interface.
                        &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>swagger</title>
      <link>http://goa.design/components/swagger/</link>
      <pubDate>Sat, 30 Jan 2016 11:01:06 -0500</pubDate>
      
      <guid>http://goa.design/components/swagger/</guid>
      <description>&lt;p&gt;Content of the file goes Here&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>encoding/binc</title>
      <link>http://goa.design/godoc/encoding/binc/binc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/encoding/binc/binc/</guid>
      <description>

&lt;h1 id=&#34;binc:f2560534d56b173906575db18b28614e&#34;&gt;binc&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/encoding/binc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-decoderfactory:f2560534d56b173906575db18b28614e&#34;&gt;func DecoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DecoderFactory() goa.EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DecoderFactory is the default factory used by the goa &lt;code&gt;Consumes&lt;/code&gt; DSL&lt;/p&gt;

&lt;h2 id=&#34;func-encoderfactory:f2560534d56b173906575db18b28614e&#34;&gt;func EncoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func EncoderFactory() goa.EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EncoderFactory is the default factory used by the goa &lt;code&gt;Produces&lt;/code&gt; DSL&lt;/p&gt;

&lt;h2 id=&#34;type-factory:f2560534d56b173906575db18b28614e&#34;&gt;type Factory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Factory struct{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Factory uses github.com/ugorji/go/codec to act as an DecoderFactory and EncoderFactory&lt;/p&gt;

&lt;h3 id=&#34;func-factory-newdecoder:f2560534d56b173906575db18b28614e&#34;&gt;func (*Factory) NewDecoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (f *Factory) NewDecoder(r io.Reader) goa.Decoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewDecoder returns a new json.Decoder that satisfies goa.Decoder
The built in codec.Decoder has a compatible Reset() func&lt;/p&gt;

&lt;h3 id=&#34;func-factory-newencoder:f2560534d56b173906575db18b28614e&#34;&gt;func (*Factory) NewEncoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (f *Factory) NewEncoder(w io.Writer) goa.Encoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewEncoder returns a new json.Encoder that satisfies goa.Encoder
The built in codec.Encoder has a compatible Reset() func&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>encoding/cbor</title>
      <link>http://goa.design/godoc/encoding/cbor/cbor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/encoding/cbor/cbor/</guid>
      <description>

&lt;h1 id=&#34;cbor:74653cf70b7ec2a9e9772524989bf914&#34;&gt;cbor&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/encoding/cbor&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-decoderfactory:74653cf70b7ec2a9e9772524989bf914&#34;&gt;func DecoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DecoderFactory() goa.EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DecoderFactory is the default factory used by the goa &lt;code&gt;Consumes&lt;/code&gt; DSL&lt;/p&gt;

&lt;h2 id=&#34;func-encoderfactory:74653cf70b7ec2a9e9772524989bf914&#34;&gt;func EncoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func EncoderFactory() goa.EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EncoderFactory is the default factory used by the goa &lt;code&gt;Produces&lt;/code&gt; DSL&lt;/p&gt;

&lt;h2 id=&#34;type-factory:74653cf70b7ec2a9e9772524989bf914&#34;&gt;type Factory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Factory struct{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Factory uses github.com/ugorji/go/codec to act as an DecoderFactory and EncoderFactory&lt;/p&gt;

&lt;h3 id=&#34;func-factory-newdecoder:74653cf70b7ec2a9e9772524989bf914&#34;&gt;func (*Factory) NewDecoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (f *Factory) NewDecoder(r io.Reader) goa.Decoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewDecoder returns a new json.Decoder that satisfies goa.Decoder
The built in codec.Decoder has a compatible Reset() func&lt;/p&gt;

&lt;h3 id=&#34;func-factory-newencoder:74653cf70b7ec2a9e9772524989bf914&#34;&gt;func (*Factory) NewEncoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (f *Factory) NewEncoder(w io.Writer) goa.Encoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewEncoder returns a new json.Encoder that satisfies goa.Encoder
The built in codec.Encoder has a compatible Reset() func&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>encoding/gogoprotobuf</title>
      <link>http://goa.design/godoc/encoding/gogoprotobuf/gogoprotobuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/encoding/gogoprotobuf/gogoprotobuf/</guid>
      <description>

&lt;h1 id=&#34;gogoprotobuf:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;gogoprotobuf&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/encoding/gogoprotobuf&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-decoderfactory:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;func DecoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DecoderFactory() goa.EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DecoderFactory is the default factory used by the goa &lt;code&gt;Consumes&lt;/code&gt; DSL&lt;/p&gt;

&lt;h2 id=&#34;func-encoderfactory:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;func EncoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func EncoderFactory() goa.EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EncoderFactory is the default factory used by the goa &lt;code&gt;Produces&lt;/code&gt; DSL&lt;/p&gt;

&lt;h2 id=&#34;type-factory:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;type Factory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Factory struct{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Factory uses github.com/ugorji/go/codec to act as an DecoderFactory and EncoderFactory&lt;/p&gt;

&lt;h3 id=&#34;func-factory-newdecoder:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;func (*Factory) NewDecoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (f *Factory) NewDecoder(r io.Reader) goa.Decoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewDecoder returns a new proto.Decoder that satisfies goa.Decoder&lt;/p&gt;

&lt;h3 id=&#34;func-factory-newencoder:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;func (*Factory) NewEncoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (f *Factory) NewEncoder(w io.Writer) goa.Encoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewEncoder returns a new proto.Encoder that satisfies goa.Encoder&lt;/p&gt;

&lt;h2 id=&#34;type-protodecoder:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;type ProtoDecoder&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ProtoDecoder struct {
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ProtoDecoder stores state between Reset and Decode&lt;/p&gt;

&lt;h3 id=&#34;func-protodecoder-decode:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;func (*ProtoDecoder) Decode&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (dec *ProtoDecoder) Decode(v interface{}) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Decode unmarshals an io.Reader into proto.Message v&lt;/p&gt;

&lt;h3 id=&#34;func-protodecoder-reset:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;func (*ProtoDecoder) Reset&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (dec *ProtoDecoder) Reset(r io.Reader)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reset stores the new reader and resets its bytes.Buffer and proto.Buffer&lt;/p&gt;

&lt;h2 id=&#34;type-protoencoder:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;type ProtoEncoder&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ProtoEncoder struct {
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ProtoEncoder stores state between Reset and Encode&lt;/p&gt;

&lt;h3 id=&#34;func-protoencoder-encode:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;func (*ProtoEncoder) Encode&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (enc *ProtoEncoder) Encode(v interface{}) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Encode marshals a proto.Message and writes it to an io.Writer&lt;/p&gt;

&lt;h3 id=&#34;func-protoencoder-reset:eeb5e4ef7dc54409a7bfb37ce59b19e2&#34;&gt;func (*ProtoEncoder) Reset&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (enc *ProtoEncoder) Reset(w io.Writer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reset stores the new writer and resets its proto.Buffer&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>encoding/json</title>
      <link>http://goa.design/godoc/encoding/json/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/encoding/json/json/</guid>
      <description>

&lt;h1 id=&#34;json:8c33735db6a47ed544ad16f66abebe27&#34;&gt;json&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/encoding/json&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-decoderfactory:8c33735db6a47ed544ad16f66abebe27&#34;&gt;func DecoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DecoderFactory() goa.EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DecoderFactory is the default factory used by the goa &lt;code&gt;Consumes&lt;/code&gt; DSL&lt;/p&gt;

&lt;h2 id=&#34;func-encoderfactory:8c33735db6a47ed544ad16f66abebe27&#34;&gt;func EncoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func EncoderFactory() goa.EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EncoderFactory is the default factory used by the goa &lt;code&gt;Produces&lt;/code&gt; DSL&lt;/p&gt;

&lt;h2 id=&#34;type-factory:8c33735db6a47ed544ad16f66abebe27&#34;&gt;type Factory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Factory struct{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Factory uses github.com/ugorji/go/codec to act as an DecoderFactory and EncoderFactory&lt;/p&gt;

&lt;h3 id=&#34;func-factory-newdecoder:8c33735db6a47ed544ad16f66abebe27&#34;&gt;func (*Factory) NewDecoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (f *Factory) NewDecoder(r io.Reader) goa.Decoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewDecoder returns a new json.Decoder that satisfies goa.Decoder
The built in codec.Decoder has a compatible Reset() func&lt;/p&gt;

&lt;h3 id=&#34;func-factory-newencoder:8c33735db6a47ed544ad16f66abebe27&#34;&gt;func (*Factory) NewEncoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (f *Factory) NewEncoder(w io.Writer) goa.Encoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewEncoder returns a new json.Encoder that satisfies goa.Encoder
The built in codec.Encoder has a compatible Reset() func&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>encoding/msgpack</title>
      <link>http://goa.design/godoc/encoding/msgpack/msgpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/encoding/msgpack/msgpack/</guid>
      <description>

&lt;h1 id=&#34;msgpack:1574d51e403296c43e921da78612bc7c&#34;&gt;msgpack&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/encoding/msgpack&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-decoderfactory:1574d51e403296c43e921da78612bc7c&#34;&gt;func DecoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DecoderFactory() goa.EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DecoderFactory is the default factory used by the goa &lt;code&gt;Consumes&lt;/code&gt; DSL&lt;/p&gt;

&lt;h2 id=&#34;func-encoderfactory:1574d51e403296c43e921da78612bc7c&#34;&gt;func EncoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func EncoderFactory() goa.EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EncoderFactory is the default factory used by the goa &lt;code&gt;Produces&lt;/code&gt; DSL&lt;/p&gt;

&lt;h2 id=&#34;type-factory:1574d51e403296c43e921da78612bc7c&#34;&gt;type Factory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Factory struct{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Factory uses github.com/ugorji/go/codec to act as an DecoderFactory and EncoderFactory&lt;/p&gt;

&lt;h3 id=&#34;func-factory-newdecoder:1574d51e403296c43e921da78612bc7c&#34;&gt;func (*Factory) NewDecoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (f *Factory) NewDecoder(r io.Reader) goa.Decoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewDecoder returns a new json.Decoder that satisfies goa.Decoder
The built in codec.Decoder has a compatible Reset() func&lt;/p&gt;

&lt;h3 id=&#34;func-factory-newencoder:1574d51e403296c43e921da78612bc7c&#34;&gt;func (*Factory) NewEncoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (f *Factory) NewEncoder(w io.Writer) goa.Encoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewEncoder returns a new json.Encoder that satisfies goa.Encoder
The built in codec.Encoder has a compatible Reset() func&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>goa</title>
      <link>http://goa.design/godoc/goa/goa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/goa/goa/</guid>
      <description>

&lt;h1 id=&#34;goa:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;goa&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/goa&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package goa provides the runtime support for goa web services. See also &lt;a href=&#34;http://goa.design&#34;&gt;http://goa.design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;package design: &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa/design&#34;&gt;https://godoc.org/github.com/goadesign/goa/design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;package dsl: &lt;a href=&#34;https://godoc.org/github.com/goadesign/goa/design/dsl&#34;&gt;https://godoc.org/github.com/goadesign/goa/design/dsl&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;code-generation:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;Code Generation&lt;/h3&gt;

&lt;p&gt;goa service development begins with writing the &lt;em&gt;design&lt;/em&gt; of a service. The design is described using
the goa language implemented by the github.com/goadesign/goa/design/dsl package. The goagen tool
consumes the metadata produced from executing the design language to generate service specific code
that glues the underlying HTTP server with action specific code and data structures.&lt;/p&gt;

&lt;p&gt;The goa package contains supporting functionality for the generated code including basic request
and response state management through the Context data structure, error handling via the
service and controller ErrorHandler field, middleware support via the Middleware data structure as
well as input (and output) format validation algorithms.&lt;/p&gt;

&lt;h3 id=&#34;request-context:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;Request Context&lt;/h3&gt;

&lt;p&gt;The Context data structure provides access to both the request and response state. It implements
the golang.org/x/net/Context interface so that deadlines and cancelation signals may also be
implemented with it.&lt;/p&gt;

&lt;p&gt;The request state is accessible through the Get, GetMany and Payload methods which return the values
of the request parameters, query strings and request body. Action specific contexts wrap Context and
expose properly typed fields corresponding to the request parameters and body data structure
descriptions appearing in the design.&lt;/p&gt;

&lt;p&gt;The response state can be accessed through the ResponseStatus, ResponseLength and Header methods.
The Context type implements the http.ResponseWriter interface and thus action contexts can be used
in places http.ResponseWriter can. Action contexts provide action specific helper methods that write
the responses as described in the design optionally taking an instance of the media type for
responses that contain a body.&lt;/p&gt;

&lt;p&gt;Here is an example showing an &amp;ldquo;update&amp;rdquo; action corresponding to following design (extract):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Resource(&amp;quot;bottle&amp;quot;, func() {
    DefaultMedia(Bottle)
    Action(&amp;quot;update&amp;quot;, func() {
        Params(func() {
            Param(&amp;quot;bottleID&amp;quot;, Integer)
        })
        Payload(UpdateBottlePayload)
        Response(OK)
        Response(NotFound)
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The action signature generated by goagen is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type BottleController interface {
    goa.Controller
    Update(*UpdateBottleContext) error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where UpdateBottleContext is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    type UpdateBottleContext struct {
            *goa.Context
            BottleID  int
            Payload   *UpdateBottlePayload
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and implements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (ctx *UpdateBottleContext) OK(resp *Bottle) error
func (ctx *UpdateBottleContext) NotFound() error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The definitions of the Bottle and UpdateBottlePayload data structures are ommitted for brievity.&lt;/p&gt;

&lt;h3 id=&#34;controllers:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;Controllers&lt;/h3&gt;

&lt;p&gt;There is one controller interface generated per resource defined via the design language. The
interface exposes the controller actions as well as methods to set controller specific middleware
and error handlers (see below). User code must provide data structures that implement these
interfaces when mounting a controller onto a service. The controller data structure should include
an anonymous field of type *goa.ApplicationController which takes care of implementing the
middleware and error handler handling.&lt;/p&gt;

&lt;h3 id=&#34;error-handling:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;Error Handling&lt;/h3&gt;

&lt;p&gt;The controller action methods generated by goagen such as the Update method of the BottleController
interface shown above all return an error value. The controller or service-wide error handler (if no
controller specific error handler) function is invoked whenever the value returned by a controller
action is not nil. The handler gets both the request context and the error as argument.&lt;/p&gt;

&lt;p&gt;The default handler implementation returns a response with status code 500 containing the error
message in the body. A different error handler can be specificied using the SetErrorHandler
function on either a controller or service wide. goa comes with an alternative error handler - the
TerseErrorHandler - which also returns a response with status 500 but does not write the error
message to the body of the response.&lt;/p&gt;

&lt;h3 id=&#34;middleware:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;Middleware&lt;/h3&gt;

&lt;p&gt;A goa middleware is a function that takes and returns a Handler. A Handler is a the low level
function which handles incoming HTTP requests. goagen generates the handlers code so each handler
creates the action specific context and calls the controller action with it.&lt;/p&gt;

&lt;p&gt;Middleware can be added to a goa service or a specific controller using the Service type Use method.
goa comes with a few stock middleware that handle common needs such as logging, panic recovery or
using the RequestID header to trace requests across multiple services.&lt;/p&gt;

&lt;h3 id=&#34;validation:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;Validation&lt;/h3&gt;

&lt;p&gt;The goa design language documented in the dsl package makes it possible to attach validations to
data structure definitions. One specific type of validation consists of defining the format that a
data structure string field must follow. Example of formats include email, data time, hostnames etc.
The ValidateFormat function provides the implementation for the format validation invoked from the
code generated by goagen.&lt;/p&gt;

&lt;p&gt;Package goa standardizes on structured error responses: a request that fails because of
invalid input or unexpected condition produces a response that contains one or more structured
error(s). Each error object has three keys: a id (number), a title and a message. The title
for a given id is always the same, the intent is to provide a human friendly categorization.
The message is specific to the error occurrence and provides additional details that often
include contextual information (name of parameters etc.).&lt;/p&gt;

&lt;p&gt;The basic data structure backing errors is TypedError which simply contains the id and message.
Multiple errors (not just TypedError instances) can be encapsulated in a MultiError. Both
TypedError and MultiError implement the error interface, the Error methods return valid JSON
that can be written directly to a response body.&lt;/p&gt;

&lt;p&gt;The code generated by goagen calls the helper functions exposed in this file when it encounters
invalid data (wrong type, validation errors etc.) such as InvalidParamTypeError,
InvalidAttributeTypeError etc. These methods take and return an error which is a MultiError that
gets built over time. The final MultiError object then gets serialized into the response and sent
back to the client. The response status code is inferred from the type wrapping the error object:
a BadRequestError produces a 400 status code while any other error produce a 500. This behavior
can be overridden by setting a custom ErrorHandler in the application.&lt;/p&gt;

&lt;h2 id=&#34;constants:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;Constants&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
    // ErrInvalidParamType is the error produced by the generated code when
    // a request parameter type does not match the design.
    ErrInvalidParamType = iota + 1

    // ErrMissingParam is the error produced by the generated code when a
    // required request parameter is missing.
    ErrMissingParam

    // ErrInvalidAttributeType is the error produced by the generated
    // code when a data structure attribute type does not match the design
    // definition.
    ErrInvalidAttributeType

    // ErrMissingAttribute is the error produced by the generated
    // code when a data structure attribute required by the design
    // definition is missing.
    ErrMissingAttribute

    // ErrInvalidEnumValue is the error produced by the generated code when
    // a values does not match one of the values listed in the attribute
    // definition as being valid (i.e. not part of the enum).
    ErrInvalidEnumValue

    // ErrMissingHeader is the error produced by the generated code when a
    // required header is missing.
    ErrMissingHeader

    // ErrInvalidFormat is the error produced by the generated code when
    // a value does not match the format specified in the attribute
    // definition.
    ErrInvalidFormat

    // ErrInvalidPattern is the error produced by the generated code when
    // a value does not match the regular expression specified in the
    // attribute definition.
    ErrInvalidPattern

    // ErrInvalidRange is the error produced by the generated code when
    // a value is less than the minimum specified in the design definition
    // or more than the maximum.
    ErrInvalidRange

    // ErrInvalidLength is the error produced by the generated code when
    // a value is a slice with less elements than the minimum length
    // specified in the design definition or more elements than the
    // maximum length.
    ErrInvalidLength

    // ErrInvalidVersion is the error rendered by the default mux when a
    // request specifies an invalid version.
    ErrInvalidVersion
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;Variables&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (
    // Log is the global logger from which other loggers (e.g. request specific loggers) are
    // derived. Configure it by setting its handler prior to calling New.
    // See https://godoc.org/github.com/inconshreveable/log15
    Log log.Logger

    // RootContext is the root context from which all request contexts are derived.
    // Set values in the root context prior to starting the server to make these values
    // available to all request handlers:
    //
    //	goa.RootContext = goa.RootContext.WithValue(key, value)
    //
    RootContext context.Context
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var InterruptSignals = []os.Signal{
    os.Signal(syscall.SIGINT),
    os.Signal(syscall.SIGTERM),
    os.Signal(syscall.SIGQUIT),
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;InterruptSignals is the list of signals that initiate graceful shutdown.
Note that only SIGINT is supported on Windows so this list should be
overridden by the caller when running on that platform.&lt;/p&gt;

&lt;h2 id=&#34;func-cancel:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func Cancel&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Cancel()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cancel sends a cancellation signal to all handlers through the action context.
see &lt;a href=&#34;https://godoc.org/golang.org/x/net/context&#34;&gt;https://godoc.org/golang.org/x/net/context&lt;/a&gt; for details on how to handle the signal.&lt;/p&gt;

&lt;h2 id=&#34;func-defaulterrorhandler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func DefaultErrorHandler&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DefaultErrorHandler(ctx *Context, e error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DefaultErrorHandler returns a 400 response for request validation errors (instances of
BadRequestError) and a 500 response for other errors. It writes the error message to the
response body in both cases.&lt;/p&gt;

&lt;h2 id=&#34;func-defaultmissingversionhandler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func DefaultMissingVersionHandler&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DefaultMissingVersionHandler(ctx *Context, version string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DefaultMissingVersionHandler returns a 400 response with a typed error in the body containing
the name of the version that was targeted by the request.&lt;/p&gt;

&lt;h2 id=&#34;func-fatal:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func Fatal&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Fatal(msg string, ctx ...interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fatal logs a critical message and exits the process with status code 1.
This function is meant to be used by initialization code to prevent the application from even
starting up when something is obviously wrong.
In particular this function should probably not be used when serving requests.&lt;/p&gt;

&lt;h2 id=&#34;func-invalidattributetypeerror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func InvalidAttributeTypeError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func InvalidAttributeTypeError(ctx string, val interface{}, expected string, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;InvalidAttributeTypeError appends a typed error of id ErrIncompatibleType
to err and returns it.&lt;/p&gt;

&lt;h2 id=&#34;func-invalidenumvalueerror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func InvalidEnumValueError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func InvalidEnumValueError(ctx string, val interface{}, allowed []interface{}, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;InvalidEnumValueError appends a typed error of id ErrInvalidEnumValue to
err and returns it.&lt;/p&gt;

&lt;h2 id=&#34;func-invalidformaterror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func InvalidFormatError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func InvalidFormatError(ctx, target string, format Format, formatError, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;InvalidFormatError appends a typed error of id ErrInvalidFormat to err and
returns it.&lt;/p&gt;

&lt;h2 id=&#34;func-invalidlengtherror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func InvalidLengthError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func InvalidLengthError(ctx string, target interface{}, ln, value int, min bool, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;InvalidLengthError appends a typed error of id ErrInvalidLength to err and
returns it.&lt;/p&gt;

&lt;h2 id=&#34;func-invalidparamtypeerror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func InvalidParamTypeError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func InvalidParamTypeError(name string, val interface{}, expected string, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;InvalidParamTypeError appends a typed error of id ErrInvalidParamType to
err and returns it.&lt;/p&gt;

&lt;h2 id=&#34;func-invalidpatternerror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func InvalidPatternError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func InvalidPatternError(ctx, target string, pattern string, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;InvalidPatternError appends a typed error of id ErrInvalidPattern to err and
returns it.&lt;/p&gt;

&lt;h2 id=&#34;func-invalidrangeerror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func InvalidRangeError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func InvalidRangeError(ctx string, target interface{}, value int, min bool, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;InvalidRangeError appends a typed error of id ErrInvalidRange to err and
returns it.&lt;/p&gt;

&lt;h2 id=&#34;func-missingattributeerror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func MissingAttributeError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func MissingAttributeError(ctx, name string, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MissingAttributeError appends a typed error of id ErrMissingAttribute to
err and returns it.&lt;/p&gt;

&lt;h2 id=&#34;func-missingheadererror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func MissingHeaderError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func MissingHeaderError(name string, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MissingHeaderError appends a typed error of id ErrMissingHeader to err and
returns it.&lt;/p&gt;

&lt;h2 id=&#34;func-missingparamerror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func MissingParamError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func MissingParamError(name string, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MissingParamError appends a typed error of id ErrMissingParam to err and
returns it.&lt;/p&gt;

&lt;h2 id=&#34;func-reporterror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func ReportError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ReportError(err error, err2 error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ReportError coerces the first argument into a MultiError then appends the second argument and
returns the resulting MultiError.&lt;/p&gt;

&lt;h2 id=&#34;func-terseerrorhandler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func TerseErrorHandler&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TerseErrorHandler(ctx *Context, e error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TerseErrorHandler behaves like DefaultErrorHandler except that it does not write to the response
body for internal errors.&lt;/p&gt;

&lt;h2 id=&#34;func-validateformat:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func ValidateFormat&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ValidateFormat(f Format, val string) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ValidateFormat validates a string against a standard format.
It returns nil if the string conforms to the format, an error otherwise.
The format specification follows the json schema draft 4 validation extension.
see &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor105&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor105&lt;/a&gt;
Supported formats are:
- &amp;ldquo;date-time&amp;rdquo;: RFC3339 date time value
- &amp;ldquo;email&amp;rdquo;: RFC5322 email address
- &amp;ldquo;hostname&amp;rdquo;: RFC1035 Internet host name
- &amp;ldquo;ipv4&amp;rdquo; and &amp;ldquo;ipv6&amp;rdquo;: RFC2673 and RFC2373 IP address values
- &amp;ldquo;uri&amp;rdquo;: RFC3986 URI value
- &amp;ldquo;mac&amp;rdquo;: IEEE 802 MAC-48, EUI-48 or EUI-64 MAC address value
- &amp;ldquo;cidr&amp;rdquo;: RFC4632 and RFC4291 CIDR notation IP address value
- &amp;ldquo;regexp&amp;rdquo;: Regular expression syntax accepted by RE2&lt;/p&gt;

&lt;h2 id=&#34;func-validatepattern:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func ValidatePattern&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ValidatePattern(p string, val string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ValidatePattern returns an error if val does not match the regular expression p.
It makes an effort to minimize the number of times the regular expression needs to be compiled.&lt;/p&gt;

&lt;h2 id=&#34;type-application:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Application&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Application struct {
    log.Logger // Application logger
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Application represents a goa application. At the basic level an application consists of
a set of controllers, each implementing a given resource actions. goagen generates
global functions - one per resource - that make it possible to mount the corresponding
controller onto an application. An application contains the middleware, logger and error
handler shared by all its controllers. Setting up an application might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;api := goa.New(&amp;quot;my api&amp;quot;)
api.Use(SomeMiddleware())
rc := NewResourceController()
rc.Use(SomeOtherMiddleware())
app.MountResourceController(api, rc)
api.ListenAndServe(&amp;quot;:80&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where NewResourceController returns an object that implements the resource actions as
defined by the corresponding interface generated by goagen.&lt;/p&gt;

&lt;h3 id=&#34;func-application-decode:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (Application) Decode&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver Application) Decode(v interface{}, body io.Reader, contentType string) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Decode uses registered Decoders to unmarshal a body based on the contentType&lt;/p&gt;

&lt;h3 id=&#34;func-application-decoderequest:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (Application) DecodeRequest&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver Application) DecodeRequest(ctx *Context, v interface{}) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DecodeRequest retrives the request body and &lt;code&gt;Content-Type&lt;/code&gt; header and uses Decode
to unmarshal into the provided &lt;code&gt;interface{}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;func-application-encoderesponse:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (Application) EncodeResponse&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver Application) EncodeResponse(ctx *Context, v interface{}) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EncodeResponse uses registered Encoders to marshal the response body based on the request
&lt;code&gt;Accept&lt;/code&gt; header and writes it to the http.ResponseWriter&lt;/p&gt;

&lt;h3 id=&#34;func-application-errorhandler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) ErrorHandler&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) ErrorHandler() ErrorHandler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ErrorHandler returns the currently set error handler.&lt;/p&gt;

&lt;h3 id=&#34;func-application-listenandserve:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) ListenAndServe&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) ListenAndServe(addr string) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ListenAndServe starts a HTTP server and sets up a listener on the given host/port.&lt;/p&gt;

&lt;h3 id=&#34;func-application-listenandservetls:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) ListenAndServeTLS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) ListenAndServeTLS(addr, certFile, keyFile string) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ListenAndServeTLS starts a HTTPS server and sets up a listener on the given host/port.&lt;/p&gt;

&lt;h3 id=&#34;func-application-name:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) Name&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) Name() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Name returns the application name.&lt;/p&gt;

&lt;h3 id=&#34;func-application-newcontroller:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) NewController&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) NewController(resName string) Controller
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewController returns a controller for the given resource. This method is mainly intended for
use by the generated code. User code shouldn&amp;rsquo;t have to call it directly.&lt;/p&gt;

&lt;h3 id=&#34;func-application-servefiles:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) ServeFiles&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) ServeFiles(path, filename string) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ServeFiles replies to the request with the contents of the named file or directory. The logic
for what to do when the filename points to a file vs. a directory is the same as the standard
http package ServeFile function. The path may end with a wildcard that matches the rest of the
URL (e.g. *filepath). If it does the matching path is appended to filename to form the full file
path, so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ServeFiles(&amp;quot;/index.html&amp;quot;, &amp;quot;/www/data/index.html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Returns the content of the file &amp;ldquo;/www/data/index.html&amp;rdquo; when requests are sent to &amp;ldquo;/index.html&amp;rdquo;
and:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ServeFiles(&amp;quot;/assets/*filepath&amp;quot;, &amp;quot;/www/data/assets&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;returns the content of the file &amp;ldquo;/www/data/assets/x/y/z&amp;rdquo; when requests are sent to
&amp;ldquo;/assets/x/y/z&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;func-application-servemux:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) ServeMux&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) ServeMux() ServeMux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ServeMux returns the top level service mux.&lt;/p&gt;

&lt;h3 id=&#34;func-application-setdecoder:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (Application) SetDecoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver Application) SetDecoder(f DecoderFactory, makeDefault bool, contentTypes ...string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetDecoder sets a specific decoder to be used for the specified content types. If
a decoder is already registered, it will be overwritten.&lt;/p&gt;

&lt;h3 id=&#34;func-application-setencoder:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (Application) SetEncoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver Application) SetEncoder(f EncoderFactory, makeDefault bool, contentTypes ...string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetEncoder sets a specific encoder to be used for the specified content types. If
an encoder is already registered, it will be overwritten.&lt;/p&gt;

&lt;h3 id=&#34;func-application-seterrorhandler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) SetErrorHandler&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) SetErrorHandler(handler ErrorHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetErrorHandler defines an application wide error handler.
The default error handler (DefaultErrorHandler) responds with a 500 status code and the error
message in the response body.
TerseErrorHandler provides an alternative implementation that does not write the error message
to the response body for internal errors (e.g. for production).
Set it with SetErrorHandler(TerseErrorHandler).
Controller specific error handlers should be set using the Controller type SetErrorHandler
method instead.&lt;/p&gt;

&lt;h3 id=&#34;func-application-setmissingversionhandler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) SetMissingVersionHandler&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) SetMissingVersionHandler(handler MissingVersionHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetMissingVersionHandler registers the service missing version handler.&lt;/p&gt;

&lt;h3 id=&#34;func-application-use:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) Use&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) Use(m Middleware)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use adds a middleware to the application wide middleware chain.
See NewMiddleware for wrapping goa and http handlers into goa middleware.
goa comes with a set of commonly used middleware, see middleware.go.
Controller specific middleware should be mounted using the Controller type Use method instead.&lt;/p&gt;

&lt;h3 id=&#34;func-application-version:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Application) Version&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (app *Application) Version(name string) ServiceVersion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Version returns an object that implements ServiceVersion based on the version name.
If there is no version registered, it will instantiate a new version.&lt;/p&gt;

&lt;h3 id=&#34;func-application-versionname:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (Application) VersionName&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver Application) VersionName() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VersionName returns the version name.&lt;/p&gt;

&lt;h2 id=&#34;type-applicationcontroller:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type ApplicationController&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ApplicationController struct {
    log.Logger // Controller logger
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ApplicationController provides the common state and behavior for generated controllers.&lt;/p&gt;

&lt;h3 id=&#34;func-applicationcontroller-errorhandler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*ApplicationController) ErrorHandler&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctrl *ApplicationController) ErrorHandler() ErrorHandler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ErrorHandler returns the currently set error handler.&lt;/p&gt;

&lt;h3 id=&#34;func-applicationcontroller-handleerror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*ApplicationController) HandleError&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctrl *ApplicationController) HandleError(ctx *Context, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HandleError invokes the controller error handler or - if there isn&amp;rsquo;t one - the service error
handler.&lt;/p&gt;

&lt;h3 id=&#34;func-applicationcontroller-handlefunc:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*ApplicationController) HandleFunc&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctrl *ApplicationController) HandleFunc(name string, h, d Handler) HandleFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HandleFunc wraps al request handler into a HandleFunc. The HandleFunc initializes the
request context by loading the request state, invokes the handler and in case of error invokes
the controller (if there is one) or application error handler.
This function is intended for the controller generated code. User code should not need to call
it directly.&lt;/p&gt;

&lt;h3 id=&#34;func-applicationcontroller-middlewarechain:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*ApplicationController) MiddlewareChain&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctrl *ApplicationController) MiddlewareChain() []Middleware
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MiddlewareChain returns the controller middleware chain.&lt;/p&gt;

&lt;h3 id=&#34;func-applicationcontroller-seterrorhandler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*ApplicationController) SetErrorHandler&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctrl *ApplicationController) SetErrorHandler(handler ErrorHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetErrorHandler defines a controller specific error handler. When a controller action returns an
error goa checks whether the controller is equipped with a error handler and if so calls it with
the error given as argument. If there is no controller error handler then goa calls the
application wide error handler instead.&lt;/p&gt;

&lt;h3 id=&#34;func-applicationcontroller-use:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*ApplicationController) Use&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctrl *ApplicationController) Use(m Middleware)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use adds a middleware to the controller.
See NewMiddleware for wrapping goa and http handlers into goa middleware.
goa comes with a set of commonly used middleware, see middleware.go.&lt;/p&gt;

&lt;h2 id=&#34;type-badrequesterror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type BadRequestError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type BadRequestError struct {
    Actual error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BadRequestError is the type of errors that result in a response with status code 400.&lt;/p&gt;

&lt;h3 id=&#34;func-newbadrequesterror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func NewBadRequestError&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewBadRequestError(err error) *BadRequestError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewBadRequestError wraps the given error into a BadRequestError.&lt;/p&gt;

&lt;h3 id=&#34;func-badrequesterror-error:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*BadRequestError) Error&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (b *BadRequestError) Error() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Error implements error.&lt;/p&gt;

&lt;h2 id=&#34;type-basicsigner:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type BasicSigner&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type BasicSigner struct {
    // Username is the basic auth user.
    Username string
    // Password is err guess what? the basic auth password.
    Password string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BasicSigner implements basic auth.&lt;/p&gt;

&lt;h3 id=&#34;func-basicsigner-registerflags:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*BasicSigner) RegisterFlags&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (s *BasicSigner) RegisterFlags(app *cobra.Command)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RegisterFlags adds the &amp;ldquo;&amp;ndash;user&amp;rdquo; and &amp;ldquo;&amp;ndash;pass&amp;rdquo; flags to the client tool.&lt;/p&gt;

&lt;h3 id=&#34;func-basicsigner-sign:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*BasicSigner) Sign&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (s *BasicSigner) Sign(req *http.Request) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sign adds the basic auth header to the request.&lt;/p&gt;

&lt;h2 id=&#34;type-client:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Client&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Client struct {
    // Logger is the logger used to log client requests.
    log15.Logger
    // Client is the underlying http client.
    *http.Client
    // Signers contains the ordered list of request signers. A signer may add headers,
    // cookies etc. to a request generally to perform auth.
    Signers []Signer
    // Scheme is the HTTP scheme used to make requests to the API host.
    Scheme string
    // Host is the service hostname.
    Host string
    // UserAgent is the user agent set in requests made by the client.
    UserAgent string
    // Dump indicates whether to dump request response.
    Dump bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Client is the command client data structure for all goa service clients.&lt;/p&gt;

&lt;h3 id=&#34;func-newclient:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func NewClient&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewClient() *Client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewClient create a new API client.&lt;/p&gt;

&lt;h3 id=&#34;func-client-do:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Client) Do&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *Client) Do(req *http.Request) (*http.Response, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do wraps the underlying http client Do method and adds logging.&lt;/p&gt;

&lt;h2 id=&#34;type-context:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Context&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Context struct {
    context.Context // Underlying context
    log.Logger      // Context logger
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context is the object that provides access to the underlying HTTP request and response state.
Context implements http.ResponseWriter and also provides helper methods for writing HTTP responses.
It also implements the context.Context interface described at &lt;a href=&#34;http://blog.golang.org/context&#34;&gt;http://blog.golang.org/context&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;func-newcontext:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func NewContext&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewContext(gctx context.Context,
    service Service,
    req *http.Request,
    rw http.ResponseWriter,
    params url.Values) *Context
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewContext builds a goa context from the given context.Context and request state.
If gctx is nil then context.Background is used instead.&lt;/p&gt;

&lt;h3 id=&#34;func-context-allparams:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) AllParams&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) AllParams() url.Values
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AllParams return all URL and querystring parameters.&lt;/p&gt;

&lt;h3 id=&#34;func-context-badrequest:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) BadRequest&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) BadRequest(err *BadRequestError) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BadRequest sends a HTTP response with status code 400 and the given error as body.&lt;/p&gt;

&lt;h3 id=&#34;func-context-bug:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) Bug&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) Bug(format string, a ...interface{}) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bug sends a HTTP response with status code 500 and the given body.
The body can be set using a format and substituted values a la fmt.Printf.&lt;/p&gt;

&lt;h3 id=&#34;func-context-get:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) Get&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) Get(name string) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get returns the param or querystring value with the given name.&lt;/p&gt;

&lt;h3 id=&#34;func-context-getmany:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) GetMany&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) GetMany(name string) []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GetMany returns the querystring values with the given name or nil if there aren&amp;rsquo;t any.&lt;/p&gt;

&lt;h3 id=&#34;func-context-getnames:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) GetNames&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) GetNames() []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GetNames returns all the querystring and URL parameter names.&lt;/p&gt;

&lt;h3 id=&#34;func-context-header:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) Header&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) Header() http.Header
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Header returns the response header. It implements the http.ResponseWriter interface.&lt;/p&gt;

&lt;h3 id=&#34;func-context-rawpayload:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) RawPayload&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) RawPayload() interface{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RawPayload returns the deserialized request body or nil if body is empty.&lt;/p&gt;

&lt;h3 id=&#34;func-context-request:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) Request&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) Request() *http.Request
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Request returns the underlying HTTP request.&lt;/p&gt;

&lt;h3 id=&#34;func-context-respond:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) Respond&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) Respond(code int, body interface{}) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Respond serializes the given body matching the request Accept header against the service
encoders. It uses the default service encoder if no match is found.&lt;/p&gt;

&lt;h3 id=&#34;func-context-respondbytes:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) RespondBytes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) RespondBytes(code int, body []byte) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RespondBytes writes the given HTTP status code and response body.
This method should only be called once per request.&lt;/p&gt;

&lt;h3 id=&#34;func-context-responselength:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) ResponseLength&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) ResponseLength() int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResponseLength returns the response body length in bytes if the response was written to the
context via one of the response methods (Respond, JSON, BadRequest, Bug), 0 otherwise.&lt;/p&gt;

&lt;h3 id=&#34;func-context-responsestatus:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) ResponseStatus&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) ResponseStatus() int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResponseStatus returns the response status if it was set via one of the context response
methods (Respond, JSON, BadRequest, Bug), 0 otherwise.&lt;/p&gt;

&lt;h3 id=&#34;func-context-responsewritten:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) ResponseWritten&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) ResponseWritten() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResponseWritten returns true if an HTTP response was written.&lt;/p&gt;

&lt;h3 id=&#34;func-context-service:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) Service&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) Service() Service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Service returns the underlying service.&lt;/p&gt;

&lt;h3 id=&#34;func-context-setpayload:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) SetPayload&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) SetPayload(payload interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetPayload initializes the unmarshaled request body value.&lt;/p&gt;

&lt;h3 id=&#34;func-context-setresponsewriter:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) SetResponseWriter&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) SetResponseWriter(rw http.ResponseWriter) http.ResponseWriter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetResponseWriter overrides the context underlying response writer. It returns the response
writer that was previously set.&lt;/p&gt;

&lt;h3 id=&#34;func-context-setvalue:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) SetValue&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) SetValue(key, val interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetValue sets the value associated with key in the context.
The value can be retrieved using the Value method.
Note that this changes the underlying context.Context object and thus clients holding a reference
to that won&amp;rsquo;t be able to access the new value. It&amp;rsquo;s probably a bad idea to hold a reference to
the inner context anyway&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;func-context-write:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) Write&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) Write(body []byte) (int, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write writes the HTTP response body. It implements the http.ResponseWriter interface.&lt;/p&gt;

&lt;h3 id=&#34;func-context-writeheader:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*Context) WriteHeader&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ctx *Context) WriteHeader(code int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WriteHeader writes the HTTP status code to the response. It implements the
http.ResponseWriter interface.&lt;/p&gt;

&lt;h2 id=&#34;type-controller:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Controller&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Controller interface {
    log.Logger

    // Use adds a middleware to the controller middleware chain.
    // It is a convenient method for doing append(ctrl.MiddlewareChain(), m)
    Use(Middleware)

    // MiddlewareChain returns the controller middleware chain including the
    // service-wide middleware.
    MiddlewareChain() []Middleware

    // ErrorHandler returns the currently set error handler.
    ErrorHandler() ErrorHandler

    // SetErrorHandler sets the controller specific error handler.
    SetErrorHandler(ErrorHandler)

    // HandleFunc returns a HandleFunc from the given handler
    // name is used solely for logging.
    HandleFunc(name string, h, d Handler) HandleFunc
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Controller is the interface implemented by all goa controllers.
A controller implements a given resource actions. There is a one-to-one relationship
between designed resources and generated controllers.
Controllers may override the service wide error handler and be equipped with controller
specific middleware.&lt;/p&gt;

&lt;h2 id=&#34;type-decodefunc:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type DecodeFunc&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type DecodeFunc func(*Context, io.ReadCloser, interface{}) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DecodeFunc is the function that initialize the unmarshaled payload from the request body.&lt;/p&gt;

&lt;h2 id=&#34;type-decoder:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Decoder&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Decoder interface {
    Decode(v interface{}) error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Decoder unmarshals an io.Reader into an interface&lt;/p&gt;

&lt;h2 id=&#34;type-decoderfactory:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type DecoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type DecoderFactory interface {
    NewDecoder(r io.Reader) Decoder
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A DecoderFactory generates custom decoders&lt;/p&gt;

&lt;h3 id=&#34;func-gobdecoderfactory:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func GobDecoderFactory&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func GobDecoderFactory() DecoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GobDecoderFactory returns a struct that can generate new gob.Decoders&lt;/p&gt;

&lt;h3 id=&#34;func-jsondecoderfactory:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func JSONDecoderFactory&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func JSONDecoderFactory() DecoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSONDecoderFactory returns a struct that can generate new json.Decoders&lt;/p&gt;

&lt;h3 id=&#34;func-xmldecoderfactory:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func XMLDecoderFactory&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func XMLDecoderFactory() DecoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XMLDecoderFactory returns a struct that can generate new xml.Decoders&lt;/p&gt;

&lt;h2 id=&#34;type-defaultmux:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type DefaultMux&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type DefaultMux struct {
    SelectVersionFunc SelectVersionFunc
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DefaultMux is the default goa mux. It dispatches requests to the appropriate version mux
using a SelectVersionFunc. The default func is DefaultVersionFunc, change it with
SelectVersion.&lt;/p&gt;

&lt;h3 id=&#34;func-defaultmux-handle:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (DefaultMux) Handle&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m DefaultMux) Handle(method, path string, handle HandleFunc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Handle sets the handler for the given verb and path.&lt;/p&gt;

&lt;h3 id=&#34;func-defaultmux-lookup:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (DefaultMux) Lookup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m DefaultMux) Lookup(method, path string) HandleFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lookup returns the HandleFunc associated with the given method and path.&lt;/p&gt;

&lt;h3 id=&#34;func-defaultmux-selectversion:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*DefaultMux) SelectVersion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m *DefaultMux) SelectVersion(sv SelectVersionFunc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SelectVersion sets the func used to compute the API version targetted by a request.&lt;/p&gt;

&lt;h3 id=&#34;func-defaultmux-servehttp:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*DefaultMux) ServeHTTP&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m *DefaultMux) ServeHTTP(rw http.ResponseWriter, req *http.Request)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ServeHTTP is the function called back by the underlying HTTP server to handle incoming requests.&lt;/p&gt;

&lt;h2 id=&#34;type-encoder:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Encoder&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Encoder interface {
    Encode(v interface{}) error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An Encoder marshals from an interface into an io.Writer&lt;/p&gt;

&lt;h2 id=&#34;type-encoderfactory:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type EncoderFactory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type EncoderFactory interface {
    NewEncoder(w io.Writer) Encoder
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A EncoderFactory generates custom encoders&lt;/p&gt;

&lt;h3 id=&#34;func-gobencoderfactory:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func GobEncoderFactory&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func GobEncoderFactory() EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GobEncoderFactory returns a struct that can generate new gob.Encoders&lt;/p&gt;

&lt;h3 id=&#34;func-jsonencoderfactory:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func JSONEncoderFactory&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func JSONEncoderFactory() EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSONEncoderFactory returns a struct that can generate new json.Encoders&lt;/p&gt;

&lt;h3 id=&#34;func-xmlencoderfactory:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func XMLEncoderFactory&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func XMLEncoderFactory() EncoderFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XMLEncoderFactory returns a struct that can generate new xml.Encoders&lt;/p&gt;

&lt;h2 id=&#34;type-encoding:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Encoding&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Encoding interface {
    // DecodeRequest uses registered Decoders to unmarshal the request body based on
    // the request &amp;quot;Content-Type&amp;quot; header.
    DecodeRequest(ctx *Context, v interface{}) error

    // EncodeResponse uses registered Encoders to marshal the response body based on the
    // request &amp;quot;Accept&amp;quot; header and writes the result to the http.ResponseWriter.
    EncodeResponse(ctx *Context, v interface{}) error

    // SetDecoder registers a decoder for the given content types.
    // If makeDefault is true then the decoder is used to decode payloads where none of
    // the registered decoders support the request content type.
    SetDecoder(f DecoderFactory, makeDefault bool, contentTypes ...string)

    // SetEncoder registers an encoder for the given content types.
    // If makeDefault is true then the encoder is used to encode bodies where none of
    // the registered encoders match the request &amp;quot;Accept&amp;quot; header.
    SetEncoder(f EncoderFactory, makeDefault bool, contentTypes ...string)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Encoding contains the encoding and decoding support.&lt;/p&gt;

&lt;h2 id=&#34;type-errorhandler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type ErrorHandler&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ErrorHandler func(*Context, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ErrorHandler defines the application error handler signature.&lt;/p&gt;

&lt;h2 id=&#34;type-errorid:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type ErrorID&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ErrorID int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ErrorID is an enum listing the possible types of errors.&lt;/p&gt;

&lt;h3 id=&#34;func-errorid-title:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (ErrorID) Title&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (k ErrorID) Title() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Title returns a human friendly error title&lt;/p&gt;

&lt;h2 id=&#34;type-format:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Format&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Format string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Format defines a validation format.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
    // FormatDateTime defines RFC3339 date time values.
    FormatDateTime Format = &amp;quot;date-time&amp;quot;

    // FormatEmail defines RFC5322 email addresses.
    FormatEmail = &amp;quot;email&amp;quot;

    // FormatHostname defines RFC1035 Internet host names.
    FormatHostname = &amp;quot;hostname&amp;quot;

    // FormatIPv4 defines RFC2373 IPv4 address values.
    FormatIPv4 = &amp;quot;ipv4&amp;quot;

    // FormatIPv6 defines RFC2373 IPv6 address values.
    FormatIPv6 = &amp;quot;ipv6&amp;quot;

    // FormatURI defines RFC3986 URI values.
    FormatURI = &amp;quot;uri&amp;quot;

    // FormatMAC defines IEEE 802 MAC-48, EUI-48 or EUI-64 MAC address values.
    FormatMAC = &amp;quot;mac&amp;quot;

    // FormatCIDR defines RFC4632 and RFC4291 CIDR notation IP address values.
    FormatCIDR = &amp;quot;cidr&amp;quot;

    // FormatRegexp Regexp defines regular expression syntax accepted by RE2.
    FormatRegexp = &amp;quot;regexp&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;type-gracefulapplication:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type GracefulApplication&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type GracefulApplication struct {
    *Application
    sync.Mutex

    // Interrupted is true if the application is in the process of shutting down.
    Interrupted bool

    // CancelOnShutdown tells whether existing requests should be canceled when shutdown is
    // triggered (true) or whether to wait until the requests complete (false).
    CancelOnShutdown bool
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GracefulApplication is a goa application using a graceful shutdown server.
When sending any of the signals listed in InterruptSignals to the process GracefulApplication:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;disables keepalive connections.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;closes the listening socket, allowing another process to listen on that port immediately.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;calls Cancel, signaling all active handlers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;func-gracefulapplication-decode:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (GracefulApplication) Decode&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver GracefulApplication) Decode(v interface{}, body io.Reader, contentType string) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Decode uses registered Decoders to unmarshal a body based on the contentType&lt;/p&gt;

&lt;h3 id=&#34;func-gracefulapplication-decoderequest:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (GracefulApplication) DecodeRequest&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver GracefulApplication) DecodeRequest(ctx *Context, v interface{}) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DecodeRequest retrives the request body and &lt;code&gt;Content-Type&lt;/code&gt; header and uses Decode
to unmarshal into the provided &lt;code&gt;interface{}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;func-gracefulapplication-encoderesponse:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (GracefulApplication) EncodeResponse&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver GracefulApplication) EncodeResponse(ctx *Context, v interface{}) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EncodeResponse uses registered Encoders to marshal the response body based on the request
&lt;code&gt;Accept&lt;/code&gt; header and writes it to the http.ResponseWriter&lt;/p&gt;

&lt;h3 id=&#34;func-gracefulapplication-listenandserve:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*GracefulApplication) ListenAndServe&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (gapp *GracefulApplication) ListenAndServe(addr string) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ListenAndServe starts the HTTP server and sets up a listener on the given host/port.&lt;/p&gt;

&lt;h3 id=&#34;func-gracefulapplication-listenandservetls:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*GracefulApplication) ListenAndServeTLS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (gapp *GracefulApplication) ListenAndServeTLS(addr, certFile, keyFile string) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ListenAndServeTLS starts a HTTPS server and sets up a listener on the given host/port.&lt;/p&gt;

&lt;h3 id=&#34;func-gracefulapplication-setdecoder:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (GracefulApplication) SetDecoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver GracefulApplication) SetDecoder(f DecoderFactory, makeDefault bool, contentTypes ...string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetDecoder sets a specific decoder to be used for the specified content types. If
a decoder is already registered, it will be overwritten.&lt;/p&gt;

&lt;h3 id=&#34;func-gracefulapplication-setencoder:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (GracefulApplication) SetEncoder&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver GracefulApplication) SetEncoder(f EncoderFactory, makeDefault bool, contentTypes ...string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetEncoder sets a specific encoder to be used for the specified content types. If
an encoder is already registered, it will be overwritten.&lt;/p&gt;

&lt;h3 id=&#34;func-gracefulapplication-shutdown:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*GracefulApplication) Shutdown&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (gapp *GracefulApplication) Shutdown() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shutdown initiates graceful shutdown of the running server once. Returns true on
initial shutdown and false if already shutting down.&lt;/p&gt;

&lt;h3 id=&#34;func-gracefulapplication-versionname:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (GracefulApplication) VersionName&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (ver GracefulApplication) VersionName() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VersionName returns the version name.&lt;/p&gt;

&lt;h2 id=&#34;type-handlefunc:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type HandleFunc&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type HandleFunc func(http.ResponseWriter, *http.Request, url.Values)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HandleFunc provides the implementation for an API endpoint.
The values include both the querystring and path parameter values.&lt;/p&gt;

&lt;h2 id=&#34;type-handler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Handler&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Handler func(*Context) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Handler defines the controller handler signatures.
Controller handlers accept a context and return an error.
The context provides typed access to the request and response state. It implements
the golang.org/x/net/context package Context interface so that handlers may define
deadlines and cancelation signals - see the Timeout middleware as an example.
If a controller handler returns an error then the application error handler is invoked
with the request context and the error. The error handler is responsible for writing the
HTTP response. See DefaultErrorHandler and TerseErrorHandler.&lt;/p&gt;

&lt;h2 id=&#34;type-jwtsigner:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type JWTSigner&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type JWTSigner struct {
    // Header is the name of the HTTP header which contains the JWT.
    // The default is &amp;quot;Authentication&amp;quot;
    Header string
    // Format represents the format used to render the JWT.
    // The default is &amp;quot;Bearer %s&amp;quot;
    Format string
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JWTSigner implements JSON Web Token auth.&lt;/p&gt;

&lt;h3 id=&#34;func-jwtsigner-registerflags:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*JWTSigner) RegisterFlags&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (s *JWTSigner) RegisterFlags(app *cobra.Command)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RegisterFlags adds the &amp;ldquo;&amp;ndash;jwt&amp;rdquo; flag to the client tool.&lt;/p&gt;

&lt;h3 id=&#34;func-jwtsigner-sign:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*JWTSigner) Sign&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (s *JWTSigner) Sign(req *http.Request) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sign adds the JWT auth header.&lt;/p&gt;

&lt;h2 id=&#34;type-middleware:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Middleware&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Middleware func(Handler) Handler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Middleware represents the canonical goa middleware signature.&lt;/p&gt;

&lt;h3 id=&#34;func-newmiddleware:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func NewMiddleware&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewMiddleware(m interface{}) (mw Middleware, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewMiddleware creates a middleware from the given argument. The allowed types for the
argument are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a goa middleware: goa.Middleware or func(goa.Handler) goa.Handler&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a goa handler: goa.Handler or func(*goa.Context) error&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;an http middleware: func(http.Handler) http.Handler&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;or an http handler: http.Handler or func(http.ResponseWriter, *http.Request)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An error is returned if the given argument is not one of the types above.&lt;/p&gt;

&lt;h2 id=&#34;type-missingversionhandler:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type MissingVersionHandler&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MissingVersionHandler func(*Context, string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MissingVersionHandler defines the function that handles requests targetting a non
existant API version.&lt;/p&gt;

&lt;h2 id=&#34;type-multierror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type MultiError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MultiError []error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MultiError records multiple errors.&lt;/p&gt;

&lt;h3 id=&#34;func-multierror-error:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (MultiError) Error&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m MultiError) Error() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Error summarizes all the underlying error messages in one JSON array.&lt;/p&gt;

&lt;h2 id=&#34;type-oauth2signer:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type OAuth2Signer&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type OAuth2Signer struct {
    // RefreshURLFormat is a format that generates the refresh access token URL given a
    // refresh token.
    RefreshURLFormat string
    // RefreshToken contains the OAuth2 refresh token from which access tokens are
    // created.
    RefreshToken string
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OAuth2Signer enables the use of OAuth2 refresh tokens. It takes care of creating access
tokens given a refresh token and a refresh URL as defined in RFC 6749.
Note that this signer does not concern itself with generating the initial refresh token,
this has to be done prior to using the client.
Also it assumes the response of the refresh request response is JSON encoded and of the
form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;access_token&amp;quot;:&amp;quot;2YotnFZFEjr1zCsicMWpAA&amp;quot;,
    &amp;quot;expires_in&amp;quot;:3600,
    &amp;quot;refresh_token&amp;quot;:&amp;quot;tGzv3JOkF0XG5Qx2TlKWIA&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the &amp;ldquo;expires_in&amp;rdquo; and &amp;ldquo;refresh_token&amp;rdquo; properties are optional and additional
properties are ignored. If the response contains a &amp;ldquo;expires_in&amp;rdquo; property then the signer
takes care of making refresh requests prior to the token expiration.&lt;/p&gt;

&lt;h3 id=&#34;func-oauth2signer-refresh:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*OAuth2Signer) Refresh&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (s *OAuth2Signer) Refresh() error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refresh makes a OAuth2 refresh access token request.&lt;/p&gt;

&lt;h3 id=&#34;func-oauth2signer-registerflags:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*OAuth2Signer) RegisterFlags&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (s *OAuth2Signer) RegisterFlags(app *cobra.Command)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RegisterFlags adds the &amp;ldquo;&amp;ndash;refreshURL&amp;rdquo; and &amp;ldquo;&amp;ndash;refreshToken&amp;rdquo; flags to the client tool.&lt;/p&gt;

&lt;h3 id=&#34;func-oauth2signer-sign:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*OAuth2Signer) Sign&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (s *OAuth2Signer) Sign(req *http.Request) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sign refreshes the access token if needed and adds the OAuth header.&lt;/p&gt;

&lt;h2 id=&#34;type-resettabledecoder:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type ResettableDecoder&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ResettableDecoder interface {
    Decoder
    Reset(r io.Reader)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ResettableDecoder is used to determine whether or not a Decoder can be reset and
thus safely reused in a sync.Pool&lt;/p&gt;

&lt;h2 id=&#34;type-resettableencoder:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type ResettableEncoder&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ResettableEncoder interface {
    Encoder
    Reset(w io.Writer)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ResettableEncoder is used to determine whether or not a Encoder can be reset and
thus safely reused in a sync.Pool&lt;/p&gt;

&lt;h2 id=&#34;type-selectversionfunc:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type SelectVersionFunc&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type SelectVersionFunc func(*http.Request) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SelectVersionFunc is used by the default goa mux to compute the API version targetted by
a given request.
The default implementation looks for a version as path prefix.
Alternate implementations can be set using the DefaultMux SelectVersion method.&lt;/p&gt;

&lt;h3 id=&#34;func-combineselectversionfunc:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func CombineSelectVersionFunc&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func CombineSelectVersionFunc(funcs ...SelectVersionFunc) SelectVersionFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CombineSelectVersionFunc returns a SelectVersionFunc that tries each func passed as argument
in order and returns the first non-empty string version.&lt;/p&gt;

&lt;h3 id=&#34;func-headerselectversionfunc:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func HeaderSelectVersionFunc&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func HeaderSelectVersionFunc(header string) SelectVersionFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HeaderSelectVersionFunc returns a SelectVersionFunc that looks for the version in the header with
the given name.&lt;/p&gt;

&lt;h3 id=&#34;func-pathselectversionfunc:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func PathSelectVersionFunc&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func PathSelectVersionFunc(pattern, zeroVersion string) SelectVersionFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PathSelectVersionFunc returns a SelectVersionFunc that uses the given path pattern to extract the
version from the request path. Use the same path pattern given in the DSL to define the API base
path, e.g. &amp;ldquo;/api/:version&amp;rdquo;.
If the pattern matches zeroVersion then the empty version is returned (i.e. the unversioned
controller handles the request).&lt;/p&gt;

&lt;h3 id=&#34;func-queryselectversionfunc:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func QuerySelectVersionFunc&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func QuerySelectVersionFunc(query string) SelectVersionFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;QuerySelectVersionFunc returns a SelectVersionFunc that looks for the version in the querystring
with the given key.&lt;/p&gt;

&lt;h2 id=&#34;type-servemux:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type ServeMux&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ServeMux interface {
    http.Handler
    // Handle sets the HandleFunc for a given HTTP method and path.
    Handle(method, path string, handle HandleFunc)
    // Lookup returns the HandleFunc associated with the given HTTP method and path.
    Lookup(method, path string) HandleFunc
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ServeMux is the interface implemented by the service request muxes. There is one instance
of ServeMux per service version and one for requests targetting no version.
It implements http.Handler and makes it possible to register request handlers for
specific HTTP methods and request path via the Handle method.&lt;/p&gt;

&lt;h3 id=&#34;func-newmux:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func NewMux&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewMux(app *Application) ServeMux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewMux returns the default service mux implementation.&lt;/p&gt;

&lt;h2 id=&#34;type-service:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Service&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Service interface {
    // Logging methods, configure the log handler using the Logger global variable.
    log.Logger

    // Encoding manages the service decoders and encoders.
    Encoding

    // Name is the name of the goa application.
    Name() string

    // Use adds a middleware to the service-wide middleware chain.
    Use(m Middleware)

    // ErrorHandler returns the currently set error handler, useful for middleware.
    ErrorHandler() ErrorHandler

    // SetErrorHandler registers the service-wide error handler.
    SetErrorHandler(ErrorHandler)

    // SetMissingVersionHandler registers the handler invoked when a request targets a
    // non existant API version.
    SetMissingVersionHandler(MissingVersionHandler)

    // ServeMux returns the service mux.
    ServeMux() ServeMux

    // ListenAndServe starts a HTTP server on the given port.
    ListenAndServe(addr string) error

    // ListenAndServeTLS starts a HTTPS server on the given port.
    ListenAndServeTLS(add, certFile, keyFile string) error

    // ServeFiles replies to the request with the contents of the named file or
    // directory. The logic // for what to do when the filename points to a file vs. a
    // directory is the same as the standard http package ServeFile function. The path
    // may end with a wildcard that matches the rest of the URL (e.g. *filepath). If it
    // does the matching path is appended to filename to form the full file path, so:
    // 	ServeFiles(&amp;quot;/index.html&amp;quot;, &amp;quot;/www/data/index.html&amp;quot;)
    // Returns the content of the file &amp;quot;/www/data/index.html&amp;quot; when requests are sent to
    // &amp;quot;/index.html&amp;quot; and:
    //	ServeFiles(&amp;quot;/assets/*filepath&amp;quot;, &amp;quot;/www/data/assets&amp;quot;)
    // returns the content of the file &amp;quot;/www/data/assets/x/y/z&amp;quot; when requests are sent
    // to &amp;quot;/assets/x/y/z&amp;quot;.
    ServeFiles(path, filename string) error

    // Version returns an object that implements ServiceVersion based on the version name.
    // If there is no version registered, it will instantiate a new version.
    Version(name string) ServiceVersion

    // Decode uses registered Decoders to unmarshal a body based on the contentType
    Decode(v interface{}, body io.Reader, contentType string) error

    // NewController returns a controller for the resource with the given name.
    // This method is mainly intended for use by generated code.
    NewController(resName string) Controller
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Service is the interface implemented by all goa services.
It provides methods for configuring a service and running it.&lt;/p&gt;

&lt;h3 id=&#34;func-new:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func New&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func New(name string) Service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;New instantiates an application with the given name and default decoders/encoders.&lt;/p&gt;

&lt;h3 id=&#34;func-newgraceful:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func NewGraceful&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewGraceful(name string, cancelOnShutdown bool) Service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewGraceful returns a goa application that uses a graceful shutdown server.&lt;/p&gt;

&lt;h2 id=&#34;type-serviceversion:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type ServiceVersion&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ServiceVersion interface {
    // Encoding manages the version decoders and encoders.
    Encoding

    // VersionName returns the version name.
    VersionName() string

    // ServeMux returns the version request mux.
    ServeMux() ServeMux
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ServiceVersion is the interface for interacting with individual service versions.&lt;/p&gt;

&lt;h2 id=&#34;type-signer:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type Signer&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Signer interface {
    // Sign adds required headers, cookies etc.
    Sign(*http.Request) error
    // RegisterFlags registers the command line flags that defines the values used to
    // initialize the signer.
    RegisterFlags(cmd *cobra.Command)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Signer is the common interface implemented by all signers.&lt;/p&gt;

&lt;h2 id=&#34;type-typederror:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;type TypedError&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type TypedError struct {
    ID   ErrorID
    Mesg string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TypedError describes an error that can be returned in a HTTP response.&lt;/p&gt;

&lt;h3 id=&#34;func-typederror-error:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*TypedError) Error&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (t *TypedError) Error() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Error builds an error message from the typed error details.&lt;/p&gt;

&lt;h3 id=&#34;func-typederror-marshaljson:f65b389c849e4c539b25815fbdc1fd8d&#34;&gt;func (*TypedError) MarshalJSON&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (t *TypedError) MarshalJSON() ([]byte, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MarshalJSON implements the json marshaler interface.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>goa/design</title>
      <link>http://goa.design/godoc/goa/design/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/goa/design/design/</guid>
      <description>

&lt;h1 id=&#34;design:83772ba7ad0304b1562d08f190539946&#34;&gt;design&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/goa/design&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package design defines types which describe the data types used by action controllers.
These are the data structures of the request payloads and parameters as well as the response
payloads.
There are primitive types corresponding to the JSON primitive types (bool, string, integer and
number), array types which represent a collection of another type and object types corresponding
to JSON objects (i.e. a map indexed by strings where each value may be any of the data types).
On top of these the package also defines &amp;ldquo;user types&amp;rdquo; and &amp;ldquo;media types&amp;rdquo;. Both these types are
named objects with additional properties (a description and for media types the media type
identifier, links and views).&lt;/p&gt;

&lt;h2 id=&#34;constants:83772ba7ad0304b1562d08f190539946&#34;&gt;Constants&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
    // BooleanKind represents a JSON bool.
    BooleanKind = iota + 1
    // IntegerKind represents a JSON integer.
    IntegerKind
    // NumberKind represents a JSON number including integers.
    NumberKind
    // StringKind represents a JSON string.
    StringKind
    // DateTimeKind represents a JSON string that is parsed as a Go time.Time
    DateTimeKind
    // AnyKind represents a generic interface{}.
    AnyKind
    // ArrayKind represents a JSON array.
    ArrayKind
    // ObjectKind represents a JSON object.
    ObjectKind
    // HashKind represents a JSON object where the keys are not known in advance.
    HashKind
    // UserTypeKind represents a user type.
    UserTypeKind
    // MediaTypeKind represents a media type.
    MediaTypeKind
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
    // Boolean is the type for a JSON boolean.
    Boolean = Primitive(BooleanKind)

    // Integer is the type for a JSON number without a fraction or exponent part.
    Integer = Primitive(IntegerKind)

    // Number is the type for any JSON number, including integers.
    Number = Primitive(NumberKind)

    // String is the type for a JSON string.
    String = Primitive(StringKind)

    // DateTime is the type for a JSON string parsed as a Go time.Time
    // DateTime expects an RFC3339 formatted value.
    DateTime = Primitive(DateTimeKind)

    // Any is the type for an arbitrary JSON value (interface{} in Go).
    Any = Primitive(AnyKind)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables:83772ba7ad0304b1562d08f190539946&#34;&gt;Variables&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (
    // Design is the API definition created via DSL.
    Design *APIDefinition

    // WildcardRegex is the regular expression used to capture path parameters.
    WildcardRegex = regexp.MustCompile(`/(?::|\*)([a-zA-Z0-9_]+)`)

    // GeneratedMediaTypes contains DSL definitions that were created by the design DSL and
    // need to be executed as a second pass.
    // An example of this are media types defined with CollectionOf: the element media type
    // must be defined first then the definition created by CollectionOf must execute.
    GeneratedMediaTypes MediaTypeRoot

    // DefaultDecoders contains the decoding definitions used when no Consumes DSL is found.
    DefaultDecoders []*EncodingDefinition

    // DefaultEncoders contains the encoding definitions used when no Produces DSL is found.
    DefaultEncoders []*EncodingDefinition

    // KnownEncoders contains the list of encoding packages and factories known by goa indexed
    // by MIME type.
    KnownEncoders = map[string][3]string{
        &amp;quot;application/json&amp;quot;:      [3]string{&amp;quot;json&amp;quot;, &amp;quot;JSONEncoderFactory&amp;quot;, &amp;quot;JSONDecoderFactory&amp;quot;},
        &amp;quot;application/xml&amp;quot;:       [3]string{&amp;quot;xml&amp;quot;, &amp;quot;XMLEncoderFactory&amp;quot;, &amp;quot;XMLDecoderFactory&amp;quot;},
        &amp;quot;text/xml&amp;quot;:              [3]string{&amp;quot;xml&amp;quot;, &amp;quot;XMLEncoderFactory&amp;quot;, &amp;quot;XMLDecoderFactory&amp;quot;},
        &amp;quot;application/gob&amp;quot;:       [3]string{&amp;quot;gob&amp;quot;, &amp;quot;GobEncoderFactory&amp;quot;, &amp;quot;GobDecoderFactory&amp;quot;},
        &amp;quot;application/x-gob&amp;quot;:     [3]string{&amp;quot;gob&amp;quot;, &amp;quot;GobEncoderFactory&amp;quot;, &amp;quot;GobDecoderFactory&amp;quot;},
        &amp;quot;application/binc&amp;quot;:      [3]string{&amp;quot;github.com/goadesign/middleware/encoding/binc&amp;quot;, &amp;quot;EncoderFactory&amp;quot;, &amp;quot;DecoderFactory&amp;quot;},
        &amp;quot;application/x-binc&amp;quot;:    [3]string{&amp;quot;github.com/goadesign/middleware/encoding/binc&amp;quot;, &amp;quot;EncoderFactory&amp;quot;, &amp;quot;DecoderFactory&amp;quot;},
        &amp;quot;application/x-cbor&amp;quot;:    [3]string{&amp;quot;github.com/goadesign/middleware/encoding/cbor&amp;quot;, &amp;quot;EncoderFactory&amp;quot;, &amp;quot;DecoderFactory&amp;quot;},
        &amp;quot;application/cbor&amp;quot;:      [3]string{&amp;quot;github.com/goadesign/middleware/encoding/cbor&amp;quot;, &amp;quot;EncoderFactory&amp;quot;, &amp;quot;DecoderFactory&amp;quot;},
        &amp;quot;application/msgpack&amp;quot;:   [3]string{&amp;quot;github.com/goadesign/middleware/encoding/msgpack&amp;quot;, &amp;quot;EncoderFactory&amp;quot;, &amp;quot;DecoderFactory&amp;quot;},
        &amp;quot;application/x-msgpack&amp;quot;: [3]string{&amp;quot;github.com/goadesign/middleware/encoding/msgpack&amp;quot;, &amp;quot;EncoderFactory&amp;quot;, &amp;quot;DecoderFactory&amp;quot;},
    }

    // JSONContentTypes is a slice of default Content-Type headers that will use stdlib
    // encoding/json to unmarshal unless overwritten using SetDecoder
    JSONContentTypes = []string{&amp;quot;application/json&amp;quot;}

    // XMLContentTypes is a slice of default Content-Type headers that will use stdlib
    // encoding/xml to unmarshal unless overwritten using SetDecoder
    XMLContentTypes = []string{&amp;quot;application/xml&amp;quot;, &amp;quot;text/xml&amp;quot;}

    // GobContentTypes is a slice of default Content-Type headers that will use stdlib
    // encoding/gob to unmarshal unless overwritten using SetDecoder
    GobContentTypes = []string{&amp;quot;application/gob&amp;quot;, &amp;quot;application/x-gob&amp;quot;}
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-canonicalidentifier:83772ba7ad0304b1562d08f190539946&#34;&gt;func CanonicalIdentifier&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func CanonicalIdentifier(identifier string) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CanonicalIdentifier returns the media type identifier sans suffix
which is what the DSL uses to store and lookup media types.&lt;/p&gt;

&lt;h2 id=&#34;func-extractwildcards:83772ba7ad0304b1562d08f190539946&#34;&gt;func ExtractWildcards&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ExtractWildcards(path string) []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ExtractWildcards returns the names of the wildcards that appear in path.&lt;/p&gt;

&lt;h2 id=&#34;func-hasknownencoder:83772ba7ad0304b1562d08f190539946&#34;&gt;func HasKnownEncoder&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func HasKnownEncoder(mimeType string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HasKnownEncoder returns true if the encoder for the given MIME type is known by goa.
MIME types with unknown encoders must be associated with a package path explicitly in the DSL.&lt;/p&gt;

&lt;h2 id=&#34;func-isgoaencoder:83772ba7ad0304b1562d08f190539946&#34;&gt;func IsGoaEncoder&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func IsGoaEncoder(pkgPath string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsGoaEncoder returns true if the encoder for the given MIME type is implemented in the goa
package.&lt;/p&gt;

&lt;h2 id=&#34;type-apidefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type APIDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type APIDefinition struct {
    // APIVersionDefinition contains the default values for properties across all versions.
    *APIVersionDefinition
    // APIVersions contain the API properties indexed by version.
    APIVersions map[string]*APIVersionDefinition
    // Exposed resources indexed by name
    Resources map[string]*ResourceDefinition
    // Types indexes the user defined types by name.
    Types map[string]*UserTypeDefinition
    // MediaTypes indexes the API media types by canonical identifier.
    MediaTypes map[string]*MediaTypeDefinition
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;APIDefinition defines the global properties of the API.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-example:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) Example(dt DataType) interface{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example returns a random value for the given data type.
If the data type has validations then the example value validates them.
Example returns the same random value for a given api name (the random
generator is seeded after the api name).&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-iteratemediatypes:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) IterateMediaTypes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) IterateMediaTypes(it MediaTypeIterator) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateMediaTypes calls the given iterator passing in each media type sorted in alphabetical order.
Iteration stops if an iterator returns an error and in this case IterateMediaTypes returns that
error.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-iterateresources:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) IterateResources&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) IterateResources(it ResourceIterator) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateResources calls the given iterator passing in each resource sorted in alphabetical order.
Iteration stops if an iterator returns an error and in this case IterateResources returns that
error.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-iteratesets:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) IterateSets&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) IterateSets(iterator dslengine.SetIterator)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateSets goes over all the definition sets of the API: The API definition itself, each
version definition, user types, media types and finally resources.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-iterateusertypes:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) IterateUserTypes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) IterateUserTypes(it UserTypeIterator) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateUserTypes calls the given iterator passing in each user type sorted in alphabetical order.
Iteration stops if an iterator returns an error and in this case IterateUserTypes returns that
error.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-iterateversions:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) IterateVersions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) IterateVersions(it VersionIterator) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateVersions calls the given iterator passing in each API version definition sorted
alphabetically by version name. It first calls the iterator on the embedded version definition
which contains the definitions for all the unversioned resources.
Iteration stops if an iterator returns an error and in this case IterateVersions returns that
error.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-mediatypewithidentifier:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) MediaTypeWithIdentifier&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) MediaTypeWithIdentifier(id string) *MediaTypeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MediaTypeWithIdentifier returns the media type with a matching
media type identifier. Two media type identifiers match if their
values sans suffix match. So for example &amp;ldquo;application/vnd.foo+xml&amp;rdquo;,
&amp;ldquo;application/vnd.foo+json&amp;rdquo; and &amp;ldquo;application/vnd.foo&amp;rdquo; all match.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-supportsnoversion:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) SupportsNoVersion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) SupportsNoVersion() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SupportsNoVersion returns true if the API is unversioned.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-supportsversion:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) SupportsVersion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) SupportsVersion(ver string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SupportsVersion returns true if the object supports the given version.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) Validate() *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate tests whether the API definition is consistent: all resource parent names resolve to
an actual resource.&lt;/p&gt;

&lt;h3 id=&#34;func-apidefinition-versions:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIDefinition) Versions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *APIDefinition) Versions() (versions []string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Versions returns an array of supported versions.&lt;/p&gt;

&lt;h2 id=&#34;type-apiversiondefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type APIVersionDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type APIVersionDefinition struct {
    // API name
    Name string
    // API Title
    Title string
    // API description
    Description string
    // API version if any
    Version string
    // API hostname
    Host string
    // API URL schemes
    Schemes []string
    // Common base path to all API actions
    BasePath string
    // Common path parameters to all API actions
    BaseParams *AttributeDefinition
    // Consumes lists the mime types supported by the API controllers.
    Consumes []*EncodingDefinition
    // Produces lists the mime types generated by the API controllers.
    Produces []*EncodingDefinition
    // TermsOfService describes or links to the API terms of service
    TermsOfService string
    // Contact provides the API users with contact information
    Contact *ContactDefinition
    // License describes the API license
    License *LicenseDefinition
    // Docs points to the API external documentation
    Docs *DocsDefinition
    // Traits available to all API resources and actions indexed by name
    Traits map[string]*dslengine.TraitDefinition
    // Responses available to all API actions indexed by name
    Responses map[string]*ResponseDefinition
    // Response template factories available to all API actions indexed by name
    ResponseTemplates map[string]*ResponseTemplateDefinition
    // Built-in responses
    DefaultResponses map[string]*ResponseDefinition
    // Built-in response templates
    DefaultResponseTemplates map[string]*ResponseTemplateDefinition
    // DSLFunc contains the DSL used to create this definition if any.
    DSLFunc func()
    // Metadata is a list of key/value pairs
    Metadata dslengine.MetadataDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;APIVersionDefinition defines the properties of the API for a given version.&lt;/p&gt;

&lt;h3 id=&#34;func-apiversiondefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIVersionDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *APIVersionDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-apiversiondefinition-dsl:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIVersionDefinition) DSL&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *APIVersionDefinition) DSL() func()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DSL returns the initialization DSL.&lt;/p&gt;

&lt;h3 id=&#34;func-apiversiondefinition-finalize:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIVersionDefinition) Finalize&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *APIVersionDefinition) Finalize()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalize sets the Consumes and Produces fields to the defaults if empty.&lt;/p&gt;

&lt;h3 id=&#34;func-apiversiondefinition-isdefault:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIVersionDefinition) IsDefault&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *APIVersionDefinition) IsDefault() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsDefault returns true if the version definition applies to all versions (i.e. is the API
definition).&lt;/p&gt;

&lt;h3 id=&#34;func-apiversiondefinition-iteratemediatypes:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIVersionDefinition) IterateMediaTypes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *APIVersionDefinition) IterateMediaTypes(it MediaTypeIterator) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateMediaTypes calls the given iterator passing in each media type sorted in alphabetical order.
Iteration stops if an iterator returns an error and in this case IterateMediaTypes returns that
error.&lt;/p&gt;

&lt;h3 id=&#34;func-apiversiondefinition-iterateresources:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIVersionDefinition) IterateResources&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *APIVersionDefinition) IterateResources(it ResourceIterator) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateResources calls the given iterator passing in each resource sorted in alphabetical order.
Iteration stops if an iterator returns an error and in this case IterateResources returns that
error.&lt;/p&gt;

&lt;h3 id=&#34;func-apiversiondefinition-iterateresponses:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIVersionDefinition) IterateResponses&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *APIVersionDefinition) IterateResponses(it ResponseIterator) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateResponses calls the given iterator passing in each response sorted in alphabetical order.
Iteration stops if an iterator returns an error and in this case IterateResponses returns that
error.&lt;/p&gt;

&lt;h3 id=&#34;func-apiversiondefinition-iterateusertypes:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*APIVersionDefinition) IterateUserTypes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *APIVersionDefinition) IterateUserTypes(it UserTypeIterator) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateUserTypes calls the given iterator passing in each user type sorted in alphabetical order.
Iteration stops if an iterator returns an error and in this case IterateUserTypes returns that
error.&lt;/p&gt;

&lt;h2 id=&#34;type-actiondefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type ActionDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ActionDefinition struct {
    // Action name, e.g. &amp;quot;create&amp;quot;
    Name string
    // Action description, e.g. &amp;quot;Creates a task&amp;quot;
    Description string
    // Docs points to the API external documentation
    Docs *DocsDefinition
    // Parent resource
    Parent *ResourceDefinition
    // Specific action URL schemes
    Schemes []string
    // Action routes
    Routes []*RouteDefinition
    // Map of possible response definitions indexed by name
    Responses map[string]*ResponseDefinition
    // Path and query string parameters
    Params *AttributeDefinition
    // Query string parameters only
    QueryParams *AttributeDefinition
    // Payload blueprint (request body) if any
    Payload *UserTypeDefinition
    // Request headers that need to be made available to action
    Headers *AttributeDefinition
    // Metadata is a list of key/value pairs
    Metadata dslengine.MetadataDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ActionDefinition defines a resource action.
It defines both an HTTP endpoint and the shape of HTTP requests and responses made to
that endpoint.
The shape of requests is defined via &amp;ldquo;parameters&amp;rdquo;, there are path parameters
parameters and a payload parameter (request body).
(i.e. portions of the URL that define parameter values), query string&lt;/p&gt;

&lt;h3 id=&#34;func-actiondefinition-allparams:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ActionDefinition) AllParams&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *ActionDefinition) AllParams() *AttributeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AllParams returns the path and query string parameters of the action across all its routes.&lt;/p&gt;

&lt;h3 id=&#34;func-actiondefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ActionDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *ActionDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-actiondefinition-hasabsoluteroutes:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ActionDefinition) HasAbsoluteRoutes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *ActionDefinition) HasAbsoluteRoutes() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HasAbsoluteRoutes returns true if all the action routes are absolute.&lt;/p&gt;

&lt;h3 id=&#34;func-actiondefinition-pathparams:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ActionDefinition) PathParams&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *ActionDefinition) PathParams(version *APIVersionDefinition) *AttributeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PathParams returns the path parameters of the action across all its routes.&lt;/p&gt;

&lt;h3 id=&#34;func-actiondefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ActionDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *ActionDefinition) Validate(version *APIVersionDefinition) *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate tests whether the action definition is consistent: parameters have unique names and it has at least
one response.&lt;/p&gt;

&lt;h3 id=&#34;func-actiondefinition-validateparams:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ActionDefinition) ValidateParams&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *ActionDefinition) ValidateParams(version *APIVersionDefinition) *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ValidateParams checks the action parameters (make sure they have names, members and types).&lt;/p&gt;

&lt;h2 id=&#34;type-actioniterator:83772ba7ad0304b1562d08f190539946&#34;&gt;type ActionIterator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ActionIterator func(a *ActionDefinition) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ActionIterator is the type of functions given to IterateActions.&lt;/p&gt;

&lt;h2 id=&#34;type-array:83772ba7ad0304b1562d08f190539946&#34;&gt;type Array&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Array struct {
    ElemType *AttributeDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Array is the type for a JSON array.&lt;/p&gt;

&lt;h3 id=&#34;func-array-dup:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) Dup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) Dup() DataType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dup calls Dup on the array ElemType and creates an array with the result.&lt;/p&gt;

&lt;h3 id=&#34;func-array-example:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) Example(r *RandomGenerator) interface{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example produces a random array value.&lt;/p&gt;

&lt;h3 id=&#34;func-array-isarray:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) IsArray&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) IsArray() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsArray returns true.&lt;/p&gt;

&lt;h3 id=&#34;func-array-iscompatible:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) IsCompatible&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) IsCompatible(val interface{}) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsCompatible returns true if val is compatible with p.&lt;/p&gt;

&lt;h3 id=&#34;func-array-ishash:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) IsHash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) IsHash() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsHash returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-array-isobject:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) IsObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) IsObject() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsObject returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-array-isprimitive:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) IsPrimitive&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) IsPrimitive() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsPrimitive returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-array-kind:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) Kind&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) Kind() Kind
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kind implements DataKind.&lt;/p&gt;

&lt;h3 id=&#34;func-array-name:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) Name&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) Name() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Name returns the type name.&lt;/p&gt;

&lt;h3 id=&#34;func-array-toarray:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) ToArray&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) ToArray() *Array
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToArray returns a.&lt;/p&gt;

&lt;h3 id=&#34;func-array-tohash:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) ToHash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) ToHash() *Hash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToHash returns nil.&lt;/p&gt;

&lt;h3 id=&#34;func-array-toobject:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Array) ToObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *Array) ToObject() Object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToObject returns nil.&lt;/p&gt;

&lt;h2 id=&#34;type-attributedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type AttributeDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type AttributeDefinition struct {
    // Attribute type
    Type DataType
    // Attribute reference type if any
    Reference DataType
    // Optional description
    Description string
    // Optional validation functions
    Validations []dslengine.ValidationDefinition
    // Metadata is a list of key/value pairs
    Metadata dslengine.MetadataDefinition
    // Optional member default value
    DefaultValue interface{}
    // Optional view used to render Attribute (only applies to media type attributes).
    View string
    // List of API versions that use the attribute.
    APIVersions []string
    // NonZeroAttributes lists the names of the child attributes that cannot have a
    // zero value (and thus whose presence does not need to be validated).
    NonZeroAttributes map[string]bool
    // DSLFunc contains the initialization DSL. This is used for user types.
    DSLFunc func()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AttributeDefinition defines a JSON object member with optional description, default
value and validations.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-allnonzero:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) AllNonZero&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) AllNonZero() []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AllNonZero returns the complete list of all non-zero attribute name.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-allrequired:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) AllRequired&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) AllRequired() (required []string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AllRequired returns the list of all required fields from the underlying object.
An attribute type can be itself an attribute (e.g. a MediaTypeDefinition or a UserTypeDefinition)
This happens when the DSL uses references for example. So traverse the hierarchy and collect
all the required validations.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-dsl:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) DSL&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) DSL() func()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DSL returns the initialization DSL.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-definition:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) Definition&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) Definition() *AttributeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Definition returns the underlying attribute definition.
Note that this function is &amp;ldquo;inherited&amp;rdquo; by both UserTypeDefinition and
MediaTypeDefinition.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-dup:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) Dup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) Dup() *AttributeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dup returns a copy of the attribute definition.
Note: the primitive underlying types are not duplicated for simplicity.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-example:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) Example(r *RandomGenerator) interface{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example returns a random instance of the attribute that validates.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-inherit:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) Inherit&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) Inherit(parent *AttributeDefinition)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inherit merges the properties of existing target type attributes with the argument&amp;rsquo;s.
The algorithm is recursive so that child attributes are also merged.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-isnonzero:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) IsNonZero&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) IsNonZero(attName string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsNonZero returns true if the given string matches the name of a non-zero
attribute, false otherwise.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-isprimitivepointer:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) IsPrimitivePointer&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) IsPrimitivePointer(attName string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsPrimitivePointer returns true if the field generated for the given attribute should be a
pointer to a primitive type. The target attribute must be an object.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-isrequired:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) IsRequired&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) IsRequired(attName string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsRequired returns true if the given string matches the name of a required
attribute, false otherwise.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-merge:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) Merge&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) Merge(other *AttributeDefinition) *AttributeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merge merges the argument attributes into the target and returns the target overriding existing
attributes with identical names.
This only applies to attributes of type Object and Merge panics if the
argument or the target is not of type Object.&lt;/p&gt;

&lt;h3 id=&#34;func-attributedefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*AttributeDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (a *AttributeDefinition) Validate(ctx string, parent dslengine.Definition) *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate tests whether the attribute definition is consistent: required fields exist.
Since attributes are unaware of their context, additional context information can be provided
to be used in error messages.
The parent definition context is automatically added to error messages.&lt;/p&gt;

&lt;h2 id=&#34;type-attributeiterator:83772ba7ad0304b1562d08f190539946&#34;&gt;type AttributeIterator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type AttributeIterator func(string, *AttributeDefinition) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AttributeIterator is the type of the function given to IterateAttributes.&lt;/p&gt;

&lt;h2 id=&#34;type-contactdefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type ContactDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ContactDefinition struct {
    // Name of the contact person/organization
    Name string `json:&amp;quot;name,omitempty&amp;quot;`
    // Email address of the contact person/organization
    Email string `json:&amp;quot;email,omitempty&amp;quot;`
    // URL pointing to the contact information
    URL string `json:&amp;quot;url,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ContactDefinition contains the API contact information.&lt;/p&gt;

&lt;h3 id=&#34;func-contactdefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ContactDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *ContactDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h2 id=&#34;type-datastructure:83772ba7ad0304b1562d08f190539946&#34;&gt;type DataStructure&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type DataStructure interface {
    // Definition returns the data structure definition.
    Definition() *AttributeDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DataStructure is the interface implemented by all data structure types.
That is attribute definitions, user types and media types.&lt;/p&gt;

&lt;h2 id=&#34;type-datatype:83772ba7ad0304b1562d08f190539946&#34;&gt;type DataType&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type DataType interface {
    // Kind of data type, one of the Kind enum.
    Kind() Kind
    // Name returns the type name.
    Name() string
    // IsPrimitive returns true if the underlying type is one of the primitive types.
    IsPrimitive() bool
    // IsObject returns true if the underlying type is an object, a user type which
    // is an object or a media type whose type is an object.
    IsObject() bool
    // IsArray returns true if the underlying type is an array, a user type which
    // is an array or a media type whose type is an array.
    IsArray() bool
    // IsHash returns true if the underlying type is a hash map, a user type which
    // is a hash map or a media type whose type is a hash map.
    IsHash() bool
    // ToObject returns the underlying object if any (i.e. if IsObject returns true),
    // nil otherwise.
    ToObject() Object
    // ToArray returns the underlying array if any (i.e. if IsArray returns true),
    // nil otherwise.
    ToArray() *Array
    // ToHash returns the underlying hash map if any (i.e. if IsHash returns true),
    // nil otherwise.
    ToHash() *Hash
    // IsCompatible checks whether val has a Go type that is
    // compatible with the data type.
    IsCompatible(val interface{}) bool
    // Dup creates a copy of the type. This is only relevant for types that are
    // DSLDefinition (i.e. have an attribute definition).
    Dup() DataType
    // Example returns a random value for the given data type.
    // If the data type has validations then the example value validates them.
    Example(r *RandomGenerator) interface{}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DataType is the common interface to all types.&lt;/p&gt;

&lt;h2 id=&#34;type-docsdefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type DocsDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type DocsDefinition struct {
    // Description of documentation.
    Description string `json:&amp;quot;description,omitempty&amp;quot;`
    // URL to documentation.
    URL string `json:&amp;quot;url,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DocsDefinition points to external documentation.&lt;/p&gt;

&lt;h3 id=&#34;func-docsdefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*DocsDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (d *DocsDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h2 id=&#34;type-encodingdefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type EncodingDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type EncodingDefinition struct {
    // MIMETypes is the set of possible MIME types for the content being encoded or decoded.
    MIMETypes []string
    // PackagePath is the path to the Go package that implements the encoder / decoder.
    // The package must expose a `EncoderFactory` or `DecoderFactory` function
    // that the generated code calls. The methods must return objects that implement
    // the goa.EncoderFactory or goa.DecoderFactory interface respectively.
    PackagePath string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EncodingDefinition defines an encoder supported by the API.&lt;/p&gt;

&lt;h3 id=&#34;func-encodingdefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*EncodingDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (enc *EncodingDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-encodingdefinition-supportingpackages:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*EncodingDefinition) SupportingPackages&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (enc *EncodingDefinition) SupportingPackages() map[string][]string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SupportingPackages returns the package paths to the packages that implements the encoders and
decoders that support the MIME types in the definition.
The return value maps the package path to the corresponding list of supported MIME types.
It is nil if no package could be found for &lt;em&gt;any&lt;/em&gt; of the MIME types in the definition (in which
case the definition is invalid).&lt;/p&gt;

&lt;h3 id=&#34;func-encodingdefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*EncodingDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (enc *EncodingDefinition) Validate() *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate validates the encoding MIME type and Go package path if set.&lt;/p&gt;

&lt;h2 id=&#34;type-hash:83772ba7ad0304b1562d08f190539946&#34;&gt;type Hash&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Hash struct {
    KeyType  *AttributeDefinition
    ElemType *AttributeDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hash is the type for a hash map.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-dup:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) Dup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) Dup() DataType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dup creates a copy of h.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-example:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) Example(r *RandomGenerator) interface{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example returns a random hash value.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-isarray:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) IsArray&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) IsArray() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsArray returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-iscompatible:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) IsCompatible&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) IsCompatible(val interface{}) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsCompatible returns true if val is compatible with p.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-ishash:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) IsHash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) IsHash() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsHash returns true.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-isobject:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) IsObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) IsObject() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsObject returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-isprimitive:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) IsPrimitive&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) IsPrimitive() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsPrimitive returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-kind:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) Kind&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) Kind() Kind
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kind implements DataKind.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-name:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) Name&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) Name() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Name returns the type name.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-toarray:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) ToArray&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) ToArray() *Array
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToArray returns nil.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-tohash:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) ToHash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) ToHash() *Hash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToHash returns the underlying hash map.&lt;/p&gt;

&lt;h3 id=&#34;func-hash-toobject:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*Hash) ToObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (h *Hash) ToObject() Object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToObject returns nil.&lt;/p&gt;

&lt;h2 id=&#34;type-kind:83772ba7ad0304b1562d08f190539946&#34;&gt;type Kind&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Kind uint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Kind defines the JSON type that a DataType represents.&lt;/p&gt;

&lt;h2 id=&#34;type-licensedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type LicenseDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type LicenseDefinition struct {
    // Name of license used for the API
    Name string `json:&amp;quot;name,omitempty&amp;quot;`
    // URL to the license used for the API
    URL string `json:&amp;quot;url,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LicenseDefinition contains the license information for the API.&lt;/p&gt;

&lt;h3 id=&#34;func-licensedefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*LicenseDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (l *LicenseDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h2 id=&#34;type-linkdefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type LinkDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type LinkDefinition struct {
    // Link name
    Name string
    // View used to render link if not &amp;quot;link&amp;quot;
    View string
    // URITemplate is the RFC6570 URI template of the link Href.
    URITemplate string

    // Parent media Type
    Parent *MediaTypeDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LinkDefinition defines a media type link, it specifies a URL to a related resource.&lt;/p&gt;

&lt;h3 id=&#34;func-linkdefinition-attribute:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*LinkDefinition) Attribute&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (l *LinkDefinition) Attribute() *AttributeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attribute returns the linked attribute.&lt;/p&gt;

&lt;h3 id=&#34;func-linkdefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*LinkDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (l *LinkDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-linkdefinition-mediatype:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*LinkDefinition) MediaType&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (l *LinkDefinition) MediaType() *MediaTypeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MediaType returns the media type of the linked attribute.&lt;/p&gt;

&lt;h3 id=&#34;func-linkdefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*LinkDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (l *LinkDefinition) Validate() *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate checks that the link definition is consistent: it has a media type or the name of an
attribute part of the parent media type.&lt;/p&gt;

&lt;h2 id=&#34;type-mediatypedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type MediaTypeDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MediaTypeDefinition struct {
    // A media type is a type
    *UserTypeDefinition
    // Identifier is the RFC 6838 media type identifier.
    Identifier string
    // Links list the rendered links indexed by name.
    Links map[string]*LinkDefinition
    // Views list the supported views indexed by name.
    Views map[string]*ViewDefinition
    // Resource this media type is the canonical representation for if any
    Resource *ResourceDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MediaTypeDefinition describes the rendering of a resource using property and link
definitions. A property corresponds to a single member of the media type,
it has a name and a type as well as optional validation rules. A link has a
name and a URL that points to a related resource.
Media types also define views which describe which members and links to render when
building the response body for the corresponding view.&lt;/p&gt;

&lt;h3 id=&#34;func-newmediatypedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;func NewMediaTypeDefinition&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewMediaTypeDefinition(name, identifier string, dsl func()) *MediaTypeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewMediaTypeDefinition creates a media type definition but does not
execute the DSL.&lt;/p&gt;

&lt;h3 id=&#34;func-mediatypedefinition-computeviews:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*MediaTypeDefinition) ComputeViews&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m *MediaTypeDefinition) ComputeViews() map[string]*ViewDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ComputeViews returns the media type views recursing as necessary if the media type is a
collection.&lt;/p&gt;

&lt;h3 id=&#34;func-mediatypedefinition-dup:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*MediaTypeDefinition) Dup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m *MediaTypeDefinition) Dup() DataType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dup returns a copy of m.&lt;/p&gt;

&lt;h3 id=&#34;func-mediatypedefinition-kind:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*MediaTypeDefinition) Kind&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m *MediaTypeDefinition) Kind() Kind
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kind implements DataKind.&lt;/p&gt;

&lt;h3 id=&#34;func-mediatypedefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*MediaTypeDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m *MediaTypeDefinition) Validate() *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate checks that the media type definition is consistent: its identifier is a valid media
type identifier.&lt;/p&gt;

&lt;h2 id=&#34;type-mediatypeiterator:83772ba7ad0304b1562d08f190539946&#34;&gt;type MediaTypeIterator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MediaTypeIterator func(m *MediaTypeDefinition) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MediaTypeIterator is the type of functions given to IterateMediaTypes.&lt;/p&gt;

&lt;h2 id=&#34;type-mediatyperoot:83772ba7ad0304b1562d08f190539946&#34;&gt;type MediaTypeRoot&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MediaTypeRoot map[string]*MediaTypeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MediaTypeRoot is the data structure that represents the additional DSL definition root
that contains the media type definition set created by CollectionOf.&lt;/p&gt;

&lt;h3 id=&#34;func-mediatyperoot-iteratesets:83772ba7ad0304b1562d08f190539946&#34;&gt;func (MediaTypeRoot) IterateSets&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r MediaTypeRoot) IterateSets(iterator dslengine.SetIterator)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateSets iterates over the one generated media type definition set.&lt;/p&gt;

&lt;h2 id=&#34;type-object:83772ba7ad0304b1562d08f190539946&#34;&gt;type Object&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Object map[string]*AttributeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Object is the type for a JSON object.&lt;/p&gt;

&lt;h3 id=&#34;func-object-dup:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) Dup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) Dup() DataType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dup creates a copy of o.&lt;/p&gt;

&lt;h3 id=&#34;func-object-example:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) Example(r *RandomGenerator) interface{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example returns a random value of the object.&lt;/p&gt;

&lt;h3 id=&#34;func-object-isarray:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) IsArray&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) IsArray() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsArray returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-object-iscompatible:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) IsCompatible&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) IsCompatible(val interface{}) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsCompatible returns true if val is compatible with p.&lt;/p&gt;

&lt;h3 id=&#34;func-object-ishash:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) IsHash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) IsHash() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsHash returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-object-isobject:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) IsObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) IsObject() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsObject returns true.&lt;/p&gt;

&lt;h3 id=&#34;func-object-isprimitive:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) IsPrimitive&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) IsPrimitive() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsPrimitive returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-object-iterateattributes:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) IterateAttributes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) IterateAttributes(it AttributeIterator) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateAttributes calls the given iterator passing in each attribute sorted in alphabetical order.
Iteration stops if an iterator returns an error and in this case IterateObject returns that
error.&lt;/p&gt;

&lt;h3 id=&#34;func-object-kind:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) Kind&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) Kind() Kind
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kind implements DataKind.&lt;/p&gt;

&lt;h3 id=&#34;func-object-merge:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) Merge&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) Merge(other Object)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merge copies other&amp;rsquo;s attributes into o overridding any pre-existing attribute with the same name.&lt;/p&gt;

&lt;h3 id=&#34;func-object-name:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) Name&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) Name() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Name returns the type name.&lt;/p&gt;

&lt;h3 id=&#34;func-object-toarray:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) ToArray&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) ToArray() *Array
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToArray returns nil.&lt;/p&gt;

&lt;h3 id=&#34;func-object-tohash:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) ToHash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) ToHash() *Hash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToHash returns nil.&lt;/p&gt;

&lt;h3 id=&#34;func-object-toobject:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Object) ToObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (o Object) ToObject() Object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToObject returns the underlying object.&lt;/p&gt;

&lt;h2 id=&#34;type-primitive:83772ba7ad0304b1562d08f190539946&#34;&gt;type Primitive&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Primitive Kind
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Primitive is the type for null, boolean, integer, number, string, and time.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-dup:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) Dup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) Dup() DataType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dup returns the primitive type.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-example:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) Example(r *RandomGenerator) interface{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example returns an instance of the given data type.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-isarray:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) IsArray&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) IsArray() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsArray returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-iscompatible:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) IsCompatible&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) IsCompatible(val interface{}) (ok bool)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsCompatible returns true if val is compatible with p.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-ishash:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) IsHash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) IsHash() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsHash returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-isobject:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) IsObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) IsObject() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsObject returns false.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-isprimitive:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) IsPrimitive&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) IsPrimitive() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsPrimitive returns true.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-kind:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) Kind&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) Kind() Kind
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kind implements DataKind.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-name:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) Name&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) Name() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Name returns the type name.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-toarray:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) ToArray&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) ToArray() *Array
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToArray returns nil.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-tohash:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) ToHash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) ToHash() *Hash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToHash returns nil.&lt;/p&gt;

&lt;h3 id=&#34;func-primitive-toobject:83772ba7ad0304b1562d08f190539946&#34;&gt;func (Primitive) ToObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Primitive) ToObject() Object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToObject returns nil.&lt;/p&gt;

&lt;h2 id=&#34;type-randomgenerator:83772ba7ad0304b1562d08f190539946&#34;&gt;type RandomGenerator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type RandomGenerator struct {
    Seed string
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RandomGenerator generates consistent random values of different types given a seed.
The random values are consistent in that given the same seed the same random values get
generated.&lt;/p&gt;

&lt;h3 id=&#34;func-newrandomgenerator:83772ba7ad0304b1562d08f190539946&#34;&gt;func NewRandomGenerator&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewRandomGenerator(seed string) *RandomGenerator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewRandomGenerator returns a random value generator seeded from the given string value.&lt;/p&gt;

&lt;h3 id=&#34;func-randomgenerator-bool:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*RandomGenerator) Bool&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *RandomGenerator) Bool() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bool produces a random boolean.&lt;/p&gt;

&lt;h3 id=&#34;func-randomgenerator-datetime:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*RandomGenerator) DateTime&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *RandomGenerator) DateTime() time.Time
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DateTime produces a random date.&lt;/p&gt;

&lt;h3 id=&#34;func-randomgenerator-float64:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*RandomGenerator) Float64&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *RandomGenerator) Float64() float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Float64 produces a random float64 value.&lt;/p&gt;

&lt;h3 id=&#34;func-randomgenerator-int:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*RandomGenerator) Int&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *RandomGenerator) Int() int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Int produces a random integer.&lt;/p&gt;

&lt;h3 id=&#34;func-randomgenerator-string:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*RandomGenerator) String&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *RandomGenerator) String() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;String produces a random string.&lt;/p&gt;

&lt;h2 id=&#34;type-resourcedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type ResourceDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ResourceDefinition struct {
    // Resource name
    Name string
    // Common URL prefix to all resource action HTTP requests
    BasePath string
    // Object describing each parameter that appears in BasePath if any
    BaseParams *AttributeDefinition
    // Name of parent resource if any
    ParentName string
    // Optional description
    Description string
    // API versions that expose this resource.
    APIVersions []string
    // Default media type, describes the resource attributes
    MediaType string
    // Exposed resource actions indexed by name
    Actions map[string]*ActionDefinition
    // Action with canonical resource path
    CanonicalActionName string
    // Map of response definitions that apply to all actions indexed by name.
    Responses map[string]*ResponseDefinition
    // Path and query string parameters that apply to all actions.
    Params *AttributeDefinition
    // Request headers that apply to all actions.
    Headers *AttributeDefinition
    // DSLFunc contains the DSL used to create this definition if any.
    DSLFunc func()
    // metadata is a list of key/value pairs
    Metadata dslengine.MetadataDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResourceDefinition describes a REST resource.
It defines both a media type and a set of actions that can be executed through HTTP
requests.
A resource is versioned so that multiple versions of the same resource may be exposed
by the API.&lt;/p&gt;

&lt;h3 id=&#34;func-newresourcedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;func NewResourceDefinition&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewResourceDefinition(name string, dsl func()) *ResourceDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewResourceDefinition creates a resource definition but does not
execute the DSL.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-canonicalaction:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) CanonicalAction&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) CanonicalAction() *ActionDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CanonicalAction returns the canonical action of the resource if any.
The canonical action is used to compute hrefs to resources.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-dsl:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) DSL&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) DSL() func()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DSL returns the initialization DSL.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-finalize:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) Finalize&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) Finalize()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalize is run post DSL execution. It merges response definitions, creates implicit action
parameters, initializes querystring parameters and sets path parameters as non zero attributes.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-fullpath:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) FullPath&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) FullPath(version *APIVersionDefinition) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FullPath computes the base path to the resource actions concatenating the API and parent resource
base paths as needed.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-iterateactions:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) IterateActions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) IterateActions(it ActionIterator) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IterateActions calls the given iterator passing in each resource action sorted in alphabetical order.
Iteration stops if an iterator returns an error and in this case IterateActions returns that
error.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-parent:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) Parent&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) Parent() *ResourceDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parent returns the parent resource if any, nil otherwise.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-supportsnoversion:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) SupportsNoVersion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) SupportsNoVersion() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SupportsNoVersion returns true if the resource is exposed by an unversioned API.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-supportsversion:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) SupportsVersion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) SupportsVersion(version string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SupportsVersion returns true if the resource is exposed by the given API version.
An empty string version means no version.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-uritemplate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) URITemplate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) URITemplate(version *APIVersionDefinition) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;URITemplate returns a httprouter compliant URI template to this resource.
The result is the empty string if the resource does not have a &amp;ldquo;show&amp;rdquo; action
and does not define a different canonical action.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) Validate(version *APIVersionDefinition) *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate tests whether the resource definition is consistent: action names are valid and each action is
valid.&lt;/p&gt;

&lt;h3 id=&#34;func-resourcedefinition-versions:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResourceDefinition) Versions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResourceDefinition) Versions() []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Versions returns the API versions that expose the resource.&lt;/p&gt;

&lt;h2 id=&#34;type-resourceiterator:83772ba7ad0304b1562d08f190539946&#34;&gt;type ResourceIterator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ResourceIterator func(r *ResourceDefinition) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResourceIterator is the type of functions given to IterateResources.&lt;/p&gt;

&lt;h2 id=&#34;type-responsedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type ResponseDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ResponseDefinition struct {
    // Response name
    Name string
    // HTTP status
    Status int
    // Response description
    Description string
    // Response body media type if any
    MediaType string
    // Response header definitions
    Headers *AttributeDefinition
    // Parent action or resource
    Parent dslengine.Definition
    // Metadata is a list of key/value pairs
    Metadata dslengine.MetadataDefinition
    // Standard is true if the response definition comes from the goa default responses
    Standard bool
    // Global is true if the response definition comes from the global API properties
    Global bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResponseDefinition defines a HTTP response status and optional validation rules.&lt;/p&gt;

&lt;h3 id=&#34;func-responsedefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResponseDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResponseDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-responsedefinition-dup:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResponseDefinition) Dup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResponseDefinition) Dup() *ResponseDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dup returns a copy of the response definition.&lt;/p&gt;

&lt;h3 id=&#34;func-responsedefinition-merge:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResponseDefinition) Merge&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResponseDefinition) Merge(other *ResponseDefinition)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merge merges other into target. Only the fields of target that are not already set are merged.&lt;/p&gt;

&lt;h3 id=&#34;func-responsedefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResponseDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResponseDefinition) Validate() *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate checks that the response definition is consistent: its status is set and the media
type definition if any is valid.&lt;/p&gt;

&lt;h2 id=&#34;type-responseiterator:83772ba7ad0304b1562d08f190539946&#34;&gt;type ResponseIterator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ResponseIterator func(r *ResponseDefinition) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResponseIterator is the type of functions given to IterateResponses.&lt;/p&gt;

&lt;h2 id=&#34;type-responsetemplatedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type ResponseTemplateDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ResponseTemplateDefinition struct {
    // Response template name
    Name string
    // Response template function
    Template func(params ...string) *ResponseDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResponseTemplateDefinition defines a response template.
A response template is a function that takes an arbitrary number
of strings and returns a response definition.&lt;/p&gt;

&lt;h3 id=&#34;func-responsetemplatedefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ResponseTemplateDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *ResponseTemplateDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h2 id=&#34;type-routedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type RouteDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type RouteDefinition struct {
    // Verb is the HTTP method, e.g. &amp;quot;GET&amp;quot;, &amp;quot;POST&amp;quot;, etc.
    Verb string
    // Path is the URL path e.g. &amp;quot;/tasks/:id&amp;quot;
    Path string
    // Parent is the action this route applies to.
    Parent *ActionDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RouteDefinition represents an action route.&lt;/p&gt;

&lt;h3 id=&#34;func-routedefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*RouteDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *RouteDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-routedefinition-fullpath:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*RouteDefinition) FullPath&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *RouteDefinition) FullPath(version *APIVersionDefinition) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FullPath returns the action full path computed by concatenating the API and resource base paths
with the action specific path.&lt;/p&gt;

&lt;h3 id=&#34;func-routedefinition-isabsolute:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*RouteDefinition) IsAbsolute&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *RouteDefinition) IsAbsolute() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsAbsolute returns true if the action path should not be concatenated to the resource and API
base paths.&lt;/p&gt;

&lt;h3 id=&#34;func-routedefinition-params:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*RouteDefinition) Params&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *RouteDefinition) Params(version *APIVersionDefinition) []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params returns the route parameters.
For example for the route &amp;ldquo;GET /foo/:fooID&amp;rdquo; Params returns []string{&amp;ldquo;fooID&amp;rdquo;}.&lt;/p&gt;

&lt;h3 id=&#34;func-routedefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*RouteDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *RouteDefinition) Validate() *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate checks that the route definition is consistent: it has a parent.&lt;/p&gt;

&lt;h2 id=&#34;type-usertypedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type UserTypeDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type UserTypeDefinition struct {
    // A user type is an attribute definition.
    *AttributeDefinition
    // Name of type
    TypeName string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UserTypeDefinition is the type for user defined types that are not media types
(e.g. payload types).&lt;/p&gt;

&lt;h3 id=&#34;func-newusertypedefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;func NewUserTypeDefinition&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewUserTypeDefinition(name string, dsl func()) *UserTypeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewUserTypeDefinition creates a user type definition but does not
execute the DSL.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (t *UserTypeDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-dsl:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) DSL&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (t *UserTypeDefinition) DSL() func()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DSL returns the initialization DSL.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-dup:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) Dup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) Dup() DataType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dup returns a copy of u.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-finalize:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) Finalize&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) Finalize()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalize merges base type attributes.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-isarray:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) IsArray&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) IsArray() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsArray calls IsArray on the user type underlying data type.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-iscompatible:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) IsCompatible&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) IsCompatible(val interface{}) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsCompatible returns true if val is compatible with p.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-ishash:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) IsHash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) IsHash() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsHash calls IsHash on the user type underlying data type.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-isobject:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) IsObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) IsObject() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsObject calls IsObject on the user type underlying data type.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-isprimitive:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) IsPrimitive&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) IsPrimitive() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsPrimitive calls IsPrimitive on the user type underlying data type.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-kind:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) Kind&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) Kind() Kind
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kind implements DataKind.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-name:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) Name&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) Name() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Name returns the JSON type name.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-supportsnoversion:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) SupportsNoVersion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) SupportsNoVersion() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SupportsNoVersion returns true if the resource is exposed by an unversioned API.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-supportsversion:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) SupportsVersion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) SupportsVersion(version string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SupportsVersion returns true if the type is exposed by the given API version.
An empty string version means no version.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-toarray:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) ToArray&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) ToArray() *Array
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToArray calls ToArray on the user type underlying data type.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-tohash:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) ToHash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) ToHash() *Hash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToHash calls ToHash on the user type underlying data type.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-toobject:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) ToObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) ToObject() Object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToObject calls ToObject on the user type underlying data type.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) Validate(ctx string, parent dslengine.Definition) *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate checks that the user type definition is consistent: it has a name and all user and media
types used in fields support the API versions that use the type.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypedefinition-versions:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*UserTypeDefinition) Versions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (u *UserTypeDefinition) Versions() []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Versions returns all the API versions that use the type.&lt;/p&gt;

&lt;h2 id=&#34;type-usertypeiterator:83772ba7ad0304b1562d08f190539946&#34;&gt;type UserTypeIterator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type UserTypeIterator func(m *UserTypeDefinition) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UserTypeIterator is the type of functions given to IterateUserTypes.&lt;/p&gt;

&lt;h2 id=&#34;type-versioniterator:83772ba7ad0304b1562d08f190539946&#34;&gt;type VersionIterator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type VersionIterator func(v *APIVersionDefinition) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VersionIterator is the type of functions given to IterateVersions.&lt;/p&gt;

&lt;h2 id=&#34;type-viewdefinition:83772ba7ad0304b1562d08f190539946&#34;&gt;type ViewDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ViewDefinition struct {
    // Set of properties included in view
    *AttributeDefinition
    // Name of view
    Name string
    // Parent media Type
    Parent *MediaTypeDefinition
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ViewDefinition defines which members and links to render when building a response.
The view is a JSON object whose property names must match the names of the parent media
type members.
The members fields are inherited from the parent media type but may be overridden.&lt;/p&gt;

&lt;h3 id=&#34;func-viewdefinition-context:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ViewDefinition) Context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *ViewDefinition) Context() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context returns the generic definition name used in error messages.&lt;/p&gt;

&lt;h3 id=&#34;func-viewdefinition-validate:83772ba7ad0304b1562d08f190539946&#34;&gt;func (*ViewDefinition) Validate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *ViewDefinition) Validate() *dslengine.ValidationErrors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate checks that the view definition is consistent: it has a  parent media type and the
underlying definition type is consistent.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>goa/design/apidsl</title>
      <link>http://goa.design/godoc/goa/design/apidsl/apidsl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/goa/design/apidsl/apidsl/</guid>
      <description>

&lt;h1 id=&#34;apidsl:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;apidsl&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/goa/design/apidsl&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package apidsl implements the goa design language.&lt;/p&gt;

&lt;p&gt;The goa design language provides a simple way to describe an API design. The language consists of
global Go functions that can be nested to build up &lt;em&gt;definitions&lt;/em&gt;. The root definition is the API
definition. This definition is what the language builds as it executes. There are 3 other top level
definitions: the resource, media type and type definitions all created using the corresponding
global functions (Resource, MediaType and Type).&lt;/p&gt;

&lt;p&gt;Resource definitions describe the API resources. This includes the default media type used to
represent the resource as well as all the actions that can be run on it.&lt;/p&gt;

&lt;p&gt;Media type definitions describe the media types used throughout the API. A media type describes
the body of HTTP responses by listing their attributes (think object fields) in a recursive manner.
This description can also include JSON schema-like validation rules that goa uses to produce
validation code. A Media type definition also describes one or more &lt;em&gt;views&lt;/em&gt; and for each view which
fields to render. Finally a media type definition may also define &lt;em&gt;links&lt;/em&gt; to other resources. The
media type used to render the link on a resource defines a special &amp;ldquo;link&amp;rdquo; view used by default by
goa to render the &amp;ldquo;links&amp;rdquo; child attributes.&lt;/p&gt;

&lt;p&gt;The last top level definition is the type definition. Type definitions describe data structures
in a similar way that media type definitions describe response body attributes. In fact, media
type definitions are a special kind of type definitions that add views and links. Type definitions
can be used to describe the request payloads as a whole or any attribute appearing anywhere
(payloads, media types, headers, params etc.) and as with media type definitions they can include
validation rules that goa leverages to validate attributes of that type.&lt;/p&gt;

&lt;p&gt;Package apidsl also provides a generic DSL engine that other DSLs can plug into. Adding a DSL
implementation consists of registering the root DSL object in the design package Roots variable.
The runner iterates through all root DSL definitions and executes the definition sets they expose.&lt;/p&gt;

&lt;p&gt;In general there should be one root definition per DSL (the built-in API DSL uses the APIDefinition
as root definition). The root definition can in turn list sets of definitions where a set defines
a unit of execution and allows to control the ordering of execution. Each definition set consists
of a list of definitions. Definitions must implement the design.Definition interface and may
additionally implement the design.Source and design.Validate interfaces.&lt;/p&gt;

&lt;h2 id=&#34;constants:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;Constants&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
    Continue           = &amp;quot;Continue&amp;quot;
    SwitchingProtocols = &amp;quot;SwitchingProtocols&amp;quot;

    OK                   = &amp;quot;OK&amp;quot;
    Created              = &amp;quot;Created&amp;quot;
    Accepted             = &amp;quot;Accepted&amp;quot;
    NonAuthoritativeInfo = &amp;quot;NonAuthoritativeInfo&amp;quot;
    NoContent            = &amp;quot;NoContent&amp;quot;
    ResetContent         = &amp;quot;ResetContent&amp;quot;
    PartialContent       = &amp;quot;PartialContent&amp;quot;

    MultipleChoices   = &amp;quot;MultipleChoices&amp;quot;
    MovedPermanently  = &amp;quot;MovedPermanently&amp;quot;
    Found             = &amp;quot;Found&amp;quot;
    SeeOther          = &amp;quot;SeeOther&amp;quot;
    NotModified       = &amp;quot;NotModified&amp;quot;
    UseProxy          = &amp;quot;UseProxy&amp;quot;
    TemporaryRedirect = &amp;quot;TemporaryRedirect&amp;quot;

    BadRequest                   = &amp;quot;BadRequest&amp;quot;
    Unauthorized                 = &amp;quot;Unauthorized&amp;quot;
    PaymentRequired              = &amp;quot;PaymentRequired&amp;quot;
    Forbidden                    = &amp;quot;Forbidden&amp;quot;
    NotFound                     = &amp;quot;NotFound&amp;quot;
    MethodNotAllowed             = &amp;quot;MethodNotAllowed&amp;quot;
    NotAcceptable                = &amp;quot;NotAcceptable&amp;quot;
    ProxyAuthRequired            = &amp;quot;ProxyAuthRequired&amp;quot;
    RequestTimeout               = &amp;quot;RequestTimeout&amp;quot;
    Conflict                     = &amp;quot;Conflict&amp;quot;
    Gone                         = &amp;quot;Gone&amp;quot;
    LengthRequired               = &amp;quot;LengthRequired&amp;quot;
    PreconditionFailed           = &amp;quot;PreconditionFailed&amp;quot;
    RequestEntityTooLarge        = &amp;quot;RequestEntityTooLarge&amp;quot;
    RequestURITooLong            = &amp;quot;RequestURITooLong&amp;quot;
    UnsupportedMediaType         = &amp;quot;UnsupportedMediaType&amp;quot;
    RequestedRangeNotSatisfiable = &amp;quot;RequestedRangeNotSatisfiable&amp;quot;
    ExpectationFailed            = &amp;quot;ExpectationFailed&amp;quot;
    Teapot                       = &amp;quot;Teapot&amp;quot;
    UnprocessableEntity          = &amp;quot;UnprocessableEntity&amp;quot;

    InternalServerError     = &amp;quot;InternalServerError&amp;quot;
    NotImplemented          = &amp;quot;NotImplemented&amp;quot;
    BadGateway              = &amp;quot;BadGateway&amp;quot;
    ServiceUnavailable      = &amp;quot;ServiceUnavailable&amp;quot;
    GatewayTimeout          = &amp;quot;GatewayTimeout&amp;quot;
    HTTPVersionNotSupported = &amp;quot;HTTPVersionNotSupported&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List of all built-in response names.&lt;/p&gt;

&lt;h2 id=&#34;variables:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;Variables&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var SupportedValidationFormats = []string{
    &amp;quot;cidr&amp;quot;,
    &amp;quot;date-time&amp;quot;,
    &amp;quot;email&amp;quot;,
    &amp;quot;hostname&amp;quot;,
    &amp;quot;ipv4&amp;quot;,
    &amp;quot;ipv6&amp;quot;,
    &amp;quot;mac&amp;quot;,
    &amp;quot;regexp&amp;quot;,
    &amp;quot;uri&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SupportedValidationFormats lists the supported formats for use with the
Format DSL.&lt;/p&gt;

&lt;h2 id=&#34;func-api:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func API&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func API(name string, dsl func()) *design.APIDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API implements the top level API DSL. It defines the API name, default description and other
default global property values for all API versions. Here is an example showing all the possible
API sub-definitions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;API(&amp;quot;API name&amp;quot;, func() {
    Title(&amp;quot;title&amp;quot;)              // API title used in documentation
    Description(&amp;quot;description&amp;quot;)      // API description used in documentation
    TermsOfService(&amp;quot;terms&amp;quot;)
    Contact(func() {            // API Contact information
        Name(&amp;quot;contact name&amp;quot;)
        Email(&amp;quot;contact email&amp;quot;)
        URL(&amp;quot;contact URL&amp;quot;)
    })
    License(func() {            // API Licensing information
        Name(&amp;quot;license name&amp;quot;)
        URL(&amp;quot;license URL&amp;quot;)
    })
    Docs(func() {
        Description(&amp;quot;doc description&amp;quot;)
        URL(&amp;quot;doc URL&amp;quot;)
    })
    Host(&amp;quot;goa.design&amp;quot;)          // API hostname
    Scheme(&amp;quot;http&amp;quot;)
    BasePath(&amp;quot;/base/:param&amp;quot;)        // Common base path to all API actions
    BaseParams(func() {         // Common parameters to all API actions
        Param(&amp;quot;param&amp;quot;)
    })
    Consumes(&amp;quot;application/xml&amp;quot;, &amp;quot;text/xml&amp;quot;, func() {
        Package(&amp;quot;github.com/raphael/goa-middleware/encoding/xml&amp;quot;)
    })
    Consumes(&amp;quot;application/json&amp;quot;)
    Produces(&amp;quot;application/vnd.golang.gob&amp;quot;, func() {
        Package(&amp;quot;github.com/raphael/goa-middleware/encoding/gob&amp;quot;)
    })
    Produces(&amp;quot;application/json&amp;quot;)
    ResponseTemplate(&amp;quot;static&amp;quot;, func() { // Response template for use by actions
        Description(&amp;quot;description&amp;quot;)
        Status(404)
        MediaType(&amp;quot;application/json&amp;quot;)
    })
    ResponseTemplate(&amp;quot;dynamic&amp;quot;, func(arg1, arg2 string) {
        Description(arg1)
        Status(200)
        MediaType(arg2)
    })
    Trait(&amp;quot;Authenticated&amp;quot;, func() {     // Traits define DSL that can be run anywhere
        Headers(func() {
            Header(&amp;quot;header&amp;quot;)
            Required(&amp;quot;header&amp;quot;)
        })
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-apiversion:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func APIVersion&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func APIVersion(versions ...string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;APIVersion define the API version(s) that expose this resource.&lt;/p&gt;

&lt;h2 id=&#34;func-action:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Action&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Action(name string, dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Action implements the action definition DSL. Action definitions describe specific API endpoints
including the URL, HTTP method and request parameters (via path wildcards or query strings) and
payload (data structure describing the request HTTP body). An action belongs to a resource and
&amp;ldquo;inherits&amp;rdquo; default values from the resource definition including the URL path prefix, default
response media type and default payload attribute properties (inherited from the attribute with
identical name in the resource default media type). Action definitions also describe all the
possible responses including the HTTP status, headers and body. Here is an example showing all
the possible sub-definitions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Action(&amp;quot;Update&amp;quot;, func() {
    Description(&amp;quot;Update account&amp;quot;)
    Docs(func() {
        Description(&amp;quot;Update docs&amp;quot;)
        URL(&amp;quot;http//cellarapi.com/docs/actions/update&amp;quot;)
    })
    Scheme(&amp;quot;http&amp;quot;)
    Routing(
        PUT(&amp;quot;/:id&amp;quot;),                // Full action path is built by appending &amp;quot;/:id&amp;quot; to parent resource base path
        PUT(&amp;quot;//orgs/:org/accounts/:id&amp;quot;),    // The // prefix indicates an absolute path
    )
    Params(func() {                 // Params describe the action parameters
        Param(&amp;quot;org&amp;quot;, String)            // Parameters may correspond to path wildcards
        Param(&amp;quot;id&amp;quot;, Integer)
        Param(&amp;quot;sort&amp;quot;, func() {          // or URL query string values.
            Enum(&amp;quot;asc&amp;quot;, &amp;quot;desc&amp;quot;)
        })
    })
    Headers(func() {                // Headers describe relevant action headers
        Header(&amp;quot;Authorization&amp;quot;, String)
        Header(&amp;quot;X-Account&amp;quot;, Integer)
        Required(&amp;quot;Authorization&amp;quot;, &amp;quot;X-Account&amp;quot;)
    })
    Payload(UpdatePayload)              // Payload describes the HTTP request body (here using a type)
    Response(NoContent)             // Each possible HTTP response is described via Response
    Response(NotFound)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-arrayof:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func ArrayOf&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ArrayOf(t design.DataType) *design.Array
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ArrayOf creates an array type from its element type. The result can be used anywhere a type can.
Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Bottle = Type(&amp;quot;bottle&amp;quot;, func() {
    Attribute(&amp;quot;name&amp;quot;)
})

var Bottles = ArrayOf(Bottle)

Action(&amp;quot;update&amp;quot;, func() {
    Params(func() {
        Param(&amp;quot;ids&amp;quot;, ArrayOf(Integer))
    })
    Payload(ArrayOf(Bottle))  // Equivalent to Payload(Bottles)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are looking to return a collection of elements in a Response
clause, refer to CollectionOf.  ArrayOf creates a type, where
CollectionOf creates a media type.&lt;/p&gt;

&lt;h2 id=&#34;func-attribute:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Attribute&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Attribute(name string, args ...interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attribute implements the attribute definition DSL. An attribute describes a data structure
recursively. Attributes are used for describing request headers, parameters and payloads -
response bodies and headers - media types and types. An attribute definition is recursive:
attributes may include other attributes. At the basic level an attribute has a name,
a type and optionally a default value and validation rules. The type of an attribute can be one of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The primitive types Boolean, Integer, Number or String.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A type defined via the Type function.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A media type defined via the MediaType function.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An object described recursively with child attributes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An array defined using the ArrayOf function.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An hashmap defined using the HashOf function.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Attributes can be defined using the Attribute, Param, Member or Header functions depending
on where the definition appears. The syntax for all these DSL is the same.
Here are some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Attribute(&amp;quot;name&amp;quot;)                   // Defines an attribute of type String

Attribute(&amp;quot;name&amp;quot;, func() {
    Pattern(&amp;quot;^foo&amp;quot;)                 // Adds a validation rule to the attribute
})

Attribute(&amp;quot;name&amp;quot;, Integer)              // Defines an attribute of type Integer

Attribute(&amp;quot;name&amp;quot;, Integer, func() {
    Default(42)                 // With a default value
})

Attribute(&amp;quot;name&amp;quot;, Integer, &amp;quot;description&amp;quot;)       // Specifies a description

Attribute(&amp;quot;name&amp;quot;, Integer, &amp;quot;description&amp;quot;, func() {
    Enum(1, 2)                  // And validation rules
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nested attributes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Attribute(&amp;quot;nested&amp;quot;, func() {
    Description(&amp;quot;description&amp;quot;)
    Attribute(&amp;quot;child&amp;quot;)
    Attribute(&amp;quot;child2&amp;quot;, func() {
        // ....
    })
    Required(&amp;quot;child&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are all the valid usage of the Attribute function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Attribute(name string, dataType DataType, description string, dsl func())

Attribute(name string, dataType DataType, description string)

Attribute(name string, dataType DataType, dsl func())

Attribute(name string, dataType DataType)

Attribute(name string, dsl func())  // dataType is String or Object (if DSL defines child attributes)

Attribute(name string)          // dataType is String
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-attributes:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Attributes&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Attributes(dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attributes implements the media type attributes dsl. See MediaType.&lt;/p&gt;

&lt;h2 id=&#34;func-baseparams:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func BaseParams&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func BaseParams(dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BaseParams defines the API base path parameters. These parameters may correspond to wildcards in
the BasePath or URL query string values.
The DSL for describing each Param is the Attribute DSL.&lt;/p&gt;

&lt;h2 id=&#34;func-basepath:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func BasePath&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func BasePath(val string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BasePath defines the API base path, i.e. the common path prefix to all the API actions.
The path may define wildcards (see Routing for a description of the wildcard syntax).
The corresponding parameters must be described using BaseParams.&lt;/p&gt;

&lt;h2 id=&#34;func-connect:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func CONNECT&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func CONNECT(path string) *design.RouteDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CONNECT creates a route using the GET HTTP method.&lt;/p&gt;

&lt;h2 id=&#34;func-canonicalactionname:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func CanonicalActionName&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func CanonicalActionName(a string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CanonicalActionName sets the name of the action used to compute the resource collection and
resource collection items hrefs. See Resource.&lt;/p&gt;

&lt;h2 id=&#34;func-collectionof:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func CollectionOf&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func CollectionOf(v interface{}, dsl ...func()) *design.MediaTypeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CollectionOf creates a collection media type from its element media type. A collection media
type represents the content of responses that return a collection of resources such as &amp;ldquo;list&amp;rdquo;
actions. This function can be called from any place where a media type can be used.
The resulting media type identifier is built from the element media type by appending the media
type parameter &amp;ldquo;type&amp;rdquo; with value &amp;ldquo;collection&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;func-consumes:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Consumes&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Consumes(args ...interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consumes adds a MIME type to the list of MIME types the APIs supports when accepting requests.
Consumes may also specify the path of the decoding package.
The package must expose a DecoderFactory method that returns an object which implements
goa.DecoderFactory.&lt;/p&gt;

&lt;h2 id=&#34;func-contact:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Contact&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Contact(dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Contact sets the API contact information.&lt;/p&gt;

&lt;h2 id=&#34;func-delete:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func DELETE&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DELETE(path string) *design.RouteDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DELETE creates a route using the DELETE HTTP method.&lt;/p&gt;

&lt;h2 id=&#34;func-default:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Default&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Default(def interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Default sets the default value for an attribute.&lt;/p&gt;

&lt;h2 id=&#34;func-defaultmedia:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func DefaultMedia&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DefaultMedia(val interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DefaultMedia sets a resource default media type by identifier or by reference using a value
returned by MediaType:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var _ = Resource(&amp;quot;bottle&amp;quot;, func() {
    DefaultMedia(BottleMedia)
    // ...
})

var _ = Resource(&amp;quot;region&amp;quot;, func() {
    DefaultMedia(&amp;quot;vnd.goa.region&amp;quot;)
    // ...
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default media type is used to build OK response definitions when no specific media type is
given in the Response function call. The default media type is also used to set the default
properties of attributes listed in action payloads. So if a media type defines an attribute
&amp;ldquo;name&amp;rdquo; with associated validations then simply calling Attribute(&amp;ldquo;name&amp;rdquo;) inside a request
Payload defines the payload attribute with the same type and validations.&lt;/p&gt;

&lt;h2 id=&#34;func-description:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Description&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Description(d string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Description sets the definition description.
Description can be called inside API, Resource, Action or MediaType.&lt;/p&gt;

&lt;h2 id=&#34;func-docs:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Docs&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Docs(dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docs provides external documentation pointers.&lt;/p&gt;

&lt;h2 id=&#34;func-email:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Email&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Email(email string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Email sets the contact email.&lt;/p&gt;

&lt;h2 id=&#34;func-enum:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Enum&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Enum(val ...interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enum adds a &amp;ldquo;enum&amp;rdquo; validation to the attribute.
See &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor76&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor76&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;func-format:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Format&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Format(f string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Format adds a &amp;ldquo;format&amp;rdquo; validation to the attribute.
See &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor104&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor104&lt;/a&gt;.
The formats supported by goa are:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;date-time&amp;rdquo;: RFC3339 date time&lt;/p&gt;

&lt;p&gt;&amp;ldquo;email&amp;rdquo;: RFC5322 email address&lt;/p&gt;

&lt;p&gt;&amp;ldquo;hostname&amp;rdquo;: RFC1035 internet host name&lt;/p&gt;

&lt;p&gt;&amp;ldquo;ipv4&amp;rdquo; and &amp;ldquo;ipv6&amp;rdquo;: RFC2373 IPv4 and IPv6 address&lt;/p&gt;

&lt;p&gt;&amp;ldquo;uri&amp;rdquo;: RFC3986 URI&lt;/p&gt;

&lt;p&gt;&amp;ldquo;mac&amp;rdquo;: IEEE 802 MAC-48, EUI-48 or EUI-64 MAC address&lt;/p&gt;

&lt;p&gt;&amp;ldquo;cidr&amp;rdquo;: RFC4632 or RFC4291 CIDR notation IP address&lt;/p&gt;

&lt;p&gt;&amp;ldquo;regexp&amp;rdquo;: RE2 regular expression&lt;/p&gt;

&lt;h2 id=&#34;func-get:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func GET&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func GET(path string) *design.RouteDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GET creates a route using the GET HTTP method.&lt;/p&gt;

&lt;h2 id=&#34;func-head:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func HEAD&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func HEAD(path string) *design.RouteDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HEAD creates a route using the HEAD HTTP method.&lt;/p&gt;

&lt;h2 id=&#34;func-hashof:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func HashOf&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func HashOf(k, v design.DataType) *design.Hash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HashOf creates a hash map from its key and element types. The result can be used anywhere a type
can. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Bottle = Type(&amp;quot;bottle&amp;quot;, func() {
    Attribute(&amp;quot;name&amp;quot;)
})

var RatedBottles = HashOf(String, Bottle)

Action(&amp;quot;updateRatings&amp;quot;, func() {
    Payload(func() {
        Member(&amp;quot;ratings&amp;quot;, HashOf(String, Integer))  // Artificial examples...
        Member(&amp;quot;bottles&amp;quot;, RatedBottles)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-header:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Header&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Header(name string, args ...interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Header is an alias of Attribute.&lt;/p&gt;

&lt;h2 id=&#34;func-headers:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Headers&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Headers(dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Headers implements the DSL for describing HTTP headers. The DSL syntax is identical to the one
of Attribute. Here is an example defining a couple of headers with validations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Headers(func() {
    Header(&amp;quot;Authorization&amp;quot;)
    Header(&amp;quot;X-Account&amp;quot;, Integer, func() {
        Minimum(1)
    })
    Required(&amp;quot;Authorization&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Headers can be used inside Action to define the action request headers, Response to define the
response headers or Resource to define common request headers to all the resource actions.&lt;/p&gt;

&lt;h2 id=&#34;func-host:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Host&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Host(host string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Host sets the API hostname.&lt;/p&gt;

&lt;h2 id=&#34;func-initdesign:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func InitDesign&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func InitDesign()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;InitDesign initializes the Design global variable and loads the built-in
response templates. This is a public function mainly so it can be used in tests.&lt;/p&gt;

&lt;h2 id=&#34;func-license:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func License&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func License(dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;License sets the API license information.&lt;/p&gt;

&lt;h2 id=&#34;func-link:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Link&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Link(name string, view ...string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Link adds a link to a media type. At the minimum a link has a name corresponding to one of the
media type attribute names. A link may also define the view used to render the linked-to
attribute. The default view used to render links is &amp;ldquo;link&amp;rdquo;. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Link(&amp;quot;origin&amp;quot;)      // Use the &amp;quot;link&amp;quot; view of the &amp;quot;origin&amp;quot; attribute
Link(&amp;quot;account&amp;quot;, &amp;quot;tiny&amp;quot;) // Use the &amp;quot;tiny&amp;quot; view of the &amp;quot;account&amp;quot; attribute
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-links:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Links&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Links(dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Links implements the media type links dsl. See MediaType.&lt;/p&gt;

&lt;h2 id=&#34;func-maxlength:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func MaxLength&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func MaxLength(val int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MaxLength adss a &amp;ldquo;maxItems&amp;rdquo; validation to the attribute.
See &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor42&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor42&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;func-maximum:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Maximum&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Maximum(val interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maximum adds a &amp;ldquo;maximum&amp;rdquo; validation to the attribute.
See &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor17&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor17&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;func-media:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Media&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Media(val interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Media sets a response media type by name or by reference using a value returned by MediaType:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Response(&amp;quot;NotFound&amp;quot;, func() {
    Status(404)
    Media(&amp;quot;application/json&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Media can be used inside Response or ResponseTemplate.&lt;/p&gt;

&lt;h2 id=&#34;func-mediatype:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func MediaType&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func MediaType(identifier string, dsl func()) *design.MediaTypeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MediaType implements the media type definition dsl. A media type definition describes the
representation of a resource used in a response body. This includes listing all the &lt;em&gt;potential&lt;/em&gt;
resource attributes that can appear in the body. Views specify which of the attributes are
actually rendered so that the same media type definition may represent multiple rendering of a
given resource representation.&lt;/p&gt;

&lt;p&gt;All media types must define a view named &amp;ldquo;default&amp;rdquo;. This view is used to render the media type in
response bodies when no other view is specified.&lt;/p&gt;

&lt;p&gt;A media type definition may also define links to other media types. This is done by first
defining an attribute for the linked-to media type and then referring to that attribute in the
Links dsl. Views may then elect to render one or the other or both. Links are rendered using the
special &amp;ldquo;link&amp;rdquo; view. Media types that are linked to must define that view. Here is an example
showing all the possible media type sub-definitions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MediaType(&amp;quot;application/vnd.goa.example.bottle&amp;quot;, func() {
    Description(&amp;quot;A bottle of wine&amp;quot;)
    APIVersion(&amp;quot;1.0&amp;quot;)
    TypeName(&amp;quot;BottleMedia&amp;quot;)         // Optionally override the default generated name
    Attributes(func() {
        Attribute(&amp;quot;id&amp;quot;, Integer, &amp;quot;ID of bottle&amp;quot;)
        Attribute(&amp;quot;href&amp;quot;, String, &amp;quot;API href of bottle&amp;quot;)
        Attribute(&amp;quot;account&amp;quot;, Account, &amp;quot;Owner account&amp;quot;)
        Attribute(&amp;quot;origin&amp;quot;, Origin, &amp;quot;Details on wine origin&amp;quot;)
        Links(func() {
            Link(&amp;quot;account&amp;quot;)     // Defines a link to the Account media type
            Link(&amp;quot;origin&amp;quot;, &amp;quot;tiny&amp;quot;)  // Overrides the default view used to render links
        })
        Required(&amp;quot;id&amp;quot;, &amp;quot;href&amp;quot;)
    })
    View(&amp;quot;default&amp;quot;, func() {
        Attribute(&amp;quot;id&amp;quot;)
        Attribute(&amp;quot;href&amp;quot;)
        Attribute(&amp;quot;links&amp;quot;)  // Default view renders links
    })
    View(&amp;quot;extended&amp;quot;, func() {
        Attribute(&amp;quot;id&amp;quot;)
        Attribute(&amp;quot;href&amp;quot;)
        Attribute(&amp;quot;account&amp;quot;)    // Extended view renders account inline
        Attribute(&amp;quot;origin&amp;quot;) // Extended view renders origin inline
        Attribute(&amp;quot;links&amp;quot;)  // Extended view also renders links
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function returns the media type definition so it can be referred to throughout the dsl.&lt;/p&gt;

&lt;h2 id=&#34;func-member:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Member&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Member(name string, args ...interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Member is an alias of Attribute.&lt;/p&gt;

&lt;h2 id=&#34;func-metadata:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Metadata&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Metadata(name string, value ...string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Metadata is a set of key/value pairs that can be assigned
to an object. Each value consists of a slice of stirngs so
that multiple invocation of the Metadata function on the
same target using the same key builds up the slice.&lt;/p&gt;

&lt;p&gt;While keys can have any value the following names are
handled explicitly by goagen:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;struct:tag=xxx&amp;rdquo;: sets the struct field tag xxx on generated structs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Overrides tags that goagen would otherwise set.
If the metadata value is a slice then the
strings are joined with the space character as
separator.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;swagger:tag=xxx&amp;rdquo;: sets the Swagger object field tag xxx. The value&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;must be one to three strings. The first string is
the tag description while the second and third strings
are the documentation url and description for the tag.
Subsequent calls to Metadata on the same attribute
with key &amp;quot;swagger:tag&amp;quot; builds up the Swagger tag list.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Metadata(&amp;quot;struct:tag=json&amp;quot;, &amp;quot;myName,omitempty&amp;quot;)
Metadata(&amp;quot;struct:tag=xml&amp;quot;, &amp;quot;myName,attr&amp;quot;)
Metadata(&amp;quot;swagger:tag=backend&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-minlength:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func MinLength&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func MinLength(val int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MinLength adss a &amp;ldquo;minItems&amp;rdquo; validation to the attribute.
See &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor45&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor45&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;func-minimum:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Minimum&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Minimum(val interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Minimum adds a &amp;ldquo;minimum&amp;rdquo; validation to the attribute.
See &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor21&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor21&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;func-name:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Name&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Name(name string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Name sets the contact or license name.&lt;/p&gt;

&lt;h2 id=&#34;func-patch:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func PATCH&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func PATCH(path string) *design.RouteDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PATCH creates a route using the PATCH HTTP method.&lt;/p&gt;

&lt;h2 id=&#34;func-post:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func POST&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func POST(path string) *design.RouteDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;POST creates a route using the POST HTTP method.&lt;/p&gt;

&lt;h2 id=&#34;func-put:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func PUT&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func PUT(path string) *design.RouteDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PUT creates a route using the PUT HTTP method.&lt;/p&gt;

&lt;h2 id=&#34;func-package:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Package&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Package(path string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package sets the Go package path to the encoder or decoder. It must be used inside a
Consumes or Produces DSL.&lt;/p&gt;

&lt;h2 id=&#34;func-param:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Param&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Param(name string, args ...interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Param is an alias of Attribute.&lt;/p&gt;

&lt;h2 id=&#34;func-params:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Params&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Params(dsl func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params describe the action parameters, either path parameters identified via wildcards or query
string parameters. Each parameter is described via the &lt;code&gt;Param&lt;/code&gt; function which uses the same DSL
as the Attribute DSL. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Params(func() {
    Param(&amp;quot;id&amp;quot;, Integer)        // A path parameter defined using e.g. GET(&amp;quot;/:id&amp;quot;)
    Param(&amp;quot;sort&amp;quot;, String, func() {  // A query string parameter
        Enum(&amp;quot;asc&amp;quot;, &amp;quot;desc&amp;quot;)
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params can be used inside Action to define the action parameters or Resource to define common
parameters to all the resource actions.&lt;/p&gt;

&lt;h2 id=&#34;func-parent:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Parent&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Parent(p string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parent sets the resource parent. The parent resource is used to compute the path to the resource
actions as well as resource collection item hrefs. See Resource.&lt;/p&gt;

&lt;h2 id=&#34;func-pattern:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Pattern&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Pattern(p string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pattern adds a &amp;ldquo;pattern&amp;rdquo; validation to the attribute.
See &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor33&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor33&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;func-payload:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Payload&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Payload(p interface{}, dsls ...func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Payload implements the action payload DSL. An action payload describes the HTTP request body
data structure. The function accepts either a type or a DSL that describes the payload members
using the Member DSL which accepts the same syntax as the Attribute DSL. This function can be
called passing in a type, a DSL or both. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Payload(BottlePayload)      // Request payload is described by the BottlePayload type

Payload(func() {        // Request payload is an object and is described inline
    Member(&amp;quot;Name&amp;quot;)
})

Payload(BottlePayload, func() { // Request payload is described by merging the inline
    Required(&amp;quot;Name&amp;quot;)    // definition into the BottlePayload type.
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-produces:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Produces&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Produces(args ...interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Produces adds a MIME type to the list of MIME types the APIs can encode responses with.
Produces may also specify the path of the encoding package.
The package must expose a EncoderFactory method that returns an object which implements
goa.EncoderFactory.&lt;/p&gt;

&lt;h2 id=&#34;func-reference:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Reference&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Reference(t design.DataType)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference sets a type or media type reference. The value itself can be a type or a media type.
The reference type attributes define the default properties for attributes with the same name in
the type using the reference. So for example if a type is defined as such:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Bottle = Type(&amp;quot;bottle&amp;quot;, func() {
    Attribute(&amp;quot;name&amp;quot;, func() {
        MinLength(3)
    })
    Attribute(&amp;quot;vintage&amp;quot;, Integer, func() {
        Minimum(1970)
    })
    Attribute(&amp;quot;somethingelse&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Declaring the following media type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var BottleMedia = MediaType(&amp;quot;vnd.goa.bottle&amp;quot;, func() {
    Reference(Bottle)
    Attributes(func() {
        Attribute(&amp;quot;id&amp;quot;, Integer)
        Attribute(&amp;quot;name&amp;quot;)
        Attribute(&amp;quot;vintage&amp;quot;)
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;defines the &amp;ldquo;name&amp;rdquo; and &amp;ldquo;vintage&amp;rdquo; attributes with the same type and validations as defined in
the Bottle type.&lt;/p&gt;

&lt;h2 id=&#34;func-required:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Required&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Required(names ...string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Required adds a &amp;ldquo;required&amp;rdquo; validation to the attribute.
See &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor61&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor61&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;func-resource:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Resource&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Resource(name string, dsl func()) *design.ResourceDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resource implements the resource definition dsl. There is one resource definition per resource
exposed by the API. The resource dsl allows setting the resource default media type. This media
type is used to render the response body of actions that return the OK response (unless the
action overrides the default). The default media type also sets the properties of the request
payload attributes with the same name. See DefaultMedia.&lt;/p&gt;

&lt;p&gt;The resource dsl also allows listing the supported resource collection and resource collection
item actions. Each action corresponds to a specific API endpoint. See Action.&lt;/p&gt;

&lt;p&gt;The resource dsl can also specify a parent resource. Parent resources have two effects.
First, they set the prefix of all resource action paths to the parent resource href. Note that
actions can override the path using an absolute path (that is a path starting with &amp;ldquo;//&amp;rdquo;).
Second, goa uses the parent resource href coupled with the resource BasePath if any to build
hrefs to the resource collection or resource collection items. By default goa uses the show
action if present to compute a resource href (basically concatenating the parent resource href
with the base path and show action path). The resource definition may specify a canonical action
via CanonicalActionName to override that default. Here is an example of a resource definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Resource(&amp;quot;bottle&amp;quot;, func() {
    Description(&amp;quot;A wine bottle&amp;quot;)    // Resource description
    DefaultMedia(BottleMedia)   // Resource default media type
    BasePath(&amp;quot;/bottles&amp;quot;)        // Common resource action path prefix if not &amp;quot;&amp;quot;
    Parent(&amp;quot;account&amp;quot;)       // Name of parent resource if any
    CanonicalActionName(&amp;quot;get&amp;quot;)  // Name of action that returns canonical representation if not &amp;quot;show&amp;quot;
    UseTrait(&amp;quot;Authenticated&amp;quot;)   // Included trait if any, can appear more than once
    APIVersion(&amp;quot;v1&amp;quot;)        // API version exposing this resource, can appear more than once.

    Action(&amp;quot;show&amp;quot;, func() {     // Action definition, can appear more than once
        // ... Action dsl
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;func-response:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Response&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Response(name string, paramsAndDSL ...interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Response implements the response definition DSL. Response takes the name of the response as
first parameter. goa defines all the standard HTTP status name as global variables so they can be
readily used as response names. Response also accepts optional arguments that correspond to the
arguments defined by the corresponding response template (the response template with the same
name) if there is one, see ResponseTemplate.&lt;/p&gt;

&lt;p&gt;A response may also optionally use an anonymous function as last argument to specify the response
status code, media type and headers overriding what the default response or response template
specifies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Response(OK, &amp;quot;vnd.goa.bottle&amp;quot;, func() { // OK response template accepts one argument: the media type identifier
    Headers(func() {        // Headers list the response HTTP headers, see Headers
        Header(&amp;quot;X-Request-Id&amp;quot;)
    })
})

Response(NotFound, func() {
    Status(404)         // Not necessary as defined by default NotFound response.
    Media(&amp;quot;application/json&amp;quot;)   // Override NotFound response default of &amp;quot;text/plain&amp;quot;
})

Response(Created, func() {
    Media(BottleMedia)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;goa defines a default response for all the HTTP status code. The default response simply sets
the status code. So if an action can return NotFound for example all it has to do is specify
Response(NotFound) - there is no need to specify the status code as the default response already
does it, in other words:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Response(NotFound)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Response(NotFound, func() {
    Status(404)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;goa also defines a default response template for the OK response which takes a single argument:
the identifier of the media type used to render the response. The API DSL can define additional
response templates or override the default OK response template using ResponseTemplate.&lt;/p&gt;

&lt;p&gt;The media type identifier specified in a response definition via the Media function can be
&amp;ldquo;generic&amp;rdquo; such as &amp;ldquo;text/plain&amp;rdquo; or &amp;ldquo;application/json&amp;rdquo; or can correspond to the identifier of a
media type defined in the API DSL. In this latter case goa uses the media type definition to
generate helper response methods. These methods know how to render the views defined on the media
type and run the validations defined in the media type during rendering.&lt;/p&gt;

&lt;h2 id=&#34;func-responsetemplate:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func ResponseTemplate&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ResponseTemplate(name string, p interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResponseTemplate defines a response template that action definitions can use to describe their
responses. The template may specify the HTTP response status, header specification and body media
type. The template consists of a name and an anonymous function. The function is called when an
action uses the template to define a response. Response template functions accept string
parameters they can use to define the response fields. Here is an example of a response template
definition that uses a function with one argument corresponding to the name of the response body
media type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ResponseTemplate(OK, func(mt string) {
    Status(200)             // OK response uses status code 200
    Media(mt)               // Media type name set by action definition
    Headers(func() {
        Header(&amp;quot;X-Request-Id&amp;quot;, func() { // X-Request-Id header contains a string
            Pattern(&amp;quot;[0-9A-F]+&amp;quot;)    // Regexp used to validate the response header content
        })
        Required(&amp;quot;X-Request-Id&amp;quot;)    // Header is mandatory
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This template can the be used by actions to define the OK response as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Response(OK, &amp;quot;vnd.goa.example&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;goa comes with a set of predefined response templates (one per standard HTTP status code). The
OK template is the only one that accepts an argument. It is used as shown in the example above to
set the response media type. Other predefined templates do not use arguments. ResponseTemplate
makes it possible to define additional response templates specific to the API.&lt;/p&gt;

&lt;h2 id=&#34;func-routing:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Routing&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Routing(routes ...*design.RouteDefinition)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Routing lists the action route. Each route is defined with a function named after the HTTP method.
The route function takes the path as argument. Route paths may use wildcards as described in the
&lt;a href=&#34;a href=&amp;quot;https://godoc.org/github.com/julienschmidt/httprouter&amp;quot;&amp;gt;https://godoc.org/github.com/julienschmidt/httprouter&amp;lt;/a&#34;&gt;httprouter&lt;/a&gt; package documentation. These
wildcards define parameters using the &lt;code&gt;:name&lt;/code&gt; or &lt;code&gt;*name&lt;/code&gt; syntax where &lt;code&gt;:name&lt;/code&gt; matches a path
segment and &lt;code&gt;*name&lt;/code&gt; is a catch-all that matches the path until the end.&lt;/p&gt;

&lt;h2 id=&#34;func-scheme:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Scheme&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Scheme(vals ...string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scheme sets the API URL schemes.&lt;/p&gt;

&lt;h2 id=&#34;func-status:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Status&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Status(status int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Status sets the Response status.&lt;/p&gt;

&lt;h2 id=&#34;func-trace:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func TRACE&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TRACE(path string) *design.RouteDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TRACE creates a route using the TRACE HTTP method.&lt;/p&gt;

&lt;h2 id=&#34;func-termsofservice:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func TermsOfService&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TermsOfService(terms string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TermsOfService describes the API terms of services or links to them.&lt;/p&gt;

&lt;h2 id=&#34;func-title:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Title&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Title(val string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Title sets the API title used by generated documentation, JSON Hyper-schema, code comments etc.&lt;/p&gt;

&lt;h2 id=&#34;func-trait:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Trait&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Trait(name string, val ...func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trait defines an API trait. A trait encapsulates arbitrary DSL that gets executed wherever the
trait is called via the UseTrait function.&lt;/p&gt;

&lt;h2 id=&#34;func-type:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Type&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Type(name string, dsl func()) *design.UserTypeDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Type implements the type definition dsl. A type definition describes a data structure consisting
of attributes. Each attribute has a type which can also refer to a type definition (or use a
primitive type or nested attibutes). The dsl syntax for define a type definition is the
Attribute dsl, see Attribute.&lt;/p&gt;

&lt;p&gt;On top of specifying any attribute type, type definitions can also be used to describe the data
structure of a request payload. They can also be used by media type definitions as reference, see
Reference. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Type(&amp;quot;createPayload&amp;quot;, func() {
    Description(&amp;quot;Type of create and upload action payloads&amp;quot;)
    APIVersion(&amp;quot;1.0&amp;quot;)
    Attribute(&amp;quot;name&amp;quot;, String, &amp;quot;name of bottle&amp;quot;)
    Attribute(&amp;quot;origin&amp;quot;, Origin, &amp;quot;Details on wine origin&amp;quot;)  // See Origin definition below
    Required(&amp;quot;name&amp;quot;)
})

var Origin = Type(&amp;quot;origin&amp;quot;, func() {
    Description(&amp;quot;Origin of bottle&amp;quot;)
    Attribute(&amp;quot;Country&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function returns the newly defined type so the value can be used throughout the dsl.&lt;/p&gt;

&lt;h2 id=&#34;func-typename:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func TypeName&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TypeName(name string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TypeName makes it possible to set the Go struct name for a type or media type in the generated
code. By default goagen uses the name (type) or identifier (media type) given in the dsl and
computes a valid Go identifier from it. This function makes it possible to override that and
provide a custom name. name must be a valid Go identifier.&lt;/p&gt;

&lt;h2 id=&#34;func-url:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func URL&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func URL(url string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;URL sets the contact or license URL.&lt;/p&gt;

&lt;h2 id=&#34;func-usetrait:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func UseTrait&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func UseTrait(name string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UseTrait executes the API trait with the given name. UseTrait can be used inside a Resource,
Action or Attribute DSL.&lt;/p&gt;

&lt;h2 id=&#34;func-version:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func Version&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Version(ver string, dsl func()) *design.APIVersionDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Version is the top level design language function which defines the API global property values
for a given version. The DSL used to define the property values is identical to the one used by
the API function.&lt;/p&gt;

&lt;h2 id=&#34;func-view:aab4f9d6f98ed71f45bd470427dde2a7&#34;&gt;func View&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func View(name string, dsl ...func())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View adds a new view to a media type. A view has a name and lists attributes that are
rendered when the view is used to produce a response. The attribute names must appear in the
media type definition. If an attribute is itself a media type then the view may specify which
view to use when rendering the attribute using the View function in the View dsl. If not
specified then the view named &amp;ldquo;default&amp;rdquo; is used. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;View(&amp;quot;default&amp;quot;, func() {
    Attribute(&amp;quot;id&amp;quot;)     // &amp;quot;id&amp;quot; and &amp;quot;name&amp;quot; must be media type attributes
    Attribute(&amp;quot;name&amp;quot;)
})

View(&amp;quot;extended&amp;quot;, func() {
    Attribute(&amp;quot;id&amp;quot;)
    Attribute(&amp;quot;name&amp;quot;)
    Attribute(&amp;quot;origin&amp;quot;, func() {
        View(&amp;quot;extended&amp;quot;)    // Use view &amp;quot;extended&amp;quot; to render attribute &amp;quot;origin&amp;quot;
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>goa/design/apidsl/test</title>
      <link>http://goa.design/godoc/goa/design/apidsl/test/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/goa/design/apidsl/test/test/</guid>
      <description>

&lt;h1 id=&#34;test:b128b7694e4de962e0088bcb1bcb254f&#34;&gt;test&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/goa/design/apidsl/test&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package test contains a self-contained DSL test.
This test must be in its own package to emulate the proper order of global
variables and package initialization.
This file is needed for &lt;code&gt;go get ./...&lt;/code&gt; and thus the build to succeed.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>