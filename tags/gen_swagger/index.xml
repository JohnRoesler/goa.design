<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gen_swagger on goa</title>
    <link>http://goa.design/tags/gen_swagger/</link>
    <description>Recent content in Gen_swagger on goa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://goa.design/tags/gen_swagger/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>goa/goagen/gen_swagger</title>
      <link>http://goa.design/godoc/goa/goagen/gen_swagger/gen_swagger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/goa/goagen/gen_swagger/gen_swagger/</guid>
      <description>

&lt;h1 id=&#34;genswagger:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;genswagger&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/goa/goagen/gen_swagger&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package genswagger provides a generator for the JSON swagger controller.
The swagger controller responds to GET /swagger requests with the API JSON Hyper-swagger.
This JSON swagger can be used to generate API documentation, ruby and Go API clients.
See the blog post (&lt;a href=&#34;https://blog.heroku.com/archives/2014/1/8/json_swagger_for_heroku_platform_api&#34;&gt;https://blog.heroku.com/archives/2014/1/8/json_swagger_for_heroku_platform_api&lt;/a&gt;)
describing how Heroku leverages the JSON Hyper-swagger standard (&lt;a href=&#34;http://json-swagger.org/latest/json-swagger-hypermedia.html&#34;&gt;http://json-swagger.org/latest/json-swagger-hypermedia.html&lt;/a&gt;)
for more information.&lt;/p&gt;

&lt;h2 id=&#34;func-generate:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;func Generate&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Generate(api *design.APIDefinition) (files []string, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate is the generator entry point called by the meta generator.&lt;/p&gt;

&lt;h2 id=&#34;type-command:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Command&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Command struct {
    *codegen.BaseCommand
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Command is the goa application code generator command line data structure.
It implements meta.Command.&lt;/p&gt;

&lt;h3 id=&#34;func-newcommand:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;func NewCommand&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewCommand() *Command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewCommand instantiates a new command.&lt;/p&gt;

&lt;h3 id=&#34;func-command-run:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;func (*Command) Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *Command) Run() ([]string, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run simply calls the meta generator.&lt;/p&gt;

&lt;h2 id=&#34;type-externaldocs:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type ExternalDocs&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ExternalDocs struct {
    // Description is a short description of the target documentation.
    // GFM syntax can be used for rich text representation.
    Description string `json:&amp;quot;description,omitempty&amp;quot;`
    // URL for the target documentation.
    URL string `json:&amp;quot;url&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ExternalDocs allows referencing an external resource for extended documentation.&lt;/p&gt;

&lt;h2 id=&#34;type-generator:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Generator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Generator struct{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generator is the swagger code generator.&lt;/p&gt;

&lt;h3 id=&#34;func-generator-generate:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;func (*Generator) Generate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (g *Generator) Generate(api *design.APIDefinition) (_ []string, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate produces the skeleton main.&lt;/p&gt;

&lt;h2 id=&#34;type-header:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Header&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Header struct {
    // Description is`a brief description of the parameter.
    // GFM syntax can be used for rich text representation.
    Description string `json:&amp;quot;description,omitempty&amp;quot;`
    //  Type of the header. it is limited to simple types (that is, not an object).
    Type string `json:&amp;quot;type,omitempty&amp;quot;`
    // Format is the extending format for the previously mentioned type.
    Format string `json:&amp;quot;format,omitempty&amp;quot;`
    // Items describes the type of items in the array if type is &amp;quot;array&amp;quot;.
    Items *Items `json:&amp;quot;items,omitempty&amp;quot;`
    // CollectionFormat determines the format of the array if type array is used.
    // Possible values are csv, ssv, tsv, pipes and multi.
    CollectionFormat string `json:&amp;quot;collectionFormat,omitempty&amp;quot;`
    // Default declares the value of the parameter that the server will use if none is
    // provided, for example a &amp;quot;count&amp;quot; to control the number of results per page might
    // default to 100 if not supplied by the client in the request.
    Default          interface{}   `json:&amp;quot;default,omitempty&amp;quot;`
    Maximum          float64       `json:&amp;quot;maximum,omitempty&amp;quot;`
    ExclusiveMaximum bool          `json:&amp;quot;exclusiveMaximum,omitempty&amp;quot;`
    Minimum          float64       `json:&amp;quot;minimum,omitempty&amp;quot;`
    ExclusiveMinimum bool          `json:&amp;quot;exclusiveMinimum,omitempty&amp;quot;`
    MaxLength        int           `json:&amp;quot;maxLength,omitempty&amp;quot;`
    MinLength        int           `json:&amp;quot;minLength,omitempty&amp;quot;`
    Pattern          string        `json:&amp;quot;pattern,omitempty&amp;quot;`
    MaxItems         int           `json:&amp;quot;maxItems,omitempty&amp;quot;`
    MinItems         int           `json:&amp;quot;minItems,omitempty&amp;quot;`
    UniqueItems      bool          `json:&amp;quot;uniqueItems,omitempty&amp;quot;`
    Enum             []interface{} `json:&amp;quot;enum,omitempty&amp;quot;`
    MultipleOf       float64       `json:&amp;quot;multipleOf,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Header represents a header parameter.&lt;/p&gt;

&lt;h2 id=&#34;type-info:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Info&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Info struct {
    Title          string                    `json:&amp;quot;title,omitempty&amp;quot;`
    Description    string                    `json:&amp;quot;description,omitempty&amp;quot;`
    TermsOfService string                    `json:&amp;quot;termsOfService,omitempty&amp;quot;`
    Contact        *design.ContactDefinition `json:&amp;quot;contact,omitempty&amp;quot;`
    License        *design.LicenseDefinition `json:&amp;quot;license,omitempty&amp;quot;`
    Version        string                    `json:&amp;quot;version&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Info provides metadata about the API. The metadata can be used by the clients if needed,
and can be presented in the Swagger-UI for convenience.&lt;/p&gt;

&lt;h2 id=&#34;type-items:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Items&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Items struct {
    //  Type of the items. it is limited to simple types (that is, not an object).
    Type string `json:&amp;quot;type,omitempty&amp;quot;`
    // Format is the extending format for the previously mentioned type.
    Format string `json:&amp;quot;format,omitempty&amp;quot;`
    // Items describes the type of items in the array if type is &amp;quot;array&amp;quot;.
    Items *Items `json:&amp;quot;items,omitempty&amp;quot;`
    // CollectionFormat determines the format of the array if type array is used.
    // Possible values are csv, ssv, tsv, pipes and multi.
    CollectionFormat string `json:&amp;quot;collectionFormat,omitempty&amp;quot;`
    // Default declares the value of the parameter that the server will use if none is
    // provided, for example a &amp;quot;count&amp;quot; to control the number of results per page might
    // default to 100 if not supplied by the client in the request.
    Default          interface{}   `json:&amp;quot;default,omitempty&amp;quot;`
    Maximum          float64       `json:&amp;quot;maximum,omitempty&amp;quot;`
    ExclusiveMaximum bool          `json:&amp;quot;exclusiveMaximum,omitempty&amp;quot;`
    Minimum          float64       `json:&amp;quot;minimum,omitempty&amp;quot;`
    ExclusiveMinimum bool          `json:&amp;quot;exclusiveMinimum,omitempty&amp;quot;`
    MaxLength        int           `json:&amp;quot;maxLength,omitempty&amp;quot;`
    MinLength        int           `json:&amp;quot;minLength,omitempty&amp;quot;`
    Pattern          string        `json:&amp;quot;pattern,omitempty&amp;quot;`
    MaxItems         int           `json:&amp;quot;maxItems,omitempty&amp;quot;`
    MinItems         int           `json:&amp;quot;minItems,omitempty&amp;quot;`
    UniqueItems      bool          `json:&amp;quot;uniqueItems,omitempty&amp;quot;`
    Enum             []interface{} `json:&amp;quot;enum,omitempty&amp;quot;`
    MultipleOf       float64       `json:&amp;quot;multipleOf,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Items is a limited subset of JSON-Schema&amp;rsquo;s items object. It is used by parameter
definitions that are not located in &amp;ldquo;body&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;type-operation:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Operation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Operation struct {
    // Tags is a list of tags for API documentation control. Tags can be used for
    // logical grouping of operations by resources or any other qualifier.
    Tags []string `json:&amp;quot;tags,omitempty&amp;quot;`
    // Summary is a short summary of what the operation does. For maximum readability
    // in the swagger-ui, this field should be less than 120 characters.
    Summary string `json:&amp;quot;summary,omitempty&amp;quot;`
    // Description is a verbose explanation of the operation behavior.
    // GFM syntax can be used for rich text representation.
    Description string `json:&amp;quot;description,omitempty&amp;quot;`
    // ExternalDocs points to additional external documentation for this operation.
    ExternalDocs *ExternalDocs `json:&amp;quot;externalDocs,omitempty&amp;quot;`
    // OperationID is a unique string used to identify the operation.
    OperationID string `json:&amp;quot;operationId,omitempty&amp;quot;`
    // Consumes is a list of MIME types the operation can consume.
    Consumes []string `json:&amp;quot;consumes,omitempty&amp;quot;`
    // Produces is a list of MIME types the operation can produce.
    Produces []string `json:&amp;quot;produces,omitempty&amp;quot;`
    // Parameters is a list of parameters that are applicable for this operation.
    Parameters []*Parameter `json:&amp;quot;parameters,omitempty&amp;quot;`
    // Responses is the list of possible responses as they are returned from executing
    // this operation.
    Responses map[string]*Response `json:&amp;quot;responses,omitempty&amp;quot;`
    // Schemes is the transfer protocol for the operation.
    Schemes []string `json:&amp;quot;schemes,omitempty&amp;quot;`
    // Deprecated declares this operation to be deprecated.
    Deprecated bool `json:&amp;quot;deprecated,omitempty&amp;quot;`
    // Secury is a declaration of which security schemes are applied for this operation.
    Security []map[string][]string `json:&amp;quot;security,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Operation describes a single API operation on a path.&lt;/p&gt;

&lt;h2 id=&#34;type-parameter:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Parameter&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Parameter struct {
    // Name of the parameter. Parameter names are case sensitive.
    Name string `json:&amp;quot;name&amp;quot;`
    // In is the location of the parameter.
    // Possible values are &amp;quot;query&amp;quot;, &amp;quot;header&amp;quot;, &amp;quot;path&amp;quot;, &amp;quot;formData&amp;quot; or &amp;quot;body&amp;quot;.
    In string `json:&amp;quot;in&amp;quot;`
    // Description is`a brief description of the parameter.
    // GFM syntax can be used for rich text representation.
    Description string `json:&amp;quot;description,omitempty&amp;quot;`
    // Required determines whether this parameter is mandatory.
    Required bool `json:&amp;quot;required&amp;quot;`

    Schema *genschema.JSONSchema `json:&amp;quot;schema,omitempty&amp;quot;`

    //  Type of the parameter. Since the parameter is not located at the request body,
    // it is limited to simple types (that is, not an object).
    Type string `json:&amp;quot;type,omitempty&amp;quot;`
    // Format is the extending format for the previously mentioned type.
    Format string `json:&amp;quot;format,omitempty&amp;quot;`
    // AllowEmptyValue sets the ability to pass empty-valued parameters.
    // This is valid only for either query or formData parameters and allows you to
    // send a parameter with a name only or an empty value. Default value is false.
    AllowEmptyValue bool `json:&amp;quot;allowEmptyValue,omitempty&amp;quot;`
    // Items describes the type of items in the array if type is &amp;quot;array&amp;quot;.
    Items *Items `json:&amp;quot;items,omitempty&amp;quot;`
    // CollectionFormat determines the format of the array if type array is used.
    // Possible values are csv, ssv, tsv, pipes and multi.
    CollectionFormat string `json:&amp;quot;collectionFormat,omitempty&amp;quot;`
    // Default declares the value of the parameter that the server will use if none is
    // provided, for example a &amp;quot;count&amp;quot; to control the number of results per page might
    // default to 100 if not supplied by the client in the request.
    Default          interface{}   `json:&amp;quot;default,omitempty&amp;quot;`
    Maximum          float64       `json:&amp;quot;maximum,omitempty&amp;quot;`
    ExclusiveMaximum bool          `json:&amp;quot;exclusiveMaximum,omitempty&amp;quot;`
    Minimum          float64       `json:&amp;quot;minimum,omitempty&amp;quot;`
    ExclusiveMinimum bool          `json:&amp;quot;exclusiveMinimum,omitempty&amp;quot;`
    MaxLength        int           `json:&amp;quot;maxLength,omitempty&amp;quot;`
    MinLength        int           `json:&amp;quot;minLength,omitempty&amp;quot;`
    Pattern          string        `json:&amp;quot;pattern,omitempty&amp;quot;`
    MaxItems         int           `json:&amp;quot;maxItems,omitempty&amp;quot;`
    MinItems         int           `json:&amp;quot;minItems,omitempty&amp;quot;`
    UniqueItems      bool          `json:&amp;quot;uniqueItems,omitempty&amp;quot;`
    Enum             []interface{} `json:&amp;quot;enum,omitempty&amp;quot;`
    MultipleOf       float64       `json:&amp;quot;multipleOf,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parameter describes a single operation parameter.&lt;/p&gt;

&lt;h2 id=&#34;type-path:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Path&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Path struct {
    // Ref allows for an external definition of this path item.
    Ref string `json:&amp;quot;$ref,omitempty&amp;quot;`
    // Get defines a GET operation on this path.
    Get *Operation `json:&amp;quot;get,omitempty&amp;quot;`
    // Put defines a PUT operation on this path.
    Put *Operation `json:&amp;quot;put,omitempty&amp;quot;`
    // Post defines a POST operation on this path.
    Post *Operation `json:&amp;quot;post,omitempty&amp;quot;`
    // Delete defines a DELETE operation on this path.
    Delete *Operation `json:&amp;quot;delete,omitempty&amp;quot;`
    // Options defines a OPTIONS operation on this path.
    Options *Operation `json:&amp;quot;options,omitempty&amp;quot;`
    // Head defines a HEAD operation on this path.
    Head *Operation `json:&amp;quot;head,omitempty&amp;quot;`
    // Patch defines a PATCH operation on this path.
    Patch *Operation `json:&amp;quot;patch,omitempty&amp;quot;`
    // Parameters is the list of parameters that are applicable for all the operations
    // described under this path.
    Parameters []*Parameter `json:&amp;quot;parameters,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Path holds the relative paths to the individual endpoints.&lt;/p&gt;

&lt;h2 id=&#34;type-response:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Response&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Response struct {
    // Description of the response. GFM syntax can be used for rich text representation.
    Description string `json:&amp;quot;description,omitempty&amp;quot;`
    // Schema is a definition of the response structure. It can be a primitive,
    // an array or an object. If this field does not exist, it means no content is
    // returned as part of the response. As an extension to the Schema Object, its root
    // type value may also be &amp;quot;file&amp;quot;.
    Schema *genschema.JSONSchema `json:&amp;quot;schema,omitempty&amp;quot;`
    // Headers is a list of headers that are sent with the response.
    Headers map[string]*Header `json:&amp;quot;headers,omitempty&amp;quot;`
    // Ref references a global API response.
    // This field is exclusive with the other fields of Response.
    Ref string `json:&amp;quot;$ref,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Response describes an operation response.&lt;/p&gt;

&lt;h2 id=&#34;type-scope:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Scope&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Scope struct {
    // Description for scope
    Description string `json:&amp;quot;description,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scope corresponds to an available scope for an OAuth2 security scheme.&lt;/p&gt;

&lt;h2 id=&#34;type-securitydefinition:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type SecurityDefinition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type SecurityDefinition struct {
    // Type of the security scheme. Valid values are &amp;quot;basic&amp;quot;, &amp;quot;apiKey&amp;quot; or &amp;quot;oauth2&amp;quot;.
    Type string `json:&amp;quot;type&amp;quot;`
    // Description for security scheme
    Description string `json:&amp;quot;description,omitempty&amp;quot;`
    // Name of the header or query parameter to be used when type is &amp;quot;apiKey&amp;quot;.
    Name string `json:&amp;quot;name,omitempty&amp;quot;`
    // In is the location of the API key when type is &amp;quot;apiKey&amp;quot;.
    // Valid values are &amp;quot;query&amp;quot; or &amp;quot;header&amp;quot;.
    In string `json:&amp;quot;in&amp;quot;`
    // Flow is the flow used by the OAuth2 security scheme when type is &amp;quot;oauth2&amp;quot;
    // Valid values are &amp;quot;implicit&amp;quot;, &amp;quot;password&amp;quot;, &amp;quot;application&amp;quot; or &amp;quot;accessCode&amp;quot;.
    Flow string `json:&amp;quot;flow,omitempty&amp;quot;`
    // The oauth2 authorization URL to be used for this flow.
    AuthorizationURL string `json:&amp;quot;authorizationUrl,omitempty&amp;quot;`
    // TokenURL  is the token URL to be used for this flow.
    TokenURL string `json:&amp;quot;tokenUrl,omitempty&amp;quot;`
    // Scopes list the  available scopes for the OAuth2 security scheme.
    Scopes map[string]*Scope `json:&amp;quot;scopes,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SecurityDefinition allows the definition of a security scheme that can be used by the
operations. Supported schemes are basic authentication, an API key (either as a header or
as a query parameter) and OAuth2&amp;rsquo;s common flows (implicit, password, application and
access code).&lt;/p&gt;

&lt;h2 id=&#34;type-swagger:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Swagger&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Swagger struct {
    Swagger             string                           `json:&amp;quot;swagger,omitempty&amp;quot;`
    Info                *Info                            `json:&amp;quot;info,omitempty&amp;quot;`
    Host                string                           `json:&amp;quot;host,omitempty&amp;quot;`
    BasePath            string                           `json:&amp;quot;basePath,omitempty&amp;quot;`
    Schemes             []string                         `json:&amp;quot;schemes,omitempty&amp;quot;`
    Consumes            []string                         `json:&amp;quot;consumes,omitempty&amp;quot;`
    Produces            []string                         `json:&amp;quot;produces,omitempty&amp;quot;`
    Paths               map[string]*Path                 `json:&amp;quot;paths&amp;quot;`
    Definitions         map[string]*genschema.JSONSchema `json:&amp;quot;definitions,omitempty&amp;quot;`
    Parameters          map[string]*Parameter            `json:&amp;quot;parameters,omitempty&amp;quot;`
    Responses           map[string]*Response             `json:&amp;quot;responses,omitempty&amp;quot;`
    SecurityDefinitions map[string]*SecurityDefinition   `json:&amp;quot;securityDefinitions,omitempty&amp;quot;`
    Security            []map[string][]string            `json:&amp;quot;security,omitempty&amp;quot;`
    Tags                []*Tag                           `json:&amp;quot;tags,omitempty&amp;quot;`
    ExternalDocs        *ExternalDocs                    `json:&amp;quot;externalDocs,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swagger represents an instance of a swagger object.
See &lt;a href=&#34;https://swagger.io/specification/&#34;&gt;https://swagger.io/specification/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;func-new:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;func New&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func New(api *design.APIDefinition) (*Swagger, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;New creates a Swagger spec from an API definition.&lt;/p&gt;

&lt;h2 id=&#34;type-tag:ec8101dbc3aa1048ccfd6a8d88fc6425&#34;&gt;type Tag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Tag struct {
    // Name of the tag.
    Name string `json:&amp;quot;name,omitempty&amp;quot;`
    // Description is a short description of the tag.
    // GFM syntax can be used for rich text representation.
    Description string `json:&amp;quot;description,omitempty&amp;quot;`
    // ExternalDocs is additional external documentation for this tag.
    ExternalDocs *ExternalDocs `json:&amp;quot;externalDocs,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tag allows adding meta data to a single tag that is used by the Operation Object. It is
not mandatory to have a Tag Object per tag used there.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>