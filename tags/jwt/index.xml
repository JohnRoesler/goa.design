<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jwt on goa</title>
    <link>http://goa.design/tags/jwt/</link>
    <description>Recent content in Jwt on goa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://goa.design/tags/jwt/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>middleware/jwt</title>
      <link>http://goa.design/godoc/middleware/jwt/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/middleware/jwt/</guid>
      <description>

&lt;h1 id=&#34;jwt:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;jwt&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/middleware/jwt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package jwt makes it possible to authorize API requests using JSON Web Tokens,
see &lt;a href=&#34;https://jwt.io/introduction/&#34;&gt;https://jwt.io/introduction/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;middleware:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;Middleware&lt;/h3&gt;

&lt;p&gt;The package provides a middleware that can be mounted on controllers that require authentication.
The JWT middleware is instantiated using the package Middleware function. This function accepts
a specification that describes the various properties used by the JWT signature and validation
algorithms.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spec := &amp;amp;jwt.Specification{
    AllowParam:       false,      // Pass tokens in headers only
    AuthOptions:      false,      // Do not authorize OPTIONS requests
    TTLMinutes:       1440,       // Tokens are valid for 24 hours
    Issuer:           &amp;quot;me.com&amp;quot;,   // me.com issued the token
    KeySigningMethod: jwt.RSA256, // Use the RSA256 hashing algorithm to sign tokens
    SigningKeyFunc:   privateKey, // privateKey returns the key used to sign tokens
    ValidationFunc:   pubKey,     // pubKey returns the key used to validate tokens
}
authorizedController.Use(jwt.Middleware(spec))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;token-manager:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;Token Manager&lt;/h3&gt;

&lt;p&gt;The package also exposes a token manager that creates the JWT tokens. The manager is instantiated
using the same specification used to create the middleware:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var tm *jwt.TokenManager = jwt.NewTokenManager(spec)

func Login(ctx *goa.Context) error {
    // ...
    // Authorize request using ctx, initialize tenant id if necessary etc.
    // ...
    claims := map[string]interface{}{
        &amp;quot;accountID&amp;quot;: accountID,
    }
    token, err := tm.Create(claims)
    if err != nil {
        return err
    }
    return ctx.Respond(200, token) // You&#39;ll probably need something different here
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;constants:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;Constants&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const JWTHeader = &amp;quot;Authorization&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JWTHeader is the name of the header used to transmit the JWT token.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const JWTKey middlewareKey = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JWTKey is the JWT middleware key used to store the token in the context.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const TokenManagerKey middlewareKey = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TokenManagerKey is the JWT middleware key used to store the token manager in the context.&lt;/p&gt;

&lt;h2 id=&#34;func-gettoken:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;func GetToken&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func GetToken(ctx *goa.Context, spec *Specification) (token *jwt.Token, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GetToken extracts the JWT token from the request if there is one.&lt;/p&gt;

&lt;h2 id=&#34;func-middleware:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;func Middleware&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Middleware(spec *Specification) goa.Middleware
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Middleware is a middleware that retrieves a JWT token from the request if present and
injects it into the context.  It checks for the token in the HTTP Headers first, then the querystring if
the specification &amp;ldquo;AllowParam&amp;rdquo; is true.
Retrieve it using ctx.Value(JWTKey).&lt;/p&gt;

&lt;h2 id=&#34;type-keyfunc:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;type KeyFunc&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type KeyFunc func() (interface{}, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;KeyFunc is a function that returns the key to sign a
token.  It should return a []byte (for all)
or a *rsa.PrivateKey or *ecdsa.PrivateKey&lt;/p&gt;

&lt;h2 id=&#34;type-signingmethod:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;type SigningMethod&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type SigningMethod int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SigningMethod is the enum that lists the supported token signature hashing algorithms.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (

    // RSA256 signing algorithm
    RSA256 SigningMethod = iota + 1
    // RSA384 signing algorithm
    RSA384
    // RSA512 signing algorithm
    RSA512
    // HMAC256 signing algorithm
    HMAC256
    // HMAC384 signing algorithm
    HMAC384
    // HMAC512 signing algorithm
    HMAC512
    // ECDSA256 signing algorithm
    ECDSA256
    // ECDSA384 signing algorithm
    ECDSA384
    // ECDSA512 signing algorithm
    ECDSA512
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;type-specification:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;type Specification&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Specification struct {
    // TokenHeader is the HTTP header to search for the JWT Token
    // Defaults to &amp;quot;Authorization&amp;quot;
    TokenHeader string
    // TokenParam is the request parameter to parse for the JWT Token
    // Defaults to &amp;quot;token&amp;quot;
    TokenParam string
    // AllowParam is a flag that determines whether it is allowable
    // to parse tokens from the querystring
    // Defaults to false
    AllowParam bool
    // ValidationFunc is a function that returns the key to validate the JWT
    // Required, no default
    ValidationFunc ValidationKeyfunc
    // AuthOptions is a flag that determines whether a token is required on OPTIONS
    // requests
    AuthOptions bool
    // TTLMinutes is the TTL for tokens that are generated
    TTLMinutes int
    // RefreshTTLMinutes is the TTL for refresh tokens that are generated
    // and should generally be much longer than TTLMinutes
    RefreshTTLMinutes int
    // Issuer is the name of the issuer that will be inserted into the
    // generated token&#39;s claims
    Issuer string
    // KeySigningMethod determines the type of key that will be used to sign
    // Tokens.
    KeySigningMethod SigningMethod
    // SigningKeyFunc is a function that returns the key used to sign the token
    SigningKeyFunc KeyFunc
    // CommonClaims is a list of claims added to all tokens issued
    CommonClaims map[string]interface{}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specification describes the JWT authorization properties.
It is used to both instantiate a middleware and a token manager.
The middleware uses the specification properties to authorize the incoming
request while the token manager uses it to create authorization tokens.&lt;/p&gt;

&lt;h2 id=&#34;type-tokenmanager:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;type TokenManager&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type TokenManager struct {
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TokenManager provides for the creation of access and refresh JWT Tokens&lt;/p&gt;

&lt;h3 id=&#34;func-newtokenmanager:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;func NewTokenManager&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewTokenManager(spec *Specification) *TokenManager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewTokenManager returns a TokenManager.  If TTLMinutes isn&amp;rsquo;t specified
it will default to 5 minutes.  Use the same Specification as you use for
Middleware() to ensure your tokens are compatible.&lt;/p&gt;

&lt;h3 id=&#34;func-tokenmanager-create:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;func (*TokenManager) Create&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (tm *TokenManager) Create(claims map[string]interface{}) (string, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create makes a new token, adding the claims provided.  It returns
a token as a string.&lt;/p&gt;

&lt;h2 id=&#34;type-validationkeyfunc:ae11cf93ad8cc7f6c98c318fecc45c8d&#34;&gt;type ValidationKeyfunc&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ValidationKeyfunc func(*jwt.Token) (interface{}, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ValidationKeyfunc is a function that takes a token and returns the key to validate that
token, which allows it to use inforamtion from the key itself to choose the key
to return.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>http://goa.design/middleware/jwt/</link>
      <pubDate>Sat, 30 Jan 2016 11:01:06 -0500</pubDate>
      
      <guid>http://goa.design/middleware/jwt/</guid>
      <description>&lt;p&gt;Getting Started Guide Here
JWT&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>