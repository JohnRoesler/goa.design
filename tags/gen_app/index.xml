<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gen_app on goa</title>
    <link>http://goa.design/tags/gen_app/</link>
    <description>Recent content in Gen_app on goa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://goa.design/tags/gen_app/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>goa/goagen/gen_app</title>
      <link>http://goa.design/godoc/goa/goagen/gen_app/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://goa.design/godoc/goa/goagen/gen_app/</guid>
      <description>

&lt;h1 id=&#34;genapp:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;genapp&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/goadesign/goa/goagen/gen_app&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;Variables&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (
    // TargetPackage is the name of the generated Go package.
    TargetPackage string
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var WildcardRegex = regexp.MustCompile(&amp;quot;(?:[^/]*/:([^/]+))+&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WildcardRegex is the regex used to capture path parameters.&lt;/p&gt;

&lt;h2 id=&#34;func-appoutputdir:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func AppOutputDir&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func AppOutputDir() string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AppOutputDir returns the directory containing the generated files.&lt;/p&gt;

&lt;h2 id=&#34;func-apppackagepath:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func AppPackagePath&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func AppPackagePath() (string, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AppPackagePath returns the Go package path to the generated package.&lt;/p&gt;

&lt;h2 id=&#34;func-buildencodermap:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func BuildEncoderMap&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func BuildEncoderMap(info []*design.EncodingDefinition, encoder bool) (map[string]*EncoderTemplateData, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BuildEncoderMap builds the template data needed to render the given encoding definitions.
This extra map is needed to handle the case where a single encoding definition maps to multiple
encoding packages. The data is indexed by encoder Go package path.&lt;/p&gt;

&lt;h2 id=&#34;func-generate:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func Generate&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Generate(api *design.APIDefinition) (files []string, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate is the generator entry point called by the meta generator.&lt;/p&gt;

&lt;h2 id=&#34;func-mergeresponses:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func MergeResponses&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func MergeResponses(l, r map[string]*design.ResponseDefinition) map[string]*design.ResponseDefinition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MergeResponses merge the response maps overriding the first argument map entries with the
second argument map entries in case of collision.&lt;/p&gt;

&lt;h2 id=&#34;type-command:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type Command&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Command struct {
    *codegen.BaseCommand
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Command is the goa application code generator command line data structure.&lt;/p&gt;

&lt;h3 id=&#34;func-newcommand:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func NewCommand&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewCommand() *Command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewCommand instantiates a new command.&lt;/p&gt;

&lt;h3 id=&#34;func-command-registerflags:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*Command) RegisterFlags&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *Command) RegisterFlags(r codegen.FlagRegistry)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RegisterFlags registers the command line flags with the given registry.&lt;/p&gt;

&lt;h3 id=&#34;func-command-run:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*Command) Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *Command) Run() ([]string, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run simply calls the meta generator.&lt;/p&gt;

&lt;h2 id=&#34;type-contexttemplatedata:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type ContextTemplateData&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ContextTemplateData struct {
    Name         string // e.g. &amp;quot;ListBottleContext&amp;quot;
    ResourceName string // e.g. &amp;quot;bottles&amp;quot;
    ActionName   string // e.g. &amp;quot;list&amp;quot;
    Params       *design.AttributeDefinition
    Payload      *design.UserTypeDefinition
    Headers      *design.AttributeDefinition
    Routes       []*design.RouteDefinition
    Responses    map[string]*design.ResponseDefinition
    API          *design.APIDefinition
    Version      *design.APIVersionDefinition
    DefaultPkg   string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ContextTemplateData contains all the information used by the template to render the context
code for an action.&lt;/p&gt;

&lt;h3 id=&#34;func-contexttemplatedata-ispathparam:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*ContextTemplateData) IsPathParam&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *ContextTemplateData) IsPathParam(param string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IsPathParam returns true if the given parameter name corresponds to a path parameter for all
the context action routes. Such parameter is required but does not need to be validated as
httprouter takes care of that.&lt;/p&gt;

&lt;h3 id=&#34;func-contexttemplatedata-mustvalidate:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*ContextTemplateData) MustValidate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *ContextTemplateData) MustValidate(name string) bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MustValidate returns true if code that checks for the presence of the given param must be
generated.&lt;/p&gt;

&lt;h3 id=&#34;func-contexttemplatedata-versioned:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*ContextTemplateData) Versioned&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *ContextTemplateData) Versioned() bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Versioned returns true if the context was built from an API version.&lt;/p&gt;

&lt;h2 id=&#34;type-contextswriter:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type ContextsWriter&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ContextsWriter struct {
    *codegen.SourceFile
    CtxTmpl     *template.Template
    CtxNewTmpl  *template.Template
    CtxRespTmpl *template.Template
    PayloadTmpl *template.Template
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ContextsWriter generate codes for a goa application contexts.&lt;/p&gt;

&lt;h3 id=&#34;func-newcontextswriter:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func NewContextsWriter&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewContextsWriter(filename string) (*ContextsWriter, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewContextsWriter returns a contexts code writer.
Contexts provide the glue between the underlying request data and the user controller.&lt;/p&gt;

&lt;h3 id=&#34;func-contextswriter-execute:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*ContextsWriter) Execute&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (w *ContextsWriter) Execute(data *ContextTemplateData) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute writes the code for the context types to the writer.&lt;/p&gt;

&lt;h2 id=&#34;type-controllertemplatedata:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type ControllerTemplateData&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ControllerTemplateData struct {
    Resource   string                          // Lower case plural resource name, e.g. &amp;quot;bottles&amp;quot;
    Actions    []map[string]interface{}        // Array of actions, each action has keys &amp;quot;Name&amp;quot;, &amp;quot;Routes&amp;quot;, &amp;quot;Context&amp;quot; and &amp;quot;Unmarshal&amp;quot;
    Version    *design.APIVersionDefinition    // Controller API version
    EncoderMap map[string]*EncoderTemplateData // Encoder data indexed by package path
    DecoderMap map[string]*EncoderTemplateData // Decoder data indexed by package path
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ControllerTemplateData contains the information required to generate an action handler.&lt;/p&gt;

&lt;h2 id=&#34;type-controllerswriter:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type ControllersWriter&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ControllersWriter struct {
    *codegen.SourceFile
    CtrlTmpl      *template.Template
    MountTmpl     *template.Template
    UnmarshalTmpl *template.Template
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ControllersWriter generate code for a goa application handlers.
Handlers receive a HTTP request, create the action context, call the action code and send the
resulting HTTP response.&lt;/p&gt;

&lt;h3 id=&#34;func-newcontrollerswriter:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func NewControllersWriter&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewControllersWriter(filename string) (*ControllersWriter, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewControllersWriter returns a handlers code writer.
Handlers provide the glue between the underlying request data and the user controller.&lt;/p&gt;

&lt;h3 id=&#34;func-controllerswriter-execute:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*ControllersWriter) Execute&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (w *ControllersWriter) Execute(data []*ControllerTemplateData) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute writes the handlers GoGenerator&lt;/p&gt;

&lt;h2 id=&#34;type-encodertemplatedata:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type EncoderTemplateData&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type EncoderTemplateData struct {
    // PackagePath is the Go package path to the package implmenting the encoder / decoder.
    PackagePath string
    // PackageName is the name of the Go package implementing the encoder / decoder.
    PackageName string
    // Factory is the name of the package variable implementing the decoder / encoder factory.
    Factory string
    // MIMETypes is the list of supported MIME types.
    MIMETypes []string
    // Default is true if this encoder / decoder should be set as the default.
    Default bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EncoderTemplateData containes the data needed to render the registration code for a single
encoder or decoder package.&lt;/p&gt;

&lt;h2 id=&#34;type-generator:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type Generator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Generator struct {
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generator is the application code generator.&lt;/p&gt;

&lt;h3 id=&#34;func-generator-cleanup:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*Generator) Cleanup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (g *Generator) Cleanup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cleanup removes the entire &amp;ldquo;app&amp;rdquo; directory if it was created by this generator.&lt;/p&gt;

&lt;h3 id=&#34;func-generator-generate:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*Generator) Generate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (g *Generator) Generate(api *design.APIDefinition) (_ []string, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate the application code, implement codegen.Generator.&lt;/p&gt;

&lt;h2 id=&#34;type-mediatypetemplatedata:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type MediaTypeTemplateData&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MediaTypeTemplateData struct {
    MediaType  *design.MediaTypeDefinition
    Versioned  bool
    DefaultPkg string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MediaTypeTemplateData contains all the information used by the template to redner the
media types code.&lt;/p&gt;

&lt;h2 id=&#34;type-mediatypeswriter:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type MediaTypesWriter&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MediaTypesWriter struct {
    *codegen.SourceFile
    MediaTypeTmpl *template.Template
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MediaTypesWriter generate code for a goa application media types.
Media types are data structures used to render the response bodies.&lt;/p&gt;

&lt;h3 id=&#34;func-newmediatypeswriter:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func NewMediaTypesWriter&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewMediaTypesWriter(filename string) (*MediaTypesWriter, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewMediaTypesWriter returns a contexts code writer.
Media types contain the data used to render response bodies.&lt;/p&gt;

&lt;h3 id=&#34;func-mediatypeswriter-execute:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*MediaTypesWriter) Execute&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (w *MediaTypesWriter) Execute(data *MediaTypeTemplateData) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute writes the code for the context types to the writer.&lt;/p&gt;

&lt;h2 id=&#34;type-resourcedata:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type ResourceData&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ResourceData struct {
    Name              string                      // Name of resource
    Identifier        string                      // Identifier of resource media type
    Description       string                      // Description of resource
    Type              *design.MediaTypeDefinition // Type of resource media type
    CanonicalTemplate string                      // CanonicalFormat represents the resource canonical path in the form of a fmt.Sprintf format.
    CanonicalParams   []string                    // CanonicalParams is the list of parameter names that appear in the resource canonical path in order.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResourceData contains the information required to generate the resource GoGenerator&lt;/p&gt;

&lt;h2 id=&#34;type-resourceswriter:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type ResourcesWriter&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ResourcesWriter struct {
    *codegen.SourceFile
    ResourceTmpl *template.Template
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResourcesWriter generate code for a goa application resources.
Resources are data structures initialized by the application handlers and passed to controller
actions.&lt;/p&gt;

&lt;h3 id=&#34;func-newresourceswriter:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func NewResourcesWriter&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewResourcesWriter(filename string) (*ResourcesWriter, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewResourcesWriter returns a contexts code writer.
Resources provide the glue between the underlying request data and the user controller.&lt;/p&gt;

&lt;h3 id=&#34;func-resourceswriter-execute:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*ResourcesWriter) Execute&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (w *ResourcesWriter) Execute(data *ResourceData) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute writes the code for the context types to the writer.&lt;/p&gt;

&lt;h2 id=&#34;type-usertypetemplatedata:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type UserTypeTemplateData&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type UserTypeTemplateData struct {
    UserType   *design.UserTypeDefinition
    Versioned  bool
    DefaultPkg string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UserTypeTemplateData contains all the information used by the template to redner the
media types code.&lt;/p&gt;

&lt;h2 id=&#34;type-usertypeswriter:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;type UserTypesWriter&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type UserTypesWriter struct {
    *codegen.SourceFile
    UserTypeTmpl *template.Template
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UserTypesWriter generate code for a goa application user types.
User types are data structures defined in the DSL with &amp;ldquo;Type&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;func-newusertypeswriter:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func NewUserTypesWriter&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewUserTypesWriter(filename string) (*UserTypesWriter, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NewUserTypesWriter returns a contexts code writer.
User types contain custom data structured defined in the DSL with &amp;ldquo;Type&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;func-usertypeswriter-execute:0950d9b6f1dd6681888b1fb558093be3&#34;&gt;func (*UserTypesWriter) Execute&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (w *UserTypesWriter) Execute(data *UserTypeTemplateData) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute writes the code for the context types to the writer.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Generated by &lt;a href=&#34;http://godoc.org/github.com/davecheney/godoc2md&#34;&gt;godoc2md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>