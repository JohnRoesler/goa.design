[{"title":"about","href":"/about","content":"hello about"},{"title":"Hello Goa!","tags":["generation","go"],"href":"/blog/hello-goa","content":"hello Goa welcome blog post"},{"title":"Goa DSL Engine","tags":["dsl"],"href":"/components/engine","content":" goagen is a tool that generates various artifacts from a goa design package Install it with go get githubcomgoadesigngoagoagen goagen relies on goimports go get golangorgxtoolscmdgoimports Each type of artifact is associated with a goagen command that exposes it own set of flags Internally these commands map to generators that contain the logic for generating the artifacts It works something like this goagen parses the command line to determine the type of output desired and invokes the appropriate generator The generator writes the code of the tool that will produce the final output to a temporary Go workspace The tool composed of the design language package and the output producing code is compiled in the temporary workspace goagen then runs the tool which evaluates the design functions and traverses the resulting inmemory data structures to write the output Each generator registers a command with the goagen tool goagen help lists all the available commands These are app generates the service boilerplate code including controllers contexts media types and user types main generates a skeleton file for each resource controller as well as a default main client generates an API client Go package and tool swagger generates the API Swagger specification js generates a JavaScript API client schema generates the API Hyperschema JSON gen invokes a third party generator bootstrap invokes the app main client and swagger generators The command goagen helplong lists all the supported commands and their flags Common flags The following flags apply to all the goagen commands designdDESIGN defines the Go package path to the service design package outoOUT specifies where to generate the files defaults to the current directory debug enables goagen debug This causes goagen to print the content of the temporary files and to leave them around helphelplonghelpman prints contextual help goagen app The app command is arguably the most critical It generates all the supporting code for the goa service This command supports an additional flag pkgapp specifies the name of the generated Go package defaults to app Thats also the name of the subdirectory that gets created to store the generated Go files This command always deletes and recreates any preexisting directory with the same name The idea being that these files should never be edited goagen main The main command helps bootstrap a new goa service by generating a default maingo as well as a default empty implementation for each resource controller defined in the design package By default this command only generates the files if they dont exist yet in the output directory This command accepts two additional flags force causes the files to be generated even if files with the same name already exist in which case they get overwritten nameAPI specifies the name of the service to be used in the generated call to goaNew goagen client The client command generates both an API client package and tool The client package implements a Client object that exposes one method for each resource action The generated code of the CLI tool leverages the package to make the API requests to the service The Client object can be configured to use request signers that get invoked prior to sending the request The signers modify the request to include auth headers for example goa comes with signers that implement basic auth JWT auth and a subset of OAuth2 Custom signers my be used as well they must implement the Signer interface This command accepts three additional flags version specifies the CLI tool version signer specifies a signer object supported by the API Signer objects generally perform auth signerPkg specifies the path to the package implementing the signer objects if not goa goagen js The js command generates a JavaScript API client suitable for both clientside and serverside applications The generated code defines an anonymous AMD module and relies on the axios promisedbased JavaScript library for making the actual HTTP requests The generated module wraps the axios client and adds API specific functions for example List all bottles in account optionally filtering by year path is the request path the format is cellaraccountsaccountIDbottles years is used to build the request query string config is an optional object to be merged into the config built by the function prior to making the request The content of the config object is described here httpsgithubcommzabriskieaxiosrequestapi This function returns a promise which raises an error if the HTTP response is a 4xx or 5xx clientlistBottle function path years config cfg timeout timeout url urlPrefix path method get params years years responseType json if config cfg utilsmergecfg config return clientcfg The generated client module can be loaded using requirejs requirejsconfig paths axios jsaxiosmin client jsclient requirejsclient function client clientlistBottle cellaraccounts440bottles 317 thenfunction resp All good use resp catchfunction resp Woops request failed or returned 4xx or 5xx The code above assumes that the generated files clientjs and axiosminjs are both served from js The resp value returned to the promise is an object with the following fields data is the response that was provided by the server data status is the HTTP status code from the server response status 200 statusText is the HTTP status message from the server response statusText OK headers the headers that the server responded with headers config is the config that was provided to axios for the request config The generator also produces an example HTML and controller that can be mounted on a goa service to quickly test the JavaScript Simply import the js Go package in your service main and mount the controller The example HTML is served under js so that loading this path in a browser will trigger the generated JavaScript goagen swagger The swagger command generates a Swagger specification of the API The command does not accept additional flags It generates both the Swagger JSON as well as a controller that can be mounted on the goa service to serve it under swaggerjson goagen schema The schema command generates a Herokulike JSON hyperschema representation of the API It generates both the JSON as well as a controller that can be mounted on the goa service to serve it under schemajson The command accepts an additional flag urluURL specifies the base URL used to build the JSON schema ID goagen gen goagen Plugins The gen command makes it possible to invoke goagen plugins This command accepts two flags pkgpathPKGPATH specifies the Go package path to the plugin package pkgnamePKGNAME specifies the Go package name of the plugin package It defaults to the name of the inner most directory in the Go package path A plugin consists of a Go package which exposes a Generate function with the following signature func Generateapi designAPIDefinition string error where api is the API definition computed from the design package On success Generate should return the path to the generated files On error the error message gets displayed to the user and goagen exist with status 1 The Generate method should take advantage of the APIDefinition IterateXXX methods to iterate through the API resources media types and types to guarantee that the order doesnt change between two invokation of the function thereby generating different output even if the design hasnt changed They may also take advantage of Metadata The goa design language allows defining Metadata on a number of definitions API Resource Action Response and Attribute which means Type and MediaType as well since these definitions are attributes A metadata field consists of a keyvalue pair where both are simple strings The generator can use these keyvalue pairs to produce different results see example below Metadata has no effect on the buitin generators The Output directory is available through the codegenOutputDir global variable Package genresnames is an example of a goagen plugin It creates a file namestxt containing the names of the API resources sorted in alphabetical order If a resource has a metadata pair with the key genresnamesname then the plugin uses the metadata value instead Invoke the plugin with goagen gen d pkgpath Source code package genresnames import ioioutil os pathfilepath strings gopkginalecthomaskingpinv2 githubcomgoadesigngoadesign githubcomgoadesigngoagoagencodegen Generate is the function called by goagen to generate the names file func Generateapi designAPIDefinition string error Make sure to parse the common flags so that codegenOutputDir gets properly initialized app kingpinNewResource names Resource name generator codegenRegisterFlagsapp if err appParseosArgs1 err nil panicerr Now iterate through the resources to gather their names names makestring lenapiResources i 0 apiIterateResourcesfuncres designResourceDefinition error if n ok resMetadatagenresnamesname ok namesi n else namesi resName i return nil content stringsJoinnames n Write the output file and return its name outputFile filepathJoincodegenOutputDir namestxt ioutilWriteFileoutputFile bytecontent 0755 return stringoutputFile nil "},{"title":"goagen","tags":["dsl","goagen"],"href":"/components/goagen","content":" goagen is a tool that generates various artifacts from a goa design package Install it with go get githubcomgoadesigngoagoagen goagen relies on goimports go get golangorgxtoolscmdgoimports Each type of artifact is associated with a goagen command that exposes it own set of flags Internally these commands map to generators that contain the logic for generating the artifacts It works something like this goagen parses the command line to determine the type of output desired and invokes the appropriate generator The generator writes the code of the tool that will produce the final output to a temporary Go workspace The tool composed of the design language package and the output producing code is compiled in the temporary workspace goagen then runs the tool which evaluates the design functions and traverses the resulting inmemory data structures to write the output Each generator registers a command with the goagen tool goagen help lists all the available commands These are app generates the service boilerplate code including controllers contexts media types and user types main generates a skeleton file for each resource controller as well as a default main client generates an API client Go package and tool swagger generates the API Swagger specification js generates a JavaScript API client schema generates the API Hyperschema JSON gen invokes a third party generator bootstrap invokes the app main client and swagger generators The command goagen helplong lists all the supported commands and their flags Common flags The following flags apply to all the goagen commands designdDESIGN defines the Go package path to the service design package outoOUT specifies where to generate the files defaults to the current directory debug enables goagen debug This causes goagen to print the content of the temporary files and to leave them around helphelplonghelpman prints contextual help goagen app The app command is arguably the most critical It generates all the supporting code for the goa service This command supports an additional flag pkgapp specifies the name of the generated Go package defaults to app Thats also the name of the subdirectory that gets created to store the generated Go files This command always deletes and recreates any preexisting directory with the same name The idea being that these files should never be edited goagen main The main command helps bootstrap a new goa service by generating a default maingo as well as a default empty implementation for each resource controller defined in the design package By default this command only generates the files if they dont exist yet in the output directory This command accepts two additional flags force causes the files to be generated even if files with the same name already exist in which case they get overwritten nameAPI specifies the name of the service to be used in the generated call to goaNew goagen client The client command generates both an API client package and tool The client package implements a Client object that exposes one method for each resource action The generated code of the CLI tool leverages the package to make the API requests to the service The Client object can be configured to use request signers that get invoked prior to sending the request The signers modify the request to include auth headers for example goa comes with signers that implement basic auth JWT auth and a subset of OAuth2 Custom signers my be used as well they must implement the Signer interface This command accepts three additional flags version specifies the CLI tool version signer specifies a signer object supported by the API Signer objects generally perform auth signerPkg specifies the path to the package implementing the signer objects if not goa goagen js The js command generates a JavaScript API client suitable for both clientside and serverside applications The generated code defines an anonymous AMD module and relies on the axios promisedbased JavaScript library for making the actual HTTP requests The generated module wraps the axios client and adds API specific functions for example List all bottles in account optionally filtering by year path is the request path the format is cellaraccountsaccountIDbottles years is used to build the request query string config is an optional object to be merged into the config built by the function prior to making the request The content of the config object is described here httpsgithubcommzabriskieaxiosrequestapi This function returns a promise which raises an error if the HTTP response is a 4xx or 5xx clientlistBottle function path years config cfg timeout timeout url urlPrefix path method get params years years responseType json if config cfg utilsmergecfg config return clientcfg The generated client module can be loaded using requirejs requirejsconfig paths axios jsaxiosmin client jsclient requirejsclient function client clientlistBottle cellaraccounts440bottles 317 thenfunction resp All good use resp catchfunction resp Woops request failed or returned 4xx or 5xx The code above assumes that the generated files clientjs and axiosminjs are both served from js The resp value returned to the promise is an object with the following fields data is the response that was provided by the server data status is the HTTP status code from the server response status 200 statusText is the HTTP status message from the server response statusText OK headers the headers that the server responded with headers config is the config that was provided to axios for the request config The generator also produces an example HTML and controller that can be mounted on a goa service to quickly test the JavaScript Simply import the js Go package in your service main and mount the controller The example HTML is served under js so that loading this path in a browser will trigger the generated JavaScript goagen swagger The swagger command generates a Swagger specification of the API The command does not accept additional flags It generates both the Swagger JSON as well as a controller that can be mounted on the goa service to serve it under swaggerjson goagen schema The schema command generates a Herokulike JSON hyperschema representation of the API It generates both the JSON as well as a controller that can be mounted on the goa service to serve it under schemajson The command accepts an additional flag urluURL specifies the base URL used to build the JSON schema ID goagen gen goagen Plugins The gen command makes it possible to invoke goagen plugins This command accepts two flags pkgpathPKGPATH specifies the Go package path to the plugin package pkgnamePKGNAME specifies the Go package name of the plugin package It defaults to the name of the inner most directory in the Go package path A plugin consists of a Go package which exposes a Generate function with the following signature func Generateapi designAPIDefinition string error where api is the API definition computed from the design package On success Generate should return the path to the generated files On error the error message gets displayed to the user and goagen exist with status 1 The Generate method should take advantage of the APIDefinition IterateXXX methods to iterate through the API resources media types and types to guarantee that the order doesnt change between two invokation of the function thereby generating different output even if the design hasnt changed They may also take advantage of Metadata The goa design language allows defining Metadata on a number of definitions API Resource Action Response and Attribute which means Type and MediaType as well since these definitions are attributes A metadata field consists of a keyvalue pair where both are simple strings The generator can use these keyvalue pairs to produce different results see example below Metadata has no effect on the buitin generators The Output directory is available through the codegenOutputDir global variable Package genresnames is an example of a goagen plugin It creates a file namestxt containing the names of the API resources sorted in alphabetical order If a resource has a metadata pair with the key genresnamesname then the plugin uses the metadata value instead Invoke the plugin with goagen gen d pkgpath Source code package genresnames import ioioutil os pathfilepath strings gopkginalecthomaskingpinv2 githubcomgoadesigngoadesign githubcomgoadesigngoagoagencodegen Generate is the function called by goagen to generate the names file func Generateapi designAPIDefinition string error Make sure to parse the common flags so that codegenOutputDir gets properly initialized app kingpinNewResource names Resource name generator codegenRegisterFlagsapp if err appParseosArgs1 err nil panicerr Now iterate through the resources to gather their names names makestring lenapiResources i 0 apiIterateResourcesfuncres designResourceDefinition error if n ok resMetadatagenresnamesname ok namesi n else namesi resName i return nil content stringsJoinnames n Write the output file and return its name outputFile filepathJoincodegenOutputDir namestxt ioutilWriteFileoutputFile bytecontent 0755 return stringoutputFile nil "},{"title":"runtime","tags":["dsl"],"href":"/components/runtime","content":" The goa runtime is implemented by the goa package It includes the implementation of the goa action context which provides the means to access the request state and write the response The package also contains a number of data structures and algorithms that provide supporting functionality to the service These include logging error handling versioning support etc goa follows the battery included model for the supporting functionality letting you customize all aspects if the provided default is not sufficient The goa Action Context The action context is a data structure that is provided to all goa controller action implementations as first parameter It leverages the work done at Google around passing contexts across interface boundaries and adds to it by providing additional methods tailored to the goa use case The context exposes methods to access the request state and write the response in a generic way like many other Go web frameworks For example path parameters or querystring values can be accessed using the method Get which returns a string However goa goes one step further and leverages the code generation provided by goagen to define action specific fields that provide access to the same state using typed methods So for example if a path parameter called ID is defined in the design as being of type Integer the corresponding controller action method accepts a context data structure which exposes a field named ID of type int The same goes for the request payload so that accessing the Payload field of an action context returns a data structure that is specific to that action as described in the design This alleviates the need for reflection or otherwise binding the context to a struct The same goes for writing responses while the underlying http ResponseWriter is available to write the response the action context also provides action specific methods for writing the responses described in the design These generated methods take care of writing the correct status code and contenttype header for example They also make it possible to specificy the response payload using custom data structures generated from the media type described in the design As mentioned earlier each controller action context wraps a golang package context This means that deadlines and cancelation signals are available to all action implemetations The builtin Timeout middleware takes advantage of this ability to let services or controllers define a timeout value for all requests Supporting Functionality Service Mux The goa HTTP request mux is in charge of dispatching incoming requests to the correct controller action It implements the ServeMux interface which on top of the usual binding of HTTP method and path to handler also provides support for API versioning The ServeMux interface Handle method associates a request HTTP method and path to a HandleFunc which is a function that accepts a http ResponseWriter and Request as well as a instance of url Values that contain all the path and querystring parameters The interface also exposes a Version method that gives access to version specific muxes This makes it possible to define different controller actions for the same request HTTP method and path but different API versions The actual algorithm used to compute the targeted API version is provided via an instance of SelectVersionFunc goa comes with several implementations of SelectVersionFunc The PathSelectVersionFunc function creates a SelectVersionFunc that extracts the version from the request path The HeaderSelectVersionFunc function creates a SelectVersionFunc that extracts the version from the given HTTP request header The QuerySelectVersionFunc function creates a SelectVersionFunc that extracts the version from the given querystring value The function CombineSelectVersionFunc makes it possible to combine any number of SelectionVersionFunc to produce arbitrarily complex lookup algorithms Middleware goa defines its own type of middleware but also supports raw http middleware The goamiddleware repo contains a number of goa middlewares Logging goa uses structured logging so that logs created at each level contain all the contextual information The root logger is the servicelevel Logger field Loggers are derived from it for each controller and for each action Finally a logger is also created for each request so that log entries created inside a request contain the full context service name controller name action name and unique request ID Error Handling All goa actions return an error Error handlers can be defined at the controller or service level If an action returns a nonnil error then the controller error handler is invoked If the controller does not define a error handler then the servicewide error handler is invoked instead The default goa error handler simply returns a 500 response containing the error details in the body Graceful Shutdown A goa service can be instantiated via NewGraceful in which case the http server is implemented by the graceful package which provides graceful shutdown behavior where upon receving a shutdown signal the service waits until all pending requests are completed before terminating Swapping the Batteries Error Handling The service interface exposes a SetHandler method which allows overriding the default service error handler goa comes with two builtin error handlers The DefaultErrorHandler returns a 400 if the error is an instance of BadRequestError 500 otherwise It also always writes the error message to the response body The TerseErrorHandler behaves identically to the default error handler with the exception that it does not write the error message to the response body for internal errors ie errors that are not instances of BadRequestError Custom error handlers can be easily swapped in they consist of a function that accepts an instance of an action context and of an error Request Mux and Versioning As mentioned above the goa mux supports defining version specific muxes Different versions can be defined in the design using the Version DSL package design import githubcomgoadesigngoadesign githubcomgoadesigngoadesignapidsl var APIcellar func DescriptionA basic example of an API implemented with goa Schemehttp Hostlocalhost8080 var Version10 func TitleThe virtual winecellar v10 API other API level properties var Version20 func TitleThe virtual winecellar v20 API other API level properties var Resourcebottle func BasePathbottles Version10 Version20 other resource properties var Resourcebottle func BasePathbottles Version30 other resource properties When goagen sees that the design defines versions it produces code that leverages the ServeMux interface Version method to mount controllers onto the appropriate version mux func MountBottleV1Controllerservice goaService ctrl v1BottleController Each version defined in the design produces a different package containing the corresponding generated controllers The generated code relies on the ServeMux method exposed by the service to retrieve the toplevel mux The goa default mux implementation relies on the httprouter package to implement the low level dispatch Other low level routers can easily be subsituted by providing an implementation of the ServeMux interface "},{"title":"swagger","tags":["swagger","json"],"href":"/components/swagger","content":"Content of the file goes Here"},{"title":"goa","tags":["godoc"],"href":"/godoc/goa","content":" goa import githubcomgoadesigngoa Package goa provides the runtime support for goa web services See also httpgoadesign package design httpsgodocorggithubcomgoadesigngoadesign package dsl httpsgodocorggithubcomgoadesigngoadesigndsl Code Generation goa service development begins with writing the design of a service The design is described using the goa language implemented by the githubcomgoadesigngoadesigndsl package The goagen tool consumes the metadata produced from executing the design language to generate service specific code that glues the underlying HTTP server with action specific code and data structures The goa package contains supporting functionality for the generated code including basic request and response state management through the Context data structure error handling via the service and controller ErrorHandler field middleware support via the Middleware data structure as well as input and output format validation algorithms Request Context The Context data structure provides access to both the request and response state It implements the golangorgxnetContext interface so that deadlines and cancelation signals may also be implemented with it The request state is accessible through the Get GetMany and Payload methods which return the values of the request parameters query strings and request body Action specific contexts wrap Context and expose properly typed fields corresponding to the request parameters and body data structure descriptions appearing in the design The response state can be accessed through the ResponseStatus ResponseLength and Header methods The Context type implements the httpResponseWriter interface and thus action contexts can be used in places httpResponseWriter can Action contexts provide action specific helper methods that write the responses as described in the design optionally taking an instance of the media type for responses that contain a body Here is an example showing an update action corresponding to following design extract Resourcebottle func DefaultMediaBottle Actionupdate func Paramsfunc ParambottleID Integer PayloadUpdateBottlePayload ResponseOK ResponseNotFound The action signature generated by goagen is type BottleController interface goaController UpdateUpdateBottleContext error where UpdateBottleContext is type UpdateBottleContext struct goaContext BottleID int Payload UpdateBottlePayload and implements func ctx UpdateBottleContext OKresp Bottle error func ctx UpdateBottleContext NotFound error The definitions of the Bottle and UpdateBottlePayload data structures are ommitted for brievity Controllers There is one controller interface generated per resource defined via the design language The interface exposes the controller actions as well as methods to set controller specific middleware and error handlers see below User code must provide data structures that implement these interfaces when mounting a controller onto a service The controller data structure should include an anonymous field of type goaApplicationController which takes care of implementing the middleware and error handler handling Error Handling The controller action methods generated by goagen such as the Update method of the BottleController interface shown above all return an error value The controller or servicewide error handler if no controller specific error handler function is invoked whenever the value returned by a controller action is not nil The handler gets both the request context and the error as argument The default handler implementation returns a response with status code 500 containing the error message in the body A different error handler can be specificied using the SetErrorHandler function on either a controller or service wide goa comes with an alternative error handler the TerseErrorHandler which also returns a response with status 500 but does not write the error message to the body of the response Middleware A goa middleware is a function that takes and returns a Handler A Handler is a the low level function which handles incoming HTTP requests goagen generates the handlers code so each handler creates the action specific context and calls the controller action with it Middleware can be added to a goa service or a specific controller using the Service type Use method goa comes with a few stock middleware that handle common needs such as logging panic recovery or using the RequestID header to trace requests across multiple services Validation The goa design language documented in the dsl package makes it possible to attach validations to data structure definitions One specific type of validation consists of defining the format that a data structure string field must follow Example of formats include email data time hostnames etc The ValidateFormat function provides the implementation for the format validation invoked from the code generated by goagen Package goa standardizes on structured error responses a request that fails because of invalid input or unexpected condition produces a response that contains one or more structured errors Each error object has three keys a id number a title and a message The title for a given id is always the same the intent is to provide a human friendly categorization The message is specific to the error occurrence and provides additional details that often include contextual information name of parameters etc The basic data structure backing errors is TypedError which simply contains the id and message Multiple errors not just TypedError instances can be encapsulated in a MultiError Both TypedError and MultiError implement the error interface the Error methods return valid JSON that can be written directly to a response body The code generated by goagen calls the helper functions exposed in this file when it encounters invalid data wrong type validation errors etc such as InvalidParamTypeError InvalidAttributeTypeError etc These methods take and return an error which is a MultiError that gets built over time The final MultiError object then gets serialized into the response and sent back to the client The response status code is inferred from the type wrapping the error object a BadRequestError produces a 400 status code while any other error produce a 500 This behavior can be overridden by setting a custom ErrorHandler in the application Constants go const ErrInvalidParamType is the error produced by the generated code when a request parameter type does not match the design ErrInvalidParamType iota 1 ErrMissingParam is the error produced by the generated code when a required request parameter is missing ErrMissingParam ErrInvalidAttributeType is the error produced by the generated code when a data structure attribute type does not match the design definition ErrInvalidAttributeType ErrMissingAttribute is the error produced by the generated code when a data structure attribute required by the design definition is missing ErrMissingAttribute ErrInvalidEnumValue is the error produced by the generated code when a values does not match one of the values listed in the attribute definition as being valid ie not part of the enum ErrInvalidEnumValue ErrMissingHeader is the error produced by the generated code when a required header is missing ErrMissingHeader ErrInvalidFormat is the error produced by the generated code when a value does not match the format specified in the attribute definition ErrInvalidFormat ErrInvalidPattern is the error produced by the generated code when a value does not match the regular expression specified in the attribute definition ErrInvalidPattern ErrInvalidRange is the error produced by the generated code when a value is less than the minimum specified in the design definition or more than the maximum ErrInvalidRange ErrInvalidLength is the error produced by the generated code when a value is a slice with less elements than the minimum length specified in the design definition or more elements than the maximum length ErrInvalidLength ErrInvalidVersion is the error rendered by the default mux when a request specifies an invalid version ErrInvalidVersion Variables go var Log is the global logger from which other loggers eg request specific loggers are derived Configure it by setting its handler prior to calling New See httpsgodocorggithubcominconshreveablelog15 Log logLogger RootContext is the root context from which all request contexts are derived Set values in the root context prior to starting the server to make these values available to all request handlers goaRootContext goaRootContextWithValuekey value RootContext contextContext go var InterruptSignals osSignal osSignalsyscallSIGINT osSignalsyscallSIGTERM osSignalsyscallSIGQUIT InterruptSignals is the list of signals that initiate graceful shutdown Note that only SIGINT is supported on Windows so this list should be overridden by the caller when running on that platform func Cancel go func Cancel Cancel sends a cancellation signal to all handlers through the action context see httpsgodocorggolangorgxnetcontext for details on how to handle the signal func DefaultErrorHandler go func DefaultErrorHandlerctx Context e error DefaultErrorHandler returns a 400 response for request validation errors instances of BadRequestError and a 500 response for other errors It writes the error message to the response body in both cases func DefaultMissingVersionHandler go func DefaultMissingVersionHandlerctx Context version string DefaultMissingVersionHandler returns a 400 response with a typed error in the body containing the name of the version that was targeted by the request func Fatal go func Fatalmsg string ctx interface Fatal logs a critical message and exits the process with status code 1 This function is meant to be used by initialization code to prevent the application from even starting up when something is obviously wrong In particular this function should probably not be used when serving requests func InvalidAttributeTypeError go func InvalidAttributeTypeErrorctx string val interface expected string err error error InvalidAttributeTypeError appends a typed error of id ErrIncompatibleType to err and returns it func InvalidEnumValueError go func InvalidEnumValueErrorctx string val interface allowed interface err error error InvalidEnumValueError appends a typed error of id ErrInvalidEnumValue to err and returns it func InvalidFormatError go func InvalidFormatErrorctx target string format Format formatError err error error InvalidFormatError appends a typed error of id ErrInvalidFormat to err and returns it func InvalidLengthError go func InvalidLengthErrorctx string target interface ln value int min bool err error error InvalidLengthError appends a typed error of id ErrInvalidLength to err and returns it func InvalidParamTypeError go func InvalidParamTypeErrorname string val interface expected string err error error InvalidParamTypeError appends a typed error of id ErrInvalidParamType to err and returns it func InvalidPatternError go func InvalidPatternErrorctx target string pattern string err error error InvalidPatternError appends a typed error of id ErrInvalidPattern to err and returns it func InvalidRangeError go func InvalidRangeErrorctx string target interface value int min bool err error error InvalidRangeError appends a typed error of id ErrInvalidRange to err and returns it func MissingAttributeError go func MissingAttributeErrorctx name string err error error MissingAttributeError appends a typed error of id ErrMissingAttribute to err and returns it func MissingHeaderError go func MissingHeaderErrorname string err error error MissingHeaderError appends a typed error of id ErrMissingHeader to err and returns it func MissingParamError go func MissingParamErrorname string err error error MissingParamError appends a typed error of id ErrMissingParam to err and returns it func ReportError go func ReportErrorerr error err2 error error ReportError coerces the first argument into a MultiError then appends the second argument and returns the resulting MultiError func TerseErrorHandler go func TerseErrorHandlerctx Context e error TerseErrorHandler behaves like DefaultErrorHandler except that it does not write to the response body for internal errors func ValidateFormat go func ValidateFormatf Format val string error ValidateFormat validates a string against a standard format It returns nil if the string conforms to the format an error otherwise The format specification follows the json schema draft 4 validation extension see httpjsonschemaorglatestjsonschemavalidationhtmlanchor105 Supported formats are datetime RFC3339 date time value email RFC5322 email address hostname RFC1035 Internet host name ipv4 and ipv6 RFC2673 and RFC2373 IP address values uri RFC3986 URI value mac IEEE 802 MAC48 EUI48 or EUI64 MAC address value cidr RFC4632 and RFC4291 CIDR notation IP address value regexp Regular expression syntax accepted by RE2 func ValidatePattern go func ValidatePatternp string val string bool ValidatePattern returns an error if val does not match the regular expression p It makes an effort to minimize the number of times the regular expression needs to be compiled type Application go type Application struct logLogger Application logger contains filtered or unexported fields Application represents a goa application At the basic level an application consists of a set of controllers each implementing a given resource actions goagen generates global functions one per resource that make it possible to mount the corresponding controller onto an application An application contains the middleware logger and error handler shared by all its controllers Setting up an application might look like api goaNewmy api apiUseSomeMiddleware rc NewResourceController rcUseSomeOtherMiddleware appMountResourceControllerapi rc apiListenAndServe80 where NewResourceController returns an object that implements the resource actions as defined by the corresponding interface generated by goagen func Application Decode go func ver Application Decodev interface body ioReader contentType string error Decode uses registered Decoders to unmarshal a body based on the contentType func Application DecodeRequest go func ver Application DecodeRequestctx Context v interface error DecodeRequest retrives the request body and ContentType header and uses Decode to unmarshal into the provided interface func Application EncodeResponse go func ver Application EncodeResponsectx Context v interface error EncodeResponse uses registered Encoders to marshal the response body based on the request Accept header and writes it to the httpResponseWriter func Application ErrorHandler go func app Application ErrorHandler ErrorHandler ErrorHandler returns the currently set error handler func Application ListenAndServe go func app Application ListenAndServeaddr string error ListenAndServe starts a HTTP server and sets up a listener on the given hostport func Application ListenAndServeTLS go func app Application ListenAndServeTLSaddr certFile keyFile string error ListenAndServeTLS starts a HTTPS server and sets up a listener on the given hostport func Application Name go func app Application Name string Name returns the application name func Application NewController go func app Application NewControllerresName string Controller NewController returns a controller for the given resource This method is mainly intended for use by the generated code User code shouldnt have to call it directly func Application ServeFiles go func app Application ServeFilespath filename string error ServeFiles replies to the request with the contents of the named file or directory The logic for what to do when the filename points to a file vs a directory is the same as the standard http package ServeFile function The path may end with a wildcard that matches the rest of the URL eg filepath If it does the matching path is appended to filename to form the full file path so ServeFilesindexhtml wwwdataindexhtml Returns the content of the file wwwdataindexhtml when requests are sent to indexhtml and ServeFilesassetsfilepath wwwdataassets returns the content of the file wwwdataassetsxyz when requests are sent to assetsxyz func Application ServeMux go func app Application ServeMux ServeMux ServeMux returns the top level service mux func Application SetDecoder go func ver Application SetDecoderf DecoderFactory makeDefault bool contentTypes string SetDecoder sets a specific decoder to be used for the specified content types If a decoder is already registered it will be overwritten func Application SetEncoder go func ver Application SetEncoderf EncoderFactory makeDefault bool contentTypes string SetEncoder sets a specific encoder to be used for the specified content types If an encoder is already registered it will be overwritten func Application SetErrorHandler go func app Application SetErrorHandlerhandler ErrorHandler SetErrorHandler defines an application wide error handler The default error handler DefaultErrorHandler responds with a 500 status code and the error message in the response body TerseErrorHandler provides an alternative implementation that does not write the error message to the response body for internal errors eg for production Set it with SetErrorHandlerTerseErrorHandler Controller specific error handlers should be set using the Controller type SetErrorHandler method instead func Application SetMissingVersionHandler go func app Application SetMissingVersionHandlerhandler MissingVersionHandler SetMissingVersionHandler registers the service missing version handler func Application Use go func app Application Usem Middleware Use adds a middleware to the application wide middleware chain See NewMiddleware for wrapping goa and http handlers into goa middleware goa comes with a set of commonly used middleware see middlewarego Controller specific middleware should be mounted using the Controller type Use method instead func Application Version go func app Application Versionname string ServiceVersion Version returns an object that implements ServiceVersion based on the version name If there is no version registered it will instantiate a new version func Application VersionName go func ver Application VersionName string VersionName returns the version name type ApplicationController go type ApplicationController struct logLogger Controller logger contains filtered or unexported fields ApplicationController provides the common state and behavior for generated controllers func ApplicationController ErrorHandler go func ctrl ApplicationController ErrorHandler ErrorHandler ErrorHandler returns the currently set error handler func ApplicationController HandleError go func ctrl ApplicationController HandleErrorctx Context err error HandleError invokes the controller error handler or if there isnt one the service error handler func ApplicationController HandleFunc go func ctrl ApplicationController HandleFuncname string h d Handler HandleFunc HandleFunc wraps al request handler into a HandleFunc The HandleFunc initializes the request context by loading the request state invokes the handler and in case of error invokes the controller if there is one or application error handler This function is intended for the controller generated code User code should not need to call it directly func ApplicationController MiddlewareChain go func ctrl ApplicationController MiddlewareChain Middleware MiddlewareChain returns the controller middleware chain func ApplicationController SetErrorHandler go func ctrl ApplicationController SetErrorHandlerhandler ErrorHandler SetErrorHandler defines a controller specific error handler When a controller action returns an error goa checks whether the controller is equipped with a error handler and if so calls it with the error given as argument If there is no controller error handler then goa calls the application wide error handler instead func ApplicationController Use go func ctrl ApplicationController Usem Middleware Use adds a middleware to the controller See NewMiddleware for wrapping goa and http handlers into goa middleware goa comes with a set of commonly used middleware see middlewarego type BadRequestError go type BadRequestError struct Actual error BadRequestError is the type of errors that result in a response with status code 400 func NewBadRequestError go func NewBadRequestErrorerr error BadRequestError NewBadRequestError wraps the given error into a BadRequestError func BadRequestError Error go func b BadRequestError Error string Error implements error type BasicSigner go type BasicSigner struct Username is the basic auth user Username string Password is err guess what the basic auth password Password string BasicSigner implements basic auth func BasicSigner RegisterFlags go func s BasicSigner RegisterFlagsapp cobraCommand RegisterFlags adds the user and pass flags to the client tool func BasicSigner Sign go func s BasicSigner Signreq httpRequest error Sign adds the basic auth header to the request type Client go type Client struct Logger is the logger used to log client requests log15Logger Client is the underlying http client httpClient Signers contains the ordered list of request signers A signer may add headers cookies etc to a request generally to perform auth Signers Signer Scheme is the HTTP scheme used to make requests to the API host Scheme string Host is the service hostname Host string UserAgent is the user agent set in requests made by the client UserAgent string Dump indicates whether to dump request response Dump bool Client is the command client data structure for all goa service clients func NewClient go func NewClient Client NewClient create a new API client func Client Do go func c Client Doreq httpRequest httpResponse error Do wraps the underlying http client Do method and adds logging type Context go type Context struct contextContext Underlying context logLogger Context logger Context is the object that provides access to the underlying HTTP request and response state Context implements httpResponseWriter and also provides helper methods for writing HTTP responses It also implements the contextContext interface described at httpbloggolangorgcontext func NewContext go func NewContextgctx contextContext service Service req httpRequest rw httpResponseWriter params urlValues Context NewContext builds a goa context from the given contextContext and request state If gctx is nil then contextBackground is used instead func Context AllParams go func ctx Context AllParams urlValues AllParams return all URL and querystring parameters func Context BadRequest go func ctx Context BadRequesterr BadRequestError error BadRequest sends a HTTP response with status code 400 and the given error as body func Context Bug go func ctx Context Bugformat string a interface error Bug sends a HTTP response with status code 500 and the given body The body can be set using a format and substituted values a la fmtPrintf func Context Get go func ctx Context Getname string string Get returns the param or querystring value with the given name func Context GetMany go func ctx Context GetManyname string string GetMany returns the querystring values with the given name or nil if there arent any func Context GetNames go func ctx Context GetNames string GetNames returns all the querystring and URL parameter names func Context Header go func ctx Context Header httpHeader Header returns the response header It implements the httpResponseWriter interface func Context RawPayload go func ctx Context RawPayload interface RawPayload returns the deserialized request body or nil if body is empty func Context Request go func ctx Context Request httpRequest Request returns the underlying HTTP request func Context Respond go func ctx Context Respondcode int body interface error Respond serializes the given body matching the request Accept header against the service encoders It uses the default service encoder if no match is found func Context RespondBytes go func ctx Context RespondBytescode int body byte error RespondBytes writes the given HTTP status code and response body This method should only be called once per request func Context ResponseLength go func ctx Context ResponseLength int ResponseLength returns the response body length in bytes if the response was written to the context via one of the response methods Respond JSON BadRequest Bug 0 otherwise func Context ResponseStatus go func ctx Context ResponseStatus int ResponseStatus returns the response status if it was set via one of the context response methods Respond JSON BadRequest Bug 0 otherwise func Context ResponseWritten go func ctx Context ResponseWritten bool ResponseWritten returns true if an HTTP response was written func Context Service go func ctx Context Service Service Service returns the underlying service func Context SetPayload go func ctx Context SetPayloadpayload interface SetPayload initializes the unmarshaled request body value func Context SetResponseWriter go func ctx Context SetResponseWriterrw httpResponseWriter httpResponseWriter SetResponseWriter overrides the context underlying response writer It returns the response writer that was previously set func Context SetValue go func ctx Context SetValuekey val interface SetValue sets the value associated with key in the context The value can be retrieved using the Value method Note that this changes the underlying contextContext object and thus clients holding a reference to that wont be able to access the new value Its probably a bad idea to hold a reference to the inner context anyway func Context Write go func ctx Context Writebody byte int error Write writes the HTTP response body It implements the httpResponseWriter interface func Context WriteHeader go func ctx Context WriteHeadercode int WriteHeader writes the HTTP status code to the response It implements the httpResponseWriter interface type Controller go type Controller interface logLogger Use adds a middleware to the controller middleware chain It is a convenient method for doing appendctrlMiddlewareChain m UseMiddleware MiddlewareChain returns the controller middleware chain including the servicewide middleware MiddlewareChain Middleware ErrorHandler returns the currently set error handler ErrorHandler ErrorHandler SetErrorHandler sets the controller specific error handler SetErrorHandlerErrorHandler HandleFunc returns a HandleFunc from the given handler name is used solely for logging HandleFuncname string h d Handler HandleFunc Controller is the interface implemented by all goa controllers A controller implements a given resource actions There is a onetoone relationship between designed resources and generated controllers Controllers may override the service wide error handler and be equipped with controller specific middleware type DecodeFunc go type DecodeFunc funcContext ioReadCloser interface error DecodeFunc is the function that initialize the unmarshaled payload from the request body type Decoder go type Decoder interface Decodev interface error A Decoder unmarshals an ioReader into an interface type DecoderFactory go type DecoderFactory interface NewDecoderr ioReader Decoder A DecoderFactory generates custom decoders func GobDecoderFactory go func GobDecoderFactory DecoderFactory GobDecoderFactory returns a struct that can generate new gobDecoders func JSONDecoderFactory go func JSONDecoderFactory DecoderFactory JSONDecoderFactory returns a struct that can generate new jsonDecoders func XMLDecoderFactory go func XMLDecoderFactory DecoderFactory XMLDecoderFactory returns a struct that can generate new xmlDecoders type DefaultMux go type DefaultMux struct SelectVersionFunc SelectVersionFunc contains filtered or unexported fields DefaultMux is the default goa mux It dispatches requests to the appropriate version mux using a SelectVersionFunc The default func is DefaultVersionFunc change it with SelectVersion func DefaultMux Handle go func m DefaultMux Handlemethod path string handle HandleFunc Handle sets the handler for the given verb and path func DefaultMux Lookup go func m DefaultMux Lookupmethod path string HandleFunc Lookup returns the HandleFunc associated with the given method and path func DefaultMux SelectVersion go func m DefaultMux SelectVersionsv SelectVersionFunc SelectVersion sets the func used to compute the API version targetted by a request func DefaultMux ServeHTTP go func m DefaultMux ServeHTTPrw httpResponseWriter req httpRequest ServeHTTP is the function called back by the underlying HTTP server to handle incoming requests type Encoder go type Encoder interface Encodev interface error An Encoder marshals from an interface into an ioWriter type EncoderFactory go type EncoderFactory interface NewEncoderw ioWriter Encoder A EncoderFactory generates custom encoders func GobEncoderFactory go func GobEncoderFactory EncoderFactory GobEncoderFactory returns a struct that can generate new gobEncoders func JSONEncoderFactory go func JSONEncoderFactory EncoderFactory JSONEncoderFactory returns a struct that can generate new jsonEncoders func XMLEncoderFactory go func XMLEncoderFactory EncoderFactory XMLEncoderFactory returns a struct that can generate new xmlEncoders type Encoding go type Encoding interface DecodeRequest uses registered Decoders to unmarshal the request body based on the request ContentType header DecodeRequestctx Context v interface error EncodeResponse uses registered Encoders to marshal the response body based on the request Accept header and writes the result to the httpResponseWriter EncodeResponsectx Context v interface error SetDecoder registers a decoder for the given content types If makeDefault is true then the decoder is used to decode payloads where none of the registered decoders support the request content type SetDecoderf DecoderFactory makeDefault bool contentTypes string SetEncoder registers an encoder for the given content types If makeDefault is true then the encoder is used to encode bodies where none of the registered encoders match the request Accept header SetEncoderf EncoderFactory makeDefault bool contentTypes string Encoding contains the encoding and decoding support type ErrorHandler go type ErrorHandler funcContext error ErrorHandler defines the application error handler signature type ErrorID go type ErrorID int ErrorID is an enum listing the possible types of errors func ErrorID Title go func k ErrorID Title string Title returns a human friendly error title type Format go type Format string Format defines a validation format go const FormatDateTime defines RFC3339 date time values FormatDateTime Format datetime FormatEmail defines RFC5322 email addresses FormatEmail email FormatHostname defines RFC1035 Internet host names FormatHostname hostname FormatIPv4 defines RFC2373 IPv4 address values FormatIPv4 ipv4 FormatIPv6 defines RFC2373 IPv6 address values FormatIPv6 ipv6 FormatURI defines RFC3986 URI values FormatURI uri FormatMAC defines IEEE 802 MAC48 EUI48 or EUI64 MAC address values FormatMAC mac FormatCIDR defines RFC4632 and RFC4291 CIDR notation IP address values FormatCIDR cidr FormatRegexp Regexp defines regular expression syntax accepted by RE2 FormatRegexp regexp type GracefulApplication go type GracefulApplication struct Application syncMutex Interrupted is true if the application is in the process of shutting down Interrupted bool CancelOnShutdown tells whether existing requests should be canceled when shutdown is triggered true or whether to wait until the requests complete false CancelOnShutdown bool contains filtered or unexported fields GracefulApplication is a goa application using a graceful shutdown server When sending any of the signals listed in InterruptSignals to the process GracefulApplication disables keepalive connections closes the listening socket allowing another process to listen on that port immediately calls Cancel signaling all active handlers func GracefulApplication Decode go func ver GracefulApplication Decodev interface body ioReader contentType string error Decode uses registered Decoders to unmarshal a body based on the contentType func GracefulApplication DecodeRequest go func ver GracefulApplication DecodeRequestctx Context v interface error DecodeRequest retrives the request body and ContentType header and uses Decode to unmarshal into the provided interface func GracefulApplication EncodeResponse go func ver GracefulApplication EncodeResponsectx Context v interface error EncodeResponse uses registered Encoders to marshal the response body based on the request Accept header and writes it to the httpResponseWriter func GracefulApplication ListenAndServe go func gapp GracefulApplication ListenAndServeaddr string error ListenAndServe starts the HTTP server and sets up a listener on the given hostport func GracefulApplication ListenAndServeTLS go func gapp GracefulApplication ListenAndServeTLSaddr certFile keyFile string error ListenAndServeTLS starts a HTTPS server and sets up a listener on the given hostport func GracefulApplication SetDecoder go func ver GracefulApplication SetDecoderf DecoderFactory makeDefault bool contentTypes string SetDecoder sets a specific decoder to be used for the specified content types If a decoder is already registered it will be overwritten func GracefulApplication SetEncoder go func ver GracefulApplication SetEncoderf EncoderFactory makeDefault bool contentTypes string SetEncoder sets a specific encoder to be used for the specified content types If an encoder is already registered it will be overwritten func GracefulApplication Shutdown go func gapp GracefulApplication Shutdown bool Shutdown initiates graceful shutdown of the running server once Returns true on initial shutdown and false if already shutting down func GracefulApplication VersionName go func ver GracefulApplication VersionName string VersionName returns the version name type HandleFunc go type HandleFunc funchttpResponseWriter httpRequest urlValues HandleFunc provides the implementation for an API endpoint The values include both the querystring and path parameter values type Handler go type Handler funcContext error Handler defines the controller handler signatures Controller handlers accept a context and return an error The context provides typed access to the request and response state It implements the golangorgxnetcontext package Context interface so that handlers may define deadlines and cancelation signals see the Timeout middleware as an example If a controller handler returns an error then the application error handler is invoked with the request context and the error The error handler is responsible for writing the HTTP response See DefaultErrorHandler and TerseErrorHandler type JWTSigner go type JWTSigner struct Header is the name of the HTTP header which contains the JWT The default is Authentication Header string Format represents the format used to render the JWT The default is Bearer s Format string contains filtered or unexported fields JWTSigner implements JSON Web Token auth func JWTSigner RegisterFlags go func s JWTSigner RegisterFlagsapp cobraCommand RegisterFlags adds the jwt flag to the client tool func JWTSigner Sign go func s JWTSigner Signreq httpRequest error Sign adds the JWT auth header type Middleware go type Middleware funcHandler Handler Middleware represents the canonical goa middleware signature func NewMiddleware go func NewMiddlewarem interface mw Middleware err error NewMiddleware creates a middleware from the given argument The allowed types for the argument are a goa middleware goaMiddleware or funcgoaHandler goaHandler a goa handler goaHandler or funcgoaContext error an http middleware funchttpHandler httpHandler or an http handler httpHandler or funchttpResponseWriter httpRequest An error is returned if the given argument is not one of the types above type MissingVersionHandler go type MissingVersionHandler funcContext string MissingVersionHandler defines the function that handles requests targetting a non existant API version type MultiError go type MultiError error MultiError records multiple errors func MultiError Error go func m MultiError Error string Error summarizes all the underlying error messages in one JSON array type OAuth2Signer go type OAuth2Signer struct RefreshURLFormat is a format that generates the refresh access token URL given a refresh token RefreshURLFormat string RefreshToken contains the OAuth2 refresh token from which access tokens are created RefreshToken string contains filtered or unexported fields OAuth2Signer enables the use of OAuth2 refresh tokens It takes care of creating access tokens given a refresh token and a refresh URL as defined in RFC 6749 Note that this signer does not concern itself with generating the initial refresh token this has to be done prior to using the client Also it assumes the response of the refresh request response is JSON encoded and of the form accesstoken2YotnFZFEjr1zCsicMWpAA expiresin3600 refreshtokentGzv3JOkF0XG5Qx2TlKWIA where the expiresin and refreshtoken properties are optional and additional properties are ignored If the response contains a expiresin property then the signer takes care of making refresh requests prior to the token expiration func OAuth2Signer Refresh go func s OAuth2Signer Refresh error Refresh makes a OAuth2 refresh access token request func OAuth2Signer RegisterFlags go func s OAuth2Signer RegisterFlagsapp cobraCommand RegisterFlags adds the refreshURL and refreshToken flags to the client tool func OAuth2Signer Sign go func s OAuth2Signer Signreq httpRequest error Sign refreshes the access token if needed and adds the OAuth header type ResettableDecoder go type ResettableDecoder interface Decoder Resetr ioReader The ResettableDecoder is used to determine whether or not a Decoder can be reset and thus safely reused in a syncPool type ResettableEncoder go type ResettableEncoder interface Encoder Resetw ioWriter The ResettableEncoder is used to determine whether or not a Encoder can be reset and thus safely reused in a syncPool type SelectVersionFunc go type SelectVersionFunc funchttpRequest string SelectVersionFunc is used by the default goa mux to compute the API version targetted by a given request The default implementation looks for a version as path prefix Alternate implementations can be set using the DefaultMux SelectVersion method func CombineSelectVersionFunc go func CombineSelectVersionFuncfuncs SelectVersionFunc SelectVersionFunc CombineSelectVersionFunc returns a SelectVersionFunc that tries each func passed as argument in order and returns the first nonempty string version func HeaderSelectVersionFunc go func HeaderSelectVersionFuncheader string SelectVersionFunc HeaderSelectVersionFunc returns a SelectVersionFunc that looks for the version in the header with the given name func PathSelectVersionFunc go func PathSelectVersionFuncpattern zeroVersion string SelectVersionFunc PathSelectVersionFunc returns a SelectVersionFunc that uses the given path pattern to extract the version from the request path Use the same path pattern given in the DSL to define the API base path eg apiversion If the pattern matches zeroVersion then the empty version is returned ie the unversioned controller handles the request func QuerySelectVersionFunc go func QuerySelectVersionFuncquery string SelectVersionFunc QuerySelectVersionFunc returns a SelectVersionFunc that looks for the version in the querystring with the given key type ServeMux go type ServeMux interface httpHandler Handle sets the HandleFunc for a given HTTP method and path Handlemethod path string handle HandleFunc Lookup returns the HandleFunc associated with the given HTTP method and path Lookupmethod path string HandleFunc ServeMux is the interface implemented by the service request muxes There is one instance of ServeMux per service version and one for requests targetting no version It implements httpHandler and makes it possible to register request handlers for specific HTTP methods and request path via the Handle method func NewMux go func NewMuxapp Application ServeMux NewMux returns the default service mux implementation type Service go type Service interface Logging methods configure the log handler using the Logger global variable logLogger Encoding manages the service decoders and encoders Encoding Name is the name of the goa application Name string Use adds a middleware to the servicewide middleware chain Usem Middleware ErrorHandler returns the currently set error handler useful for middleware ErrorHandler ErrorHandler SetErrorHandler registers the servicewide error handler SetErrorHandlerErrorHandler SetMissingVersionHandler registers the handler invoked when a request targets a non existant API version SetMissingVersionHandlerMissingVersionHandler ServeMux returns the service mux ServeMux ServeMux ListenAndServe starts a HTTP server on the given port ListenAndServeaddr string error ListenAndServeTLS starts a HTTPS server on the given port ListenAndServeTLSadd certFile keyFile string error ServeFiles replies to the request with the contents of the named file or directory The logic for what to do when the filename points to a file vs a directory is the same as the standard http package ServeFile function The path may end with a wildcard that matches the rest of the URL eg filepath If it does the matching path is appended to filename to form the full file path so ServeFilesindexhtml wwwdataindexhtml Returns the content of the file wwwdataindexhtml when requests are sent to indexhtml and ServeFilesassetsfilepath wwwdataassets returns the content of the file wwwdataassetsxyz when requests are sent to assetsxyz ServeFilespath filename string error Version returns an object that implements ServiceVersion based on the version name If there is no version registered it will instantiate a new version Versionname string ServiceVersion Decode uses registered Decoders to unmarshal a body based on the contentType Decodev interface body ioReader contentType string error NewController returns a controller for the resource with the given name This method is mainly intended for use by generated code NewControllerresName string Controller Service is the interface implemented by all goa services It provides methods for configuring a service and running it func New go func Newname string Service New instantiates an application with the given name and default decodersencoders func NewGraceful go func NewGracefulname string cancelOnShutdown bool Service NewGraceful returns a goa application that uses a graceful shutdown server type ServiceVersion go type ServiceVersion interface Encoding manages the version decoders and encoders Encoding VersionName returns the version name VersionName string ServeMux returns the version request mux ServeMux ServeMux ServiceVersion is the interface for interacting with individual service versions type Signer go type Signer interface Sign adds required headers cookies etc SignhttpRequest error RegisterFlags registers the command line flags that defines the values used to initialize the signer RegisterFlagscmd cobraCommand Signer is the common interface implemented by all signers type TypedError go type TypedError struct ID ErrorID Mesg string TypedError describes an error that can be returned in a HTTP response func TypedError Error go func t TypedError Error string Error builds an error message from the typed error details func TypedError MarshalJSON go func t TypedError MarshalJSON byte error MarshalJSON implements the json marshaler interface Generated by godoc2mdhttpgodocorggithubcomdavecheneygodoc2md"},{"title":"JWT","tags":["auth","jwt"],"href":"/middleware/jwt","content":"Getting Started Guide Here JWT"},{"title":"gorma","tags":["orm","gorm","database"],"href":"/plugins/gorma","content":"hello gorma"},{"title":"Hello Goa!","tags":["help"],"href":"/tutorials/hello-goa","content":"my first goa api post"}]